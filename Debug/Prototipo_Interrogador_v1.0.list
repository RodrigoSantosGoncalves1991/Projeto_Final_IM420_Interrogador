
Prototipo_Interrogador_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  0800a7c8  0800a7c8  0001a7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaac  0800aaac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800aaac  0800aaac  0001aaac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aab4  0800aab4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aab4  0800aab4  0001aab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aab8  0800aab8  0001aab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800aabc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010fa4  20000074  0800ab30  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011018  0800ab30  00021018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002523b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e06  00000000  00000000  000452df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cb0  00000000  00000000  000490e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001af8  00000000  00000000  0004ad98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004ddf  00000000  00000000  0004c890  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017274  00000000  00000000  0005166f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011d045  00000000  00000000  000688e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00185928  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f30  00000000  00000000  001859a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a7b0 	.word	0x0800a7b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	0800a7b0 	.word	0x0800a7b0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e10:	f001 f8f5 	bl	8001ffe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e14:	f000 f86e 	bl	8000ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e18:	f000 fa20 	bl	800125c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000e1c:	f000 f988 	bl	8001130 <MX_LPUART1_UART_Init>
  MX_TIM16_Init();
 8000e20:	f000 f9ce 	bl	80011c0 <MX_TIM16_Init>
  MX_ADC1_Init();
 8000e24:	f000 f8d2 	bl	8000fcc <MX_ADC1_Init>
  MX_DAC1_Init();
 8000e28:	f000 f948 	bl	80010bc <MX_DAC1_Init>
  MX_TIM17_Init();
 8000e2c:	f000 f9f0 	bl	8001210 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  //Inicia timer 16
  HAL_TIM_Base_Start_IT(&htim16);
 8000e30:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <main+0xa4>)
 8000e32:	f004 faff 	bl	8005434 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e36:	f005 fc53 	bl	80066e0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of filaVarredura */
  filaVarreduraHandle = osMessageQueueNew (10, sizeof(DADOS_VARREDURA_OBJ_t), &filaVarredura_attributes);
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <main+0xa8>)
 8000e3c:	f240 3126 	movw	r1, #806	; 0x326
 8000e40:	200a      	movs	r0, #10
 8000e42:	f005 ff23 	bl	8006c8c <osMessageQueueNew>
 8000e46:	4602      	mov	r2, r0
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <main+0xac>)
 8000e4a:	601a      	str	r2, [r3, #0]

  /* creation of filaValorInterrogado */
  filaValorInterrogadoHandle = osMessageQueueNew (10, sizeof(VALOR_INTERROGADO_OBJ_t), &filaValorInterrogado_attributes);
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <main+0xb0>)
 8000e4e:	2104      	movs	r1, #4
 8000e50:	200a      	movs	r0, #10
 8000e52:	f005 ff1b 	bl	8006c8c <osMessageQueueNew>
 8000e56:	4602      	mov	r2, r0
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <main+0xb4>)
 8000e5a:	601a      	str	r2, [r3, #0]

  /* creation of filaCaracterizacao */
  filaCaracterizacaoHandle = osMessageQueueNew (10, sizeof(DADOS_VARREDURA_OBJ_t), &filaCaracterizacao_attributes);
 8000e5c:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <main+0xb8>)
 8000e5e:	f240 3126 	movw	r1, #806	; 0x326
 8000e62:	200a      	movs	r0, #10
 8000e64:	f005 ff12 	bl	8006c8c <osMessageQueueNew>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <main+0xbc>)
 8000e6c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of calculoComprimentoOndaBragg */
  calculoComprimentoOndaBraggHandle = osThreadNew(startCalculoComprimentoOndaBragg, NULL, &calculoComprimentoOndaBragg_attributes);
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <main+0xc0>)
 8000e70:	2100      	movs	r1, #0
 8000e72:	4817      	ldr	r0, [pc, #92]	; (8000ed0 <main+0xc4>)
 8000e74:	f005 fc9e 	bl	80067b4 <osThreadNew>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <main+0xc8>)
 8000e7c:	601a      	str	r2, [r3, #0]

  /* creation of caracterizacaoDoEspectro */
  caracterizacaoDoEspectroHandle = osThreadNew(startCaracterizacaoDoEspectro, NULL, &caracterizacaoDoEspectro_attributes);
 8000e7e:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <main+0xcc>)
 8000e80:	2100      	movs	r1, #0
 8000e82:	4816      	ldr	r0, [pc, #88]	; (8000edc <main+0xd0>)
 8000e84:	f005 fc96 	bl	80067b4 <osThreadNew>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <main+0xd4>)
 8000e8c:	601a      	str	r2, [r3, #0]

  /* creation of transmissaoDeDadosPC */
  transmissaoDeDadosPCHandle = osThreadNew(startTransmissaoDeDadosPC, NULL, &transmissaoDeDadosPC_attributes);
 8000e8e:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <main+0xd8>)
 8000e90:	2100      	movs	r1, #0
 8000e92:	4815      	ldr	r0, [pc, #84]	; (8000ee8 <main+0xdc>)
 8000e94:	f005 fc8e 	bl	80067b4 <osThreadNew>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <main+0xe0>)
 8000e9c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* Inicializa o objeto RTOS Event Flag*/
  sinalEventFlag = osEventFlagsNew(NULL);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f005 fd5c 	bl	800695c <osEventFlagsNew>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <main+0xe4>)
 8000ea8:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000eaa:	f005 fc4d 	bl	8006748 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <main+0xa2>
 8000eb0:	20010f34 	.word	0x20010f34
 8000eb4:	0800aa00 	.word	0x0800aa00
 8000eb8:	20010f80 	.word	0x20010f80
 8000ebc:	0800aa18 	.word	0x0800aa18
 8000ec0:	20010e2c 	.word	0x20010e2c
 8000ec4:	0800aa30 	.word	0x0800aa30
 8000ec8:	20010f30 	.word	0x20010f30
 8000ecc:	0800a994 	.word	0x0800a994
 8000ed0:	080013ed 	.word	0x080013ed
 8000ed4:	20010ddc 	.word	0x20010ddc
 8000ed8:	0800a9b8 	.word	0x0800a9b8
 8000edc:	080014e1 	.word	0x080014e1
 8000ee0:	20010f2c 	.word	0x20010f2c
 8000ee4:	0800a9dc 	.word	0x0800a9dc
 8000ee8:	08001775 	.word	0x08001775
 8000eec:	20010dd8 	.word	0x20010dd8
 8000ef0:	20010f28 	.word	0x20010f28

08000ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0a8      	sub	sp, #160	; 0xa0
 8000ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000efe:	2238      	movs	r2, #56	; 0x38
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f009 f84f 	bl	8009fa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f18:	463b      	mov	r3, r7
 8000f1a:	2254      	movs	r2, #84	; 0x54
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f009 f841 	bl	8009fa6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f24:	2000      	movs	r0, #0
 8000f26:	f003 f957 	bl	80041d8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f32:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f34:	2340      	movs	r3, #64	; 0x40
 8000f36:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f44:	2304      	movs	r3, #4
 8000f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f4a:	2355      	movs	r3, #85	; 0x55
 8000f4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f62:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 f9ea 	bl	8004340 <HAL_RCC_OscConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f72:	f000 fe03 	bl	8001b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f76:	230f      	movs	r3, #15
 8000f78:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f8e:	2104      	movs	r1, #4
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 fced 	bl	8004970 <HAL_RCC_ClockConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f9c:	f000 fdee 	bl	8001b7c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_ADC12;
 8000fa0:	f248 0320 	movw	r3, #32800	; 0x8020
 8000fa4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000faa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f003 ff2a 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000fbe:	f000 fddd 	bl	8001b7c <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	37a0      	adds	r7, #160	; 0xa0
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f008 ffde 	bl	8009fa6 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fea:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <MX_ADC1_Init+0xe8>)
 8000fec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ff0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <MX_ADC1_Init+0xe8>)
 8000ff4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ff8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffa:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <MX_ADC1_Init+0xe8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <MX_ADC1_Init+0xe8>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001006:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <MX_ADC1_Init+0xe8>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <MX_ADC1_Init+0xe8>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <MX_ADC1_Init+0xe8>)
 8001014:	2204      	movs	r2, #4
 8001016:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_ADC1_Init+0xe8>)
 800101a:	2200      	movs	r2, #0
 800101c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <MX_ADC1_Init+0xe8>)
 8001020:	2200      	movs	r2, #0
 8001022:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001024:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <MX_ADC1_Init+0xe8>)
 8001026:	2201      	movs	r2, #1
 8001028:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <MX_ADC1_Init+0xe8>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <MX_ADC1_Init+0xe8>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_ADC1_Init+0xe8>)
 800103a:	2200      	movs	r2, #0
 800103c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_ADC1_Init+0xe8>)
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_ADC1_Init+0xe8>)
 8001048:	2200      	movs	r2, #0
 800104a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_ADC1_Init+0xe8>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001054:	4817      	ldr	r0, [pc, #92]	; (80010b4 <MX_ADC1_Init+0xe8>)
 8001056:	f001 fa57 	bl	8002508 <HAL_ADC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001060:	f000 fd8c 	bl	8001b7c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106c:	4619      	mov	r1, r3
 800106e:	4811      	ldr	r0, [pc, #68]	; (80010b4 <MX_ADC1_Init+0xe8>)
 8001070:	f002 fab8 	bl	80035e4 <HAL_ADCEx_MultiModeConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800107a:	f000 fd7f 	bl	8001b7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_ADC1_Init+0xec>)
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001082:	2306      	movs	r3, #6
 8001084:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800108a:	237f      	movs	r3, #127	; 0x7f
 800108c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108e:	2304      	movs	r3, #4
 8001090:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_ADC1_Init+0xe8>)
 800109c:	f001 fde4 	bl	8002c68 <HAL_ADC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80010a6:	f000 fd69 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3730      	adds	r7, #48	; 0x30
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20010ebc 	.word	0x20010ebc
 80010b8:	04300002 	.word	0x04300002

080010bc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	; 0x30
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2230      	movs	r2, #48	; 0x30
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 ff6c 	bl	8009fa6 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_DAC1_Init+0x6c>)
 80010d0:	4a16      	ldr	r2, [pc, #88]	; (800112c <MX_DAC1_Init+0x70>)
 80010d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80010d4:	4814      	ldr	r0, [pc, #80]	; (8001128 <MX_DAC1_Init+0x6c>)
 80010d6:	f002 fc69 	bl	80039ac <HAL_DAC_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80010e0:	f000 fd4c 	bl	8001b7c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001100:	2304      	movs	r3, #4
 8001102:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_DAC1_Init+0x6c>)
 8001110:	f002 fcea 	bl	8003ae8 <HAL_DAC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800111a:	f000 fd2f 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3730      	adds	r7, #48	; 0x30
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20010dc4 	.word	0x20010dc4
 800112c:	50000800 	.word	0x50000800

08001130 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <MX_LPUART1_UART_Init+0x84>)
 8001136:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <MX_LPUART1_UART_Init+0x88>)
 8001138:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 1000000;
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <MX_LPUART1_UART_Init+0x84>)
 800113c:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <MX_LPUART1_UART_Init+0x8c>)
 800113e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <MX_LPUART1_UART_Init+0x84>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_LPUART1_UART_Init+0x84>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_LPUART1_UART_Init+0x84>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_LPUART1_UART_Init+0x84>)
 8001154:	220c      	movs	r2, #12
 8001156:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_LPUART1_UART_Init+0x84>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_LPUART1_UART_Init+0x84>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <MX_LPUART1_UART_Init+0x84>)
 8001166:	2200      	movs	r2, #0
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800116a:	4812      	ldr	r0, [pc, #72]	; (80011b4 <MX_LPUART1_UART_Init+0x84>)
 800116c:	f004 fc70 	bl	8005a50 <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001176:	f000 fd01 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800117a:	2100      	movs	r1, #0
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <MX_LPUART1_UART_Init+0x84>)
 800117e:	f005 f9c2 	bl	8006506 <HAL_UARTEx_SetTxFifoThreshold>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001188:	f000 fcf8 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118c:	2100      	movs	r1, #0
 800118e:	4809      	ldr	r0, [pc, #36]	; (80011b4 <MX_LPUART1_UART_Init+0x84>)
 8001190:	f005 f9f7 	bl	8006582 <HAL_UARTEx_SetRxFifoThreshold>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_LPUART1_UART_Init+0x6e>
  {
    Error_Handler();
 800119a:	f000 fcef 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_LPUART1_UART_Init+0x84>)
 80011a0:	f005 f978 	bl	8006494 <HAL_UARTEx_DisableFifoMode>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 80011aa:	f000 fce7 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20010e30 	.word	0x20010e30
 80011b8:	40008000 	.word	0x40008000
 80011bc:	000f4240 	.word	0x000f4240

080011c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_TIM16_Init+0x48>)
 80011c6:	4a11      	ldr	r2, [pc, #68]	; (800120c <MX_TIM16_Init+0x4c>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000-1;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_TIM16_Init+0x48>)
 80011cc:	f244 2267 	movw	r2, #16999	; 0x4267
 80011d0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <MX_TIM16_Init+0x48>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_TIM16_Init+0x48>)
 80011da:	f242 720f 	movw	r2, #9999	; 0x270f
 80011de:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_TIM16_Init+0x48>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_TIM16_Init+0x48>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_TIM16_Init+0x48>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_TIM16_Init+0x48>)
 80011f4:	f004 f856 	bl	80052a4 <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80011fe:	f000 fcbd 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20010f34 	.word	0x20010f34
 800120c:	40014400 	.word	0x40014400

08001210 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_TIM17_Init+0x44>)
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <MX_TIM17_Init+0x48>)
 8001218:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_TIM17_Init+0x44>)
 800121c:	22a9      	movs	r2, #169	; 0xa9
 800121e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_TIM17_Init+0x44>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65534;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_TIM17_Init+0x44>)
 8001228:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800122c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_TIM17_Init+0x44>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <MX_TIM17_Init+0x44>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_TIM17_Init+0x44>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_TIM17_Init+0x44>)
 8001242:	f004 f82f 	bl	80052a4 <HAL_TIM_Base_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 800124c:	f000 fc96 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20010de0 	.word	0x20010de0
 8001258:	40014800 	.word	0x40014800

0800125c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4b39      	ldr	r3, [pc, #228]	; (8001358 <MX_GPIO_Init+0xfc>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	4a38      	ldr	r2, [pc, #224]	; (8001358 <MX_GPIO_Init+0xfc>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127e:	4b36      	ldr	r3, [pc, #216]	; (8001358 <MX_GPIO_Init+0xfc>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800128a:	4b33      	ldr	r3, [pc, #204]	; (8001358 <MX_GPIO_Init+0xfc>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4a32      	ldr	r2, [pc, #200]	; (8001358 <MX_GPIO_Init+0xfc>)
 8001290:	f043 0320 	orr.w	r3, r3, #32
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <MX_GPIO_Init+0xfc>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <MX_GPIO_Init+0xfc>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a2c      	ldr	r2, [pc, #176]	; (8001358 <MX_GPIO_Init+0xfc>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <MX_GPIO_Init+0xfc>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b27      	ldr	r3, [pc, #156]	; (8001358 <MX_GPIO_Init+0xfc>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4a26      	ldr	r2, [pc, #152]	; (8001358 <MX_GPIO_Init+0xfc>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <MX_GPIO_Init+0xfc>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2120      	movs	r1, #32
 80012d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012da:	f002 ff33 	bl	8004144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_AZUL_Pin|LED_VERDE_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80012e4:	481d      	ldr	r0, [pc, #116]	; (800135c <MX_GPIO_Init+0x100>)
 80012e6:	f002 ff2d 	bl	8004144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : uiBotaoProcessamento_Pin uiBotaoCaracterizacao_Pin */
  GPIO_InitStruct.Pin = uiBotaoProcessamento_Pin|uiBotaoCaracterizacao_Pin;
 80012ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_GPIO_Init+0x104>)
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4817      	ldr	r0, [pc, #92]	; (800135c <MX_GPIO_Init+0x100>)
 8001300:	f002 fd9e 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001304:	2320      	movs	r3, #32
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131e:	f002 fd8f 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_AZUL_Pin LED_VERDE_Pin */
  GPIO_InitStruct.Pin = LED_AZUL_Pin|LED_VERDE_Pin;
 8001322:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	4808      	ldr	r0, [pc, #32]	; (800135c <MX_GPIO_Init+0x100>)
 800133c:	f002 fd80 	bl	8003e40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2106      	movs	r1, #6
 8001344:	2028      	movs	r0, #40	; 0x28
 8001346:	f002 fb09 	bl	800395c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800134a:	2028      	movs	r0, #40	; 0x28
 800134c:	f002 fb20 	bl	8003990 <HAL_NVIC_EnableIRQ>

}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	48000800 	.word	0x48000800
 8001360:	10110000 	.word	0x10110000

08001364 <HAL_GPIO_EXTI_Callback>:
/* é o pino detectado pela interrupção externa do micro-*/
/* controlador.                                         */
/* Parâmetros de saída: não tem                         */
/* ******************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
  if (uiBotaoProcessamento_Pin == GPIO_Pin)
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001374:	d117      	bne.n	80013a6 <HAL_GPIO_EXTI_Callback+0x42>
  {
	HAL_GPIO_WritePin(GPIOC, LED_AZUL_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2140      	movs	r1, #64	; 0x40
 800137a:	481a      	ldr	r0, [pc, #104]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x80>)
 800137c:	f002 fee2 	bl	8004144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED_VERDE_Pin, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001386:	4817      	ldr	r0, [pc, #92]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x80>)
 8001388:	f002 fedc 	bl	8004144 <HAL_GPIO_WritePin>
	/*Limpa o Event Flag da operação de caracterização e coloca a tarefa startCaracterizacaoDoEspectro para dormir*/
    osEventFlagsClear(sinalEventFlag, OPERACAO_CARACTERIZACAO);
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x84>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2102      	movs	r1, #2
 8001392:	4618      	mov	r0, r3
 8001394:	f005 fb8c 	bl	8006ab0 <osEventFlagsClear>
    /*Seta o Event Flag da operação de sensoriamento e acorda a tarefa startCalculoComprimentoOndaBragg*/
	osEventFlagsSet(sinalEventFlag, OPERACAO_SENSORIAMENTO);
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x84>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	4618      	mov	r0, r3
 80013a0:	f005 fb2e 	bl	8006a00 <osEventFlagsSet>
	/*Limpa o Event Flag da operação de sensoriamento e coloca a tarefa startCalculoComprimentoOndaBragg para dormir*/
    osEventFlagsClear(sinalEventFlag, OPERACAO_SENSORIAMENTO);
    /*Seta o Event Flag da operação de caracterização e acorda a tarefa startCaracterizacaoDoEspectro*/
    osEventFlagsSet(sinalEventFlag, OPERACAO_CARACTERIZACAO);
  }
}
 80013a4:	e01a      	b.n	80013dc <HAL_GPIO_EXTI_Callback+0x78>
  else if (uiBotaoCaracterizacao_Pin == GPIO_Pin)
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013ac:	d116      	bne.n	80013dc <HAL_GPIO_EXTI_Callback+0x78>
	HAL_GPIO_WritePin(GPIOC, LED_VERDE_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b4:	480b      	ldr	r0, [pc, #44]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x80>)
 80013b6:	f002 fec5 	bl	8004144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED_AZUL_Pin, GPIO_PIN_SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2140      	movs	r1, #64	; 0x40
 80013be:	4809      	ldr	r0, [pc, #36]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x80>)
 80013c0:	f002 fec0 	bl	8004144 <HAL_GPIO_WritePin>
    osEventFlagsClear(sinalEventFlag, OPERACAO_SENSORIAMENTO);
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x84>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	4618      	mov	r0, r3
 80013cc:	f005 fb70 	bl	8006ab0 <osEventFlagsClear>
    osEventFlagsSet(sinalEventFlag, OPERACAO_CARACTERIZACAO);
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x84>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2102      	movs	r1, #2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f005 fb12 	bl	8006a00 <osEventFlagsSet>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	48000800 	.word	0x48000800
 80013e8:	20010f28 	.word	0x20010f28

080013ec <startCalculoComprimentoOndaBragg>:
/* filaValorInterrogadoHandle onde é carregada a Struct */
/* resultadoInterrogacao                                */
/* ******************************************************/
/* USER CODE END Header_startCalculoComprimentoOndaBragg */
void startCalculoComprimentoOndaBragg(void *argument)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	6018      	str	r0, [r3, #0]
  /*Variável que recebe situação da fila de mensagens para verificar se a fila está disponível*/
  osStatus_t status;
  /* Infinite loop */
  for(;;)
  { /*Aguarda a tarefa ser acordada por event flag, que no caso será disparado por interrupção de GPIO do pino PC13*/
    osEventFlagsWait(sinalEventFlag, OPERACAO_SENSORIAMENTO, osFlagsNoClear, osWaitForever);
 80013f8:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <startCalculoComprimentoOndaBragg+0xe8>)
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	2202      	movs	r2, #2
 8001402:	2101      	movs	r1, #1
 8001404:	f005 fbcc 	bl	8006ba0 <osEventFlagsWait>
    /*Carrega status da fila de mensagens e verifica a disponibilidade de elementos na fila*/
    status = osMessageQueueGet(filaVarreduraHandle, &arrayVarredura, NULL, 0U);
 8001408:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <startCalculoComprimentoOndaBragg+0xec>)
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	f107 010c 	add.w	r1, r7, #12
 8001410:	2300      	movs	r3, #0
 8001412:	2200      	movs	r2, #0
 8001414:	f005 fd34 	bl	8006e80 <osMessageQueueGet>
 8001418:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
    if (osOK == status)
 800141c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001420:	2b00      	cmp	r3, #0
 8001422:	d152      	bne.n	80014ca <startCalculoComprimentoOndaBragg+0xde>
    { /*Inicializa uiDataMax com menor valor possível do comprimento de onda relativo*/
      uiDataMax = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	f8a7 333e 	strh.w	r3, [r7, #830]	; 0x33e
      /*Busca por valor de comprimento de onda relativo, associado a valor de máxima potência de convolução do espectro refletido*/
	  for (uint16_t uiI = 0; arrayVarredura.uiNumAmostrasColetadas > uiI; uiI++)
 800142a:	2300      	movs	r3, #0
 800142c:	f8a7 333a 	strh.w	r3, [r7, #826]	; 0x33a
 8001430:	e01b      	b.n	800146a <startCalculoComprimentoOndaBragg+0x7e>
	  { /*Carrega uiData com valor do uiArrayAmostras na posição uiI*/
	    uint16_t uiData = arrayVarredura.uiArrayAmostras[uiI];
 8001432:	f8b7 333a 	ldrh.w	r3, [r7, #826]	; 0x33a
 8001436:	f107 020c 	add.w	r2, r7, #12
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	88db      	ldrh	r3, [r3, #6]
 8001440:	f8a7 3332 	strh.w	r3, [r7, #818]	; 0x332
	    /*Verifica se uiData é maior, caso positivo atualiza uiDataMax e salva uiI em uiValorInterrogado*/
	    if(uiDataMax < uiData)
 8001444:	f8b7 233e 	ldrh.w	r2, [r7, #830]	; 0x33e
 8001448:	f8b7 3332 	ldrh.w	r3, [r7, #818]	; 0x332
 800144c:	429a      	cmp	r2, r3
 800144e:	d207      	bcs.n	8001460 <startCalculoComprimentoOndaBragg+0x74>
	    {
	      uiDataMax = uiData;
 8001450:	f8b7 3332 	ldrh.w	r3, [r7, #818]	; 0x332
 8001454:	f8a7 333e 	strh.w	r3, [r7, #830]	; 0x33e
	      uiValorInterrogado = uiI;
 8001458:	f8b7 333a 	ldrh.w	r3, [r7, #826]	; 0x33a
 800145c:	f8a7 333c 	strh.w	r3, [r7, #828]	; 0x33c
	  for (uint16_t uiI = 0; arrayVarredura.uiNumAmostrasColetadas > uiI; uiI++)
 8001460:	f8b7 333a 	ldrh.w	r3, [r7, #826]	; 0x33a
 8001464:	3301      	adds	r3, #1
 8001466:	f8a7 333a 	strh.w	r3, [r7, #826]	; 0x33a
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	889b      	ldrh	r3, [r3, #4]
 8001470:	f8b7 233a 	ldrh.w	r2, [r7, #826]	; 0x33a
 8001474:	429a      	cmp	r2, r3
 8001476:	d3dc      	bcc.n	8001432 <startCalculoComprimentoOndaBragg+0x46>
	    }
	  }
	  /*Verifica sentido do struct de varredura recebido se crescente a translação para obter o valor do comprimento de onda absoluto é uma soma com o uiIndicePrimeiraAmostra que é o comprimento de onda de referência, no caso da varredura decrescente é uma subtração entre o comprimento de onda de referência e o comprimento de onda relativo*/
	  if ('c' == arrayVarredura.cSentidoVarredura)
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b63      	cmp	r3, #99	; 0x63
 8001480:	d108      	bne.n	8001494 <startCalculoComprimentoOndaBragg+0xa8>
	  {
	    uiValorInterrogado = uiValorInterrogado + arrayVarredura.uiIndicePrimeiraAmostra;
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	885a      	ldrh	r2, [r3, #2]
 8001488:	f8b7 333c 	ldrh.w	r3, [r7, #828]	; 0x33c
 800148c:	4413      	add	r3, r2
 800148e:	f8a7 333c 	strh.w	r3, [r7, #828]	; 0x33c
 8001492:	e007      	b.n	80014a4 <startCalculoComprimentoOndaBragg+0xb8>
	  }
	  else
	  {
	    uiValorInterrogado = arrayVarredura.uiIndicePrimeiraAmostra - uiValorInterrogado;
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	885a      	ldrh	r2, [r3, #2]
 800149a:	f8b7 333c 	ldrh.w	r3, [r7, #828]	; 0x33c
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	f8a7 333c 	strh.w	r3, [r7, #828]	; 0x33c
	  }
	  /*Armazena sentido da varredura na variável Struct VALOR_INTERROGADO_OBJ_t chamada resultadoInterrogacao*/
	  resultadoInterrogacao.cSentidoVarredura = arrayVarredura.cSentidoVarredura;
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	781a      	ldrb	r2, [r3, #0]
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	701a      	strb	r2, [r3, #0]
	  /*Armazena o comprimento de onda absoluto em resultadoInterrogacao*/
	  resultadoInterrogacao.uiValorInterrogado = uiValorInterrogado;
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	f8b7 233c 	ldrh.w	r2, [r7, #828]	; 0x33c
 80014b8:	805a      	strh	r2, [r3, #2]
	  /*Armazena a Struct resultadoInterrogacao na fila de mensagens filaValorInterrogadoHandle, que será recebida na tarefa de Transmissão de dados PC*/
	  osMessageQueuePut(filaValorInterrogadoHandle, &resultadoInterrogacao, 0U, 0U);
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <startCalculoComprimentoOndaBragg+0xf0>)
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	f107 0108 	add.w	r1, r7, #8
 80014c2:	2300      	movs	r3, #0
 80014c4:	2200      	movs	r2, #0
 80014c6:	f005 fc67 	bl	8006d98 <osMessageQueuePut>
    }
    osDelay(1);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f005 fa18 	bl	8006900 <osDelay>
    osEventFlagsWait(sinalEventFlag, OPERACAO_SENSORIAMENTO, osFlagsNoClear, osWaitForever);
 80014d0:	e792      	b.n	80013f8 <startCalculoComprimentoOndaBragg+0xc>
 80014d2:	bf00      	nop
 80014d4:	20010f28 	.word	0x20010f28
 80014d8:	20010f80 	.word	0x20010f80
 80014dc:	20010e2c 	.word	0x20010e2c

080014e0 <startCaracterizacaoDoEspectro>:
/* Struct arrayVarredura após receber o espectro da FBG */
/* sensora                                              */
/* ******************************************************/
/* USER CODE END Header_startCaracterizacaoDoEspectro */
void startCaracterizacaoDoEspectro(void *argument)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	f2ad 7d5c 	subw	sp, sp, #1884	; 0x75c
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN startCaracterizacaoDoEspectro */
  /*Declara Struct de dado que irá receber via fila de mensagens os dados da rotina de interrupção de varredura*/
  DADOS_VARREDURA_OBJ_t arrayVarredura;
  /*Declara e inicializa o array a seguir com as amostras da FBG sintonizável*/
  float fFbgSintonizavel[TAM_X] = {  1, 1, 2, 2, 3, 4, 5, 6, 8, 10, 13, 16, 19, 23, 27,
 80014ec:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80014f0:	4a9b      	ldr	r2, [pc, #620]	; (8001760 <startCaracterizacaoDoEspectro+0x280>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	4611      	mov	r1, r2
 80014f6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80014fa:	461a      	mov	r2, r3
 80014fc:	f008 fd48 	bl	8009f90 <memcpy>
  /*Variável que recebe situação da fila de mensagens para verificar se a fila está disponível*/
  osStatus_t status;
  /* Infinite loop */
  for(;;)
  { /*Aguarda a tarefa ser acordada por event flag, que no caso será disparado por interrupção de GPIO do pino PC12*/
	osEventFlagsWait(sinalEventFlag, OPERACAO_CARACTERIZACAO, osFlagsNoClear, osWaitForever);
 8001500:	4b98      	ldr	r3, [pc, #608]	; (8001764 <startCaracterizacaoDoEspectro+0x284>)
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	2202      	movs	r2, #2
 800150a:	2102      	movs	r1, #2
 800150c:	f005 fb48 	bl	8006ba0 <osEventFlagsWait>
	/*Carrega status da fila de mensagens e verifica a disponibilidade de elementos na fila*/
	status = osMessageQueueGet(filaVarreduraHandle, &arrayVarredura, NULL, 0U);
 8001510:	4b95      	ldr	r3, [pc, #596]	; (8001768 <startCaracterizacaoDoEspectro+0x288>)
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8001518:	2300      	movs	r3, #0
 800151a:	2200      	movs	r2, #0
 800151c:	f005 fcb0 	bl	8006e80 <osMessageQueueGet>
 8001520:	f8c7 0744 	str.w	r0, [r7, #1860]	; 0x744
	if (osOK == status)
 8001524:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8001528:	2b00      	cmp	r3, #0
 800152a:	f040 8110 	bne.w	800174e <startCaracterizacaoDoEspectro+0x26e>
	{ /*Inicializa uiDataMax com menor valor possível do comprimento de onda relativo*/
	  uint16_t uiDataMax = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	f8a7 3756 	strh.w	r3, [r7, #1878]	; 0x756
	  /* uiImax é uma variável para capturar comprimento de onda máximo*/
	  uint16_t uiImax = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	f8a7 3754 	strh.w	r3, [r7, #1876]	; 0x754
	  /*Carrega espectro de convolução da reflexão das FBG's em fConvolucaoEspectros, mas antes efetua sua mudança de escala, para a mesma escala de fFbgSintonizavel*/
	  for (uint8_t uiI = 0; TAM_Y > uiI; uiI++)
 800153a:	2300      	movs	r3, #0
 800153c:	f887 3753 	strb.w	r3, [r7, #1875]	; 0x753
 8001540:	e044      	b.n	80015cc <startCaracterizacaoDoEspectro+0xec>
	  {
	    uint16_t uiData = arrayVarredura.uiArrayAmostras[uiI];
 8001542:	f897 3753 	ldrb.w	r3, [r7, #1875]	; 0x753
 8001546:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	88db      	ldrh	r3, [r3, #6]
 8001550:	f8a7 373e 	strh.w	r3, [r7, #1854]	; 0x73e
		fConvolucaoEspectros[uiI] = (float) (uiData - 682.0) * (297462.0 / 3412.0);
 8001554:	f8b7 373e 	ldrh.w	r3, [r7, #1854]	; 0x73e
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f80b 	bl	8000574 <__aeabi_i2d>
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	4b82      	ldr	r3, [pc, #520]	; (800176c <startCaracterizacaoDoEspectro+0x28c>)
 8001564:	f7fe feb8 	bl	80002d8 <__aeabi_dsub>
 8001568:	4603      	mov	r3, r0
 800156a:	460c      	mov	r4, r1
 800156c:	4618      	mov	r0, r3
 800156e:	4621      	mov	r1, r4
 8001570:	f7ff fa7c 	bl	8000a6c <__aeabi_d2f>
 8001574:	4603      	mov	r3, r0
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f80e 	bl	8000598 <__aeabi_f2d>
 800157c:	a376      	add	r3, pc, #472	; (adr r3, 8001758 <startCaracterizacaoDoEspectro+0x278>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7ff f861 	bl	8000648 <__aeabi_dmul>
 8001586:	4603      	mov	r3, r0
 8001588:	460c      	mov	r4, r1
 800158a:	461a      	mov	r2, r3
 800158c:	4623      	mov	r3, r4
 800158e:	f897 4753 	ldrb.w	r4, [r7, #1875]	; 0x753
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fa69 	bl	8000a6c <__aeabi_d2f>
 800159a:	4601      	mov	r1, r0
 800159c:	f107 020c 	add.w	r2, r7, #12
 80015a0:	00a3      	lsls	r3, r4, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	6019      	str	r1, [r3, #0]
		if(uiDataMax < uiData)  /*Busca por valor de comprimento de onda relativo, associado a valor de máxima potência de convolução do espectro refletido*/
 80015a6:	f8b7 2756 	ldrh.w	r2, [r7, #1878]	; 0x756
 80015aa:	f8b7 373e 	ldrh.w	r3, [r7, #1854]	; 0x73e
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d207      	bcs.n	80015c2 <startCaracterizacaoDoEspectro+0xe2>
		{
		  uiDataMax = uiData;
 80015b2:	f8b7 373e 	ldrh.w	r3, [r7, #1854]	; 0x73e
 80015b6:	f8a7 3756 	strh.w	r3, [r7, #1878]	; 0x756
		  uiImax = uiI;
 80015ba:	f897 3753 	ldrb.w	r3, [r7, #1875]	; 0x753
 80015be:	f8a7 3754 	strh.w	r3, [r7, #1876]	; 0x754
	  for (uint8_t uiI = 0; TAM_Y > uiI; uiI++)
 80015c2:	f897 3753 	ldrb.w	r3, [r7, #1875]	; 0x753
 80015c6:	3301      	adds	r3, #1
 80015c8:	f887 3753 	strb.w	r3, [r7, #1875]	; 0x753
 80015cc:	f897 3753 	ldrb.w	r3, [r7, #1875]	; 0x753
 80015d0:	2b80      	cmp	r3, #128	; 0x80
 80015d2:	d9b6      	bls.n	8001542 <startCaracterizacaoDoEspectro+0x62>
		}
	  }
	  if ('c' == arrayVarredura.cSentidoVarredura) /*Atualiza índice de primeira amostra para as varreduras crescente e descrescente para ser ajustado em relação a largura de banda do espectro da FBG sensora*/
 80015d4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b63      	cmp	r3, #99	; 0x63
 80015dc:	d10f      	bne.n	80015fe <startCaracterizacaoDoEspectro+0x11e>
	  {
	    uint16_t uiImaxLocalVerdadeiro = uiImax + arrayVarredura.uiIndicePrimeiraAmostra;
 80015de:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80015e2:	885a      	ldrh	r2, [r3, #2]
 80015e4:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	; 0x754
 80015e8:	4413      	add	r3, r2
 80015ea:	f8a7 3740 	strh.w	r3, [r7, #1856]	; 0x740
		arrayVarredura.uiIndicePrimeiraAmostra = uiImaxLocalVerdadeiro - (TAM_X -1 ) / 2;
 80015ee:	f8b7 3740 	ldrh.w	r3, [r7, #1856]	; 0x740
 80015f2:	3b20      	subs	r3, #32
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80015fa:	805a      	strh	r2, [r3, #2]
 80015fc:	e00e      	b.n	800161c <startCaracterizacaoDoEspectro+0x13c>
	  }
	  else
	  {
	    uint16_t uiImaxLocalVerdadeiro = arrayVarredura.uiIndicePrimeiraAmostra - uiImax;
 80015fe:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001602:	885a      	ldrh	r2, [r3, #2]
 8001604:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	; 0x754
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f8a7 3742 	strh.w	r3, [r7, #1858]	; 0x742
		arrayVarredura.uiIndicePrimeiraAmostra = uiImaxLocalVerdadeiro + (TAM_X -1 ) / 2;
 800160e:	f8b7 3742 	ldrh.w	r3, [r7, #1858]	; 0x742
 8001612:	3320      	adds	r3, #32
 8001614:	b29a      	uxth	r2, r3
 8001616:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800161a:	805a      	strh	r2, [r3, #2]
	  }
	  /*No código a seguir entre as linhas 737 e 750 está a implementação do algoritmo de Deconvolução*/
	  uint8_t uiK = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	f887 3752 	strb.w	r3, [r7, #1874]	; 0x752
	  fFbgSensora[0] = fConvolucaoEspectros[0] / fFbgSintonizavel[0];
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	edd3 6a00 	vldr	s13, [r3]
 800162a:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800162e:	ed93 7a00 	vldr	s14, [r3]
 8001632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001636:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800163a:	edc3 7a00 	vstr	s15, [r3]
	  while (TAM_Y - TAM_X + 1 > uiK)
 800163e:	e054      	b.n	80016ea <startCaracterizacaoDoEspectro+0x20a>
	  {
	    uiK++;
 8001640:	f897 3752 	ldrb.w	r3, [r7, #1874]	; 0x752
 8001644:	3301      	adds	r3, #1
 8001646:	f887 3752 	strb.w	r3, [r7, #1874]	; 0x752
		uint8_t uiJ = 1;
 800164a:	2301      	movs	r3, #1
 800164c:	f887 3751 	strb.w	r3, [r7, #1873]	; 0x751
		float fRetropropagacao = 0;
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	f207 724c 	addw	r2, r7, #1868	; 0x74c
 8001658:	6013      	str	r3, [r2, #0]
		while (uiK + 1 > uiJ)
 800165a:	e023      	b.n	80016a4 <startCaracterizacaoDoEspectro+0x1c4>
		{
		  fRetropropagacao = fRetropropagacao + fFbgSensora[uiK - uiJ] * fFbgSintonizavel[uiJ];
 800165c:	f897 2752 	ldrb.w	r2, [r7, #1874]	; 0x752
 8001660:	f897 3751 	ldrb.w	r3, [r7, #1873]	; 0x751
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	ed93 7a00 	vldr	s14, [r3]
 8001672:	f897 3751 	ldrb.w	r3, [r7, #1873]	; 0x751
 8001676:	f507 7245 	add.w	r2, r7, #788	; 0x314
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001686:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 800168a:	ed93 7a00 	vldr	s14, [r3]
 800168e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001692:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8001696:	edc3 7a00 	vstr	s15, [r3]
		  uiJ++;
 800169a:	f897 3751 	ldrb.w	r3, [r7, #1873]	; 0x751
 800169e:	3301      	adds	r3, #1
 80016a0:	f887 3751 	strb.w	r3, [r7, #1873]	; 0x751
		while (uiK + 1 > uiJ)
 80016a4:	f897 3752 	ldrb.w	r3, [r7, #1874]	; 0x752
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	f897 3751 	ldrb.w	r3, [r7, #1873]	; 0x751
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dcd4      	bgt.n	800165c <startCaracterizacaoDoEspectro+0x17c>
		}
		fFbgSensora[uiK] = (fConvolucaoEspectros[uiK] - fRetropropagacao) / fFbgSintonizavel[0];
 80016b2:	f897 3752 	ldrb.w	r3, [r7, #1874]	; 0x752
 80016b6:	f107 020c 	add.w	r2, r7, #12
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	ed93 7a00 	vldr	s14, [r3]
 80016c2:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016ce:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80016d2:	ed93 7a00 	vldr	s14, [r3]
 80016d6:	f897 3752 	ldrb.w	r3, [r7, #1874]	; 0x752
 80016da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016de:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	edc3 7a00 	vstr	s15, [r3]
	  while (TAM_Y - TAM_X + 1 > uiK)
 80016ea:	f897 3752 	ldrb.w	r3, [r7, #1874]	; 0x752
 80016ee:	2b40      	cmp	r3, #64	; 0x40
 80016f0:	d9a6      	bls.n	8001640 <startCaracterizacaoDoEspectro+0x160>
	   }
	   for (uint16_t uiI = 0; TAM_Y > uiI; uiI++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8a7 374a 	strh.w	r3, [r7, #1866]	; 0x74a
 80016f8:	e019      	b.n	800172e <startCaracterizacaoDoEspectro+0x24e>
	   { /*Realiza o casting dos valores float obtidos da fFbgSensora por meio da convolução para o tipo uint16_t*/
	     arrayVarredura.uiArrayAmostras[uiI]	= (uint16_t) fFbgSensora[uiI];
 80016fa:	f8b7 374a 	ldrh.w	r3, [r7, #1866]	; 0x74a
 80016fe:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	f8b7 374a 	ldrh.w	r3, [r7, #1866]	; 0x74a
 800170e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001712:	ee17 2a90 	vmov	r2, s15
 8001716:	b291      	uxth	r1, r2
 8001718:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	460a      	mov	r2, r1
 8001722:	80da      	strh	r2, [r3, #6]
	   for (uint16_t uiI = 0; TAM_Y > uiI; uiI++)
 8001724:	f8b7 374a 	ldrh.w	r3, [r7, #1866]	; 0x74a
 8001728:	3301      	adds	r3, #1
 800172a:	f8a7 374a 	strh.w	r3, [r7, #1866]	; 0x74a
 800172e:	f8b7 374a 	ldrh.w	r3, [r7, #1866]	; 0x74a
 8001732:	2b80      	cmp	r3, #128	; 0x80
 8001734:	d9e1      	bls.n	80016fa <startCaracterizacaoDoEspectro+0x21a>
	   }
	   arrayVarredura.uiNumAmostrasColetadas = TAM_Y;
 8001736:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800173a:	2281      	movs	r2, #129	; 0x81
 800173c:	809a      	strh	r2, [r3, #4]
	   /*Carrega o valor caracterizado na fila de mensagens filaCaracterizacaoHandle depois de colocar em arrayVarredura*/
	   osMessageQueuePut(filaCaracterizacaoHandle, &arrayVarredura, 0U, 0U);
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <startCaracterizacaoDoEspectro+0x290>)
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8001746:	2300      	movs	r3, #0
 8001748:	2200      	movs	r2, #0
 800174a:	f005 fb25 	bl	8006d98 <osMessageQueuePut>
	}
    osDelay(1);
 800174e:	2001      	movs	r0, #1
 8001750:	f005 f8d6 	bl	8006900 <osDelay>
	osEventFlagsWait(sinalEventFlag, OPERACAO_CARACTERIZACAO, osFlagsNoClear, osWaitForever);
 8001754:	e6d4      	b.n	8001500 <startCaracterizacaoDoEspectro+0x20>
 8001756:	bf00      	nop
 8001758:	8f27ea64 	.word	0x8f27ea64
 800175c:	4055cb97 	.word	0x4055cb97
 8001760:	0800a854 	.word	0x0800a854
 8001764:	20010f28 	.word	0x20010f28
 8001768:	20010f80 	.word	0x20010f80
 800176c:	40855000 	.word	0x40855000
 8001770:	20010f30 	.word	0x20010f30

08001774 <startTransmissaoDeDadosPC>:
/* Parâmetros de saída: Envia dados pela UART para      */
/* outro dispositivo.                                   */
/* ******************************************************/
/* USER CODE END Header_startTransmissaoDeDadosPC */
void startTransmissaoDeDadosPC(void *argument)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
 800177a:	af02      	add	r7, sp, #8
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	6018      	str	r0, [r3, #0]
  char cMsg[TAM_MSG], cOperacao, cFimPacote;
  osStatus_t status;
  /* Infinite loop */
  for(;;)
  { /*Captura qual tarefa está acordada e seleciona qual rotina de transmissão irá utilizar para enviar os dados*/
    uint8_t uiFlags = osEventFlagsGet(sinalEventFlag);
 8001780:	4b6f      	ldr	r3, [pc, #444]	; (8001940 <startTransmissaoDeDadosPC+0x1cc>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f005 f9d7 	bl	8006b38 <osEventFlagsGet>
 800178a:	4603      	mov	r3, r0
 800178c:	f887 3356 	strb.w	r3, [r7, #854]	; 0x356
	if (OPERACAO_SENSORIAMENTO == uiFlags)
 8001790:	f897 3356 	ldrb.w	r3, [r7, #854]	; 0x356
 8001794:	2b01      	cmp	r3, #1
 8001796:	d143      	bne.n	8001820 <startTransmissaoDeDadosPC+0xac>
	{ /*Transmissão dos dados da tarefa de Cálculo do comprimento de onda de Bragg*/
	  status = osMessageQueueGet(filaValorInterrogadoHandle, &resultadoInterrogacao, NULL, 0U);
 8001798:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <startTransmissaoDeDadosPC+0x1d0>)
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	f107 011c 	add.w	r1, r7, #28
 80017a0:	2300      	movs	r3, #0
 80017a2:	2200      	movs	r2, #0
 80017a4:	f005 fb6c 	bl	8006e80 <osMessageQueueGet>
 80017a8:	f8c7 0350 	str.w	r0, [r7, #848]	; 0x350
	  if (osOK == status)
 80017ac:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f040 80c0 	bne.w	8001936 <startTransmissaoDeDadosPC+0x1c2>
	  {
	    cOperacao = 'S';
 80017b6:	2353      	movs	r3, #83	; 0x53
 80017b8:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
	    cFimPacote = '@';
 80017bc:	2340      	movs	r3, #64	; 0x40
 80017be:	f887 334e 	strb.w	r3, [r7, #846]	; 0x34e
	    sprintf(cMsg, "%c-%hu\n", cOperacao, resultadoInterrogacao.uiValorInterrogado);
 80017c2:	f897 234f 	ldrb.w	r2, [r7, #847]	; 0x34f
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	885b      	ldrh	r3, [r3, #2]
 80017cc:	f107 0008 	add.w	r0, r7, #8
 80017d0:	495d      	ldr	r1, [pc, #372]	; (8001948 <startTransmissaoDeDadosPC+0x1d4>)
 80017d2:	f008 fbf1 	bl	8009fb8 <siprintf>
	    HAL_UART_Transmit(&hlpuart1, (uint8_t *)cMsg, strlen(cMsg), HAL_MAX_DELAY);
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fd20 	bl	8000220 <strlen>
 80017e0:	4603      	mov	r3, r0
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	f107 0108 	add.w	r1, r7, #8
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	4857      	ldr	r0, [pc, #348]	; (800194c <startTransmissaoDeDadosPC+0x1d8>)
 80017ee:	f004 f97f 	bl	8005af0 <HAL_UART_Transmit>
	  	sprintf(cMsg, "%c-%hu\n", cFimPacote, 0x0000);
 80017f2:	f897 234e 	ldrb.w	r2, [r7, #846]	; 0x34e
 80017f6:	f107 0008 	add.w	r0, r7, #8
 80017fa:	2300      	movs	r3, #0
 80017fc:	4952      	ldr	r1, [pc, #328]	; (8001948 <startTransmissaoDeDadosPC+0x1d4>)
 80017fe:	f008 fbdb 	bl	8009fb8 <siprintf>
	  	HAL_UART_Transmit(&hlpuart1, (uint8_t *)cMsg, strlen(cMsg), HAL_MAX_DELAY);
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fd0a 	bl	8000220 <strlen>
 800180c:	4603      	mov	r3, r0
 800180e:	b29a      	uxth	r2, r3
 8001810:	f107 0108 	add.w	r1, r7, #8
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
 8001818:	484c      	ldr	r0, [pc, #304]	; (800194c <startTransmissaoDeDadosPC+0x1d8>)
 800181a:	f004 f969 	bl	8005af0 <HAL_UART_Transmit>
 800181e:	e08a      	b.n	8001936 <startTransmissaoDeDadosPC+0x1c2>
	  }
	}
	else if (OPERACAO_CARACTERIZACAO == uiFlags)
 8001820:	f897 3356 	ldrb.w	r3, [r7, #854]	; 0x356
 8001824:	2b02      	cmp	r3, #2
 8001826:	f040 8086 	bne.w	8001936 <startTransmissaoDeDadosPC+0x1c2>
	{ /*Transmissão dos dados da tarefa de caracterização da FBG sensora*/
	  status = osMessageQueueGet(filaCaracterizacaoHandle, &arrayCaracterizacao, NULL, 0U);
 800182a:	4b49      	ldr	r3, [pc, #292]	; (8001950 <startTransmissaoDeDadosPC+0x1dc>)
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	f107 0120 	add.w	r1, r7, #32
 8001832:	2300      	movs	r3, #0
 8001834:	2200      	movs	r2, #0
 8001836:	f005 fb23 	bl	8006e80 <osMessageQueueGet>
 800183a:	f8c7 0350 	str.w	r0, [r7, #848]	; 0x350
	  if (osOK == status)
 800183e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001842:	2b00      	cmp	r3, #0
 8001844:	d177      	bne.n	8001936 <startTransmissaoDeDadosPC+0x1c2>
	  {
	    cOperacao = 'C';
 8001846:	2343      	movs	r3, #67	; 0x43
 8001848:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
	    cFimPacote = '@';
 800184c:	2340      	movs	r3, #64	; 0x40
 800184e:	f887 334e 	strb.w	r3, [r7, #846]	; 0x34e
	    for(uint8_t uiI = 0; arrayCaracterizacao.uiNumAmostrasColetadas > uiI; uiI++)
 8001852:	2300      	movs	r3, #0
 8001854:	f887 3357 	strb.w	r3, [r7, #855]	; 0x357
 8001858:	e04d      	b.n	80018f6 <startTransmissaoDeDadosPC+0x182>
	    {
	      uint16_t uiData = arrayCaracterizacao.uiArrayAmostras[uiI];
 800185a:	f897 3357 	ldrb.w	r3, [r7, #855]	; 0x357
 800185e:	f107 0220 	add.w	r2, r7, #32
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	88db      	ldrh	r3, [r3, #6]
 8001868:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
	      if ('c' == arrayCaracterizacao.cSentidoVarredura)
 800186c:	f107 0320 	add.w	r3, r7, #32
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b63      	cmp	r3, #99	; 0x63
 8001874:	d116      	bne.n	80018a4 <startTransmissaoDeDadosPC+0x130>
	      {
	        uint16_t uiIndiceLocalVerdadeiro = uiI + arrayCaracterizacao.uiIndicePrimeiraAmostra;
 8001876:	f897 3357 	ldrb.w	r3, [r7, #855]	; 0x357
 800187a:	b29a      	uxth	r2, r3
 800187c:	f107 0320 	add.w	r3, r7, #32
 8001880:	885b      	ldrh	r3, [r3, #2]
 8001882:	4413      	add	r3, r2
 8001884:	f8a7 3348 	strh.w	r3, [r7, #840]	; 0x348
	    	sprintf(cMsg, "%c-%hu-%hu\n", cOperacao, uiData, uiIndiceLocalVerdadeiro);
 8001888:	f897 234f 	ldrb.w	r2, [r7, #847]	; 0x34f
 800188c:	f8b7 134c 	ldrh.w	r1, [r7, #844]	; 0x34c
 8001890:	f8b7 3348 	ldrh.w	r3, [r7, #840]	; 0x348
 8001894:	f107 0008 	add.w	r0, r7, #8
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	460b      	mov	r3, r1
 800189c:	492d      	ldr	r1, [pc, #180]	; (8001954 <startTransmissaoDeDadosPC+0x1e0>)
 800189e:	f008 fb8b 	bl	8009fb8 <siprintf>
 80018a2:	e015      	b.n	80018d0 <startTransmissaoDeDadosPC+0x15c>
	      }
	      else
	      {
	    	uint16_t uiIndiceLocalVerdadeiro = arrayCaracterizacao.uiIndicePrimeiraAmostra - uiI;
 80018a4:	f107 0320 	add.w	r3, r7, #32
 80018a8:	885a      	ldrh	r2, [r3, #2]
 80018aa:	f897 3357 	ldrb.w	r3, [r7, #855]	; 0x357
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
	    	sprintf(cMsg, "%c-%hu-%hu\n", cOperacao, uiData, uiIndiceLocalVerdadeiro);
 80018b6:	f897 234f 	ldrb.w	r2, [r7, #847]	; 0x34f
 80018ba:	f8b7 134c 	ldrh.w	r1, [r7, #844]	; 0x34c
 80018be:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 80018c2:	f107 0008 	add.w	r0, r7, #8
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	460b      	mov	r3, r1
 80018ca:	4922      	ldr	r1, [pc, #136]	; (8001954 <startTransmissaoDeDadosPC+0x1e0>)
 80018cc:	f008 fb74 	bl	8009fb8 <siprintf>
	      }
	      HAL_UART_Transmit(&hlpuart1, (uint8_t *)cMsg, strlen(cMsg), HAL_MAX_DELAY);
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fca3 	bl	8000220 <strlen>
 80018da:	4603      	mov	r3, r0
 80018dc:	b29a      	uxth	r2, r3
 80018de:	f107 0108 	add.w	r1, r7, #8
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	4819      	ldr	r0, [pc, #100]	; (800194c <startTransmissaoDeDadosPC+0x1d8>)
 80018e8:	f004 f902 	bl	8005af0 <HAL_UART_Transmit>
	    for(uint8_t uiI = 0; arrayCaracterizacao.uiNumAmostrasColetadas > uiI; uiI++)
 80018ec:	f897 3357 	ldrb.w	r3, [r7, #855]	; 0x357
 80018f0:	3301      	adds	r3, #1
 80018f2:	f887 3357 	strb.w	r3, [r7, #855]	; 0x357
 80018f6:	f107 0320 	add.w	r3, r7, #32
 80018fa:	889a      	ldrh	r2, [r3, #4]
 80018fc:	f897 3357 	ldrb.w	r3, [r7, #855]	; 0x357
 8001900:	b29b      	uxth	r3, r3
 8001902:	429a      	cmp	r2, r3
 8001904:	d8a9      	bhi.n	800185a <startTransmissaoDeDadosPC+0xe6>
	    }
	    sprintf(cMsg, "%c-%hu-%hu\n", cFimPacote, 0x0000, 0x0000);
 8001906:	f897 234e 	ldrb.w	r2, [r7, #846]	; 0x34e
 800190a:	f107 0008 	add.w	r0, r7, #8
 800190e:	2300      	movs	r3, #0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	490f      	ldr	r1, [pc, #60]	; (8001954 <startTransmissaoDeDadosPC+0x1e0>)
 8001916:	f008 fb4f 	bl	8009fb8 <siprintf>
	    HAL_UART_Transmit(&hlpuart1, (uint8_t *)cMsg, strlen(cMsg), HAL_MAX_DELAY);
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fc7e 	bl	8000220 <strlen>
 8001924:	4603      	mov	r3, r0
 8001926:	b29a      	uxth	r2, r3
 8001928:	f107 0108 	add.w	r1, r7, #8
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
 8001930:	4806      	ldr	r0, [pc, #24]	; (800194c <startTransmissaoDeDadosPC+0x1d8>)
 8001932:	f004 f8dd 	bl	8005af0 <HAL_UART_Transmit>
	    }
	}
	osDelay(1);
 8001936:	2001      	movs	r0, #1
 8001938:	f004 ffe2 	bl	8006900 <osDelay>
  { /*Captura qual tarefa está acordada e seleciona qual rotina de transmissão irá utilizar para enviar os dados*/
 800193c:	e720      	b.n	8001780 <startTransmissaoDeDadosPC+0xc>
 800193e:	bf00      	nop
 8001940:	20010f28 	.word	0x20010f28
 8001944:	20010e2c 	.word	0x20010e2c
 8001948:	0800a958 	.word	0x0800a958
 800194c:	20010e30 	.word	0x20010e30
 8001950:	20010f30 	.word	0x20010f30
 8001954:	0800a960 	.word	0x0800a960

08001958 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800195e:	af00      	add	r7, sp, #0
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	6018      	str	r0, [r3, #0]
/* Parâmetros de saída: fila de mensagens dada por      */
/* filaVarreduraHandle onde são carregadas as Structs   */
/* arrayVarreduraCrescente e arrayVarreduraDecrescente  */
/* ******************************************************/
/* USER CODE END Header_StartVarreduraConversaoADeDA */
  if (&htim16 == htim)
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a7e      	ldr	r2, [pc, #504]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	f040 80ec 	bne.w	8001b48 <HAL_TIM_PeriodElapsedCallback+0x1f0>
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001970:	2120      	movs	r1, #32
 8001972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001976:	f002 fbfd 	bl	8004174 <HAL_GPIO_TogglePin>
	/*Declara variável auxiliar de aquisição de potência do sinal e inicializa contadores de número de amostras não nulas*/
	uint16_t uiPotenciaSinal, uiContCresc = 0, uiContDecresc = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	f8a7 3666 	strh.w	r3, [r7, #1638]	; 0x666
 8001980:	2300      	movs	r3, #0
 8001982:	f8a7 3664 	strh.w	r3, [r7, #1636]	; 0x664
	/*Declara Structs dos dados de varredura crescente e decrescente*/
	DADOS_VARREDURA_OBJ_t arrayVarreduraCrescente, arrayVarreduraDecrescente;
	/*Inicializa o dado de indice da primeira amostra com um valor fixo acima dos existentes na varredura*/
	arrayVarreduraCrescente.uiIndicePrimeiraAmostra = FLAG_PRIMEIRA_AMOSTRA;
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	f242 3228 	movw	r2, #9000	; 0x2328
 800198e:	805a      	strh	r2, [r3, #2]
	arrayVarreduraDecrescente.uiIndicePrimeiraAmostra = FLAG_PRIMEIRA_AMOSTRA;
 8001990:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8001994:	f242 3228 	movw	r2, #9000	; 0x2328
 8001998:	805a      	strh	r2, [r3, #2]
	/*Inicializa o dado de sentido da varredura com os caracteres que indicam com qual sentido da varredura a Struct irá trabalhar*/
	arrayVarreduraCrescente.cSentidoVarredura = 'c';
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	2263      	movs	r2, #99	; 0x63
 80019a0:	701a      	strb	r2, [r3, #0]
	arrayVarreduraDecrescente.cSentidoVarredura = 'd';
 80019a2:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80019a6:	2264      	movs	r2, #100	; 0x64
 80019a8:	701a      	strb	r2, [r3, #0]
	/*Inicializa o Timer 17 */
	HAL_TIM_Base_Start(&htim17);
 80019aa:	486f      	ldr	r0, [pc, #444]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80019ac:	f003 fcd2 	bl	8005354 <HAL_TIM_Base_Start>
	/*Inicializa o módulo DAC*/
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80019b0:	2100      	movs	r1, #0
 80019b2:	486e      	ldr	r0, [pc, #440]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80019b4:	f002 f81c 	bl	80039f0 <HAL_DAC_Start>
	/*Loop da varredura e inicialização das variáveis de controle, uiI conta de 0 até 8191*/
	for (uint16_t uiI = 0, uiK = 0, uiM = 4095; 2 * (RESOLUCAO_DAC) > uiI; uiI++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8a7 3662 	strh.w	r3, [r7, #1634]	; 0x662
 80019be:	2300      	movs	r3, #0
 80019c0:	f8a7 3660 	strh.w	r3, [r7, #1632]	; 0x660
 80019c4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80019c8:	f8a7 365e 	strh.w	r3, [r7, #1630]	; 0x65e
 80019cc:	e09c      	b.n	8001b08 <HAL_TIM_PeriodElapsedCallback+0x1b0>
    { /*Variável de controle uiI do loop no if abaixo verifica se a varredura ainda é crescente, caso maior que 4095 inicia a varredura decrescente*/
	  if (RESOLUCAO_DAC > uiI)
 80019ce:	f8b7 3662 	ldrh.w	r3, [r7, #1634]	; 0x662
 80019d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d6:	d249      	bcs.n	8001a6c <HAL_TIM_PeriodElapsedCallback+0x114>
	  {/*Carrega o valor númerico da variável contadora uiK no conversor DA, observe que temos uma progressão em rampa crescente nos valores de uiK*/
	    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, uiK);
 80019d8:	f8b7 3660 	ldrh.w	r3, [r7, #1632]	; 0x660
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	4862      	ldr	r0, [pc, #392]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80019e2:	f002 f858 	bl	8003a96 <HAL_DAC_SetValue>
	    /*Atraso implementado a partir do Timer 17 sendo utilizado como contador, prescaler configurado para cada contagem durar 1us, utilizado para aguardar resposta do arduino*/
	    __HAL_TIM_SET_COUNTER(&htim17,0);
 80019e6:	4b60      	ldr	r3, [pc, #384]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
	    while (__HAL_TIM_GET_COUNTER(&htim17) < DELAY_MICROSECONDS);
 80019ee:	bf00      	nop
 80019f0:	4b5d      	ldr	r3, [pc, #372]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2b63      	cmp	r3, #99	; 0x63
 80019f8:	d9fa      	bls.n	80019f0 <HAL_TIM_PeriodElapsedCallback+0x98>
	    /*Inicializa conversor AD*/
	    HAL_ADC_Start(&hadc1);
 80019fa:	485d      	ldr	r0, [pc, #372]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80019fc:	f000 ff44 	bl	8002888 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	485a      	ldr	r0, [pc, #360]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001a06:	f001 f823 	bl	8002a50 <HAL_ADC_PollForConversion>
	  	/*Captura amostra do conversor AD*/
	  	uiPotenciaSinal = HAL_ADC_GetValue(&hadc1);
 8001a0a:	4859      	ldr	r0, [pc, #356]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001a0c:	f001 f91e 	bl	8002c4c <HAL_ADC_GetValue>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f8a7 365c 	strh.w	r3, [r7, #1628]	; 0x65c
	  	/*É verificado se o valor de potência do sinal é maior do que 682 ou seja se é não nulo, pois DAC do arduino DUE tem offset de 0,55V e se uiArrayAmostras atingiu seu valor máximo*/
	    if (LIMIAR_POTENCIA_NULA < uiPotenciaSinal && TAM_ARRAY_AMOSTRAS > uiContCresc)
 8001a16:	f8b7 365c 	ldrh.w	r3, [r7, #1628]	; 0x65c
 8001a1a:	f240 22aa 	movw	r2, #682	; 0x2aa
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d91e      	bls.n	8001a60 <HAL_TIM_PeriodElapsedCallback+0x108>
 8001a22:	f8b7 3666 	ldrh.w	r3, [r7, #1638]	; 0x666
 8001a26:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001a2a:	d219      	bcs.n	8001a60 <HAL_TIM_PeriodElapsedCallback+0x108>
	  	{ /*Verifica flag de primeira amostra, se condição verdadeira armazena índice da primeira amostra não nula*/
	  	  if (FLAG_PRIMEIRA_AMOSTRA == arrayVarreduraCrescente.uiIndicePrimeiraAmostra)
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	885b      	ldrh	r3, [r3, #2]
 8001a32:	f242 3228 	movw	r2, #9000	; 0x2328
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d104      	bne.n	8001a44 <HAL_TIM_PeriodElapsedCallback+0xec>
	  	  {
	  	    arrayVarreduraCrescente.uiIndicePrimeiraAmostra = uiK;
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	f8b7 2660 	ldrh.w	r2, [r7, #1632]	; 0x660
 8001a42:	805a      	strh	r2, [r3, #2]
	  	  }
	  	  /*Amostras de potencia não nulas são armazenadas no array do Struct */
	  	  arrayVarreduraCrescente.uiArrayAmostras[uiContCresc] = uiPotenciaSinal;
 8001a44:	f8b7 3666 	ldrh.w	r3, [r7, #1638]	; 0x666
 8001a48:	f107 020c 	add.w	r2, r7, #12
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	f8b7 265c 	ldrh.w	r2, [r7, #1628]	; 0x65c
 8001a54:	80da      	strh	r2, [r3, #6]
	  	  /*Variável contadora de amostras não nulas da varredura crescente é incrementada*/
	  	  uiContCresc++;
 8001a56:	f8b7 3666 	ldrh.w	r3, [r7, #1638]	; 0x666
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f8a7 3666 	strh.w	r3, [r7, #1638]	; 0x666
	  	}
	    uiK++;
 8001a60:	f8b7 3660 	ldrh.w	r3, [r7, #1632]	; 0x660
 8001a64:	3301      	adds	r3, #1
 8001a66:	f8a7 3660 	strh.w	r3, [r7, #1632]	; 0x660
 8001a6a:	e048      	b.n	8001afe <HAL_TIM_PeriodElapsedCallback+0x1a6>
	  }
	  else
	  { /*Varredura descrescente, código funciona de maneira análoga ao bloco anterior com a distinção que uiM é decrementado*/
	    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, uiM);
 8001a6c:	f8b7 365e 	ldrh.w	r3, [r7, #1630]	; 0x65e
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	483d      	ldr	r0, [pc, #244]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001a76:	f002 f80e 	bl	8003a96 <HAL_DAC_SetValue>

	  	__HAL_TIM_SET_COUNTER(&htim17,0);
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
	  	while (__HAL_TIM_GET_COUNTER(&htim17) < DELAY_MICROSECONDS);
 8001a82:	bf00      	nop
 8001a84:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	2b63      	cmp	r3, #99	; 0x63
 8001a8c:	d9fa      	bls.n	8001a84 <HAL_TIM_PeriodElapsedCallback+0x12c>

	    HAL_ADC_Start(&hadc1);
 8001a8e:	4838      	ldr	r0, [pc, #224]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001a90:	f000 fefa 	bl	8002888 <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	4835      	ldr	r0, [pc, #212]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001a9a:	f000 ffd9 	bl	8002a50 <HAL_ADC_PollForConversion>
	  	uiPotenciaSinal = HAL_ADC_GetValue(&hadc1);
 8001a9e:	4834      	ldr	r0, [pc, #208]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001aa0:	f001 f8d4 	bl	8002c4c <HAL_ADC_GetValue>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f8a7 365c 	strh.w	r3, [r7, #1628]	; 0x65c
	  	if (LIMIAR_POTENCIA_NULA < uiPotenciaSinal && TAM_ARRAY_AMOSTRAS > uiContDecresc)
 8001aaa:	f8b7 365c 	ldrh.w	r3, [r7, #1628]	; 0x65c
 8001aae:	f240 22aa 	movw	r2, #682	; 0x2aa
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d91e      	bls.n	8001af4 <HAL_TIM_PeriodElapsedCallback+0x19c>
 8001ab6:	f8b7 3664 	ldrh.w	r3, [r7, #1636]	; 0x664
 8001aba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001abe:	d219      	bcs.n	8001af4 <HAL_TIM_PeriodElapsedCallback+0x19c>
	  	{
	  	  if (FLAG_PRIMEIRA_AMOSTRA == arrayVarreduraDecrescente.uiIndicePrimeiraAmostra)
 8001ac0:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8001ac4:	885b      	ldrh	r3, [r3, #2]
 8001ac6:	f242 3228 	movw	r2, #9000	; 0x2328
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d104      	bne.n	8001ad8 <HAL_TIM_PeriodElapsedCallback+0x180>
	  	  {
	  		arrayVarreduraDecrescente.uiIndicePrimeiraAmostra = uiM;
 8001ace:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8001ad2:	f8b7 265e 	ldrh.w	r2, [r7, #1630]	; 0x65e
 8001ad6:	805a      	strh	r2, [r3, #2]
	  	  }
	  	  arrayVarreduraDecrescente.uiArrayAmostras[uiContDecresc] = uiPotenciaSinal;
 8001ad8:	f8b7 3664 	ldrh.w	r3, [r7, #1636]	; 0x664
 8001adc:	f507 724d 	add.w	r2, r7, #820	; 0x334
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f8b7 265c 	ldrh.w	r2, [r7, #1628]	; 0x65c
 8001ae8:	80da      	strh	r2, [r3, #6]
	  	  uiContDecresc++;
 8001aea:	f8b7 3664 	ldrh.w	r3, [r7, #1636]	; 0x664
 8001aee:	3301      	adds	r3, #1
 8001af0:	f8a7 3664 	strh.w	r3, [r7, #1636]	; 0x664
	  	}
	    uiM--;
 8001af4:	f8b7 365e 	ldrh.w	r3, [r7, #1630]	; 0x65e
 8001af8:	3b01      	subs	r3, #1
 8001afa:	f8a7 365e 	strh.w	r3, [r7, #1630]	; 0x65e
	for (uint16_t uiI = 0, uiK = 0, uiM = 4095; 2 * (RESOLUCAO_DAC) > uiI; uiI++)
 8001afe:	f8b7 3662 	ldrh.w	r3, [r7, #1634]	; 0x662
 8001b02:	3301      	adds	r3, #1
 8001b04:	f8a7 3662 	strh.w	r3, [r7, #1634]	; 0x662
 8001b08:	f8b7 3662 	ldrh.w	r3, [r7, #1634]	; 0x662
 8001b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b10:	f4ff af5d 	bcc.w	80019ce <HAL_TIM_PeriodElapsedCallback+0x76>
	  }

    } /*Structs das varreduras no sentido crescente e decrescente recebem a contagem de amostras coletas em cada varredura*/
	arrayVarreduraCrescente.uiNumAmostrasColetadas = uiContCresc;
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	f8b7 2666 	ldrh.w	r2, [r7, #1638]	; 0x666
 8001b1c:	809a      	strh	r2, [r3, #4]
	arrayVarreduraDecrescente.uiNumAmostrasColetadas = uiContDecresc;
 8001b1e:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8001b22:	f8b7 2664 	ldrh.w	r2, [r7, #1636]	; 0x664
 8001b26:	809a      	strh	r2, [r3, #4]
	/*Fila de mensagem da varredura recebe dois structs, sendo as varreduras nos sentido crescente e decrescente*/
	osMessageQueuePut(filaVarreduraHandle, &arrayVarreduraCrescente, 0U, 0U);
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	f107 010c 	add.w	r1, r7, #12
 8001b30:	2300      	movs	r3, #0
 8001b32:	2200      	movs	r2, #0
 8001b34:	f005 f930 	bl	8006d98 <osMessageQueuePut>
	osMessageQueuePut(filaVarreduraHandle, &arrayVarreduraDecrescente, 0U, 0U);
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	f507 714d 	add.w	r1, r7, #820	; 0x334
 8001b40:	2300      	movs	r3, #0
 8001b42:	2200      	movs	r2, #0
 8001b44:	f005 f928 	bl	8006d98 <osMessageQueuePut>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d101      	bne.n	8001b58 <HAL_TIM_PeriodElapsedCallback+0x200>
    HAL_IncTick();
 8001b54:	f000 fa6c 	bl	8002030 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	f507 67cd 	add.w	r7, r7, #1640	; 0x668
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20010f34 	.word	0x20010f34
 8001b68:	20010de0 	.word	0x20010de0
 8001b6c:	20010dc4 	.word	0x20010dc4
 8001b70:	20010ebc 	.word	0x20010ebc
 8001b74:	20010f80 	.word	0x20010f80
 8001b78:	40001400 	.word	0x40001400

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_MspInit+0x44>)
 8001b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_MspInit+0x44>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_MspInit+0x44>)
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bc2:	f002 fbad 	bl	8004320 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf4:	d124      	bne.n	8001c40 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_ADC_MspInit+0x74>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <HAL_ADC_MspInit+0x74>)
 8001bfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_ADC_MspInit+0x74>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_ADC_MspInit+0x74>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_ADC_MspInit+0x74>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_ADC_MspInit+0x74>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c26:	2301      	movs	r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3c:	f002 f900 	bl	8003e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000

08001c4c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <HAL_DAC_MspInit+0x74>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d124      	bne.n	8001cb8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_DAC_MspInit+0x78>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <HAL_DAC_MspInit+0x78>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_DAC_MspInit+0x78>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_DAC_MspInit+0x78>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <HAL_DAC_MspInit+0x78>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_DAC_MspInit+0x78>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c9e:	2310      	movs	r3, #16
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb4:	f002 f8c4 	bl	8003e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	50000800 	.word	0x50000800
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a17      	ldr	r2, [pc, #92]	; (8001d44 <HAL_UART_MspInit+0x7c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d128      	bne.n	8001d3c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_UART_MspInit+0x80>)
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <HAL_UART_MspInit+0x80>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_UART_MspInit+0x80>)
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_UART_MspInit+0x80>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <HAL_UART_MspInit+0x80>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_UART_MspInit+0x80>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001d1a:	230c      	movs	r3, #12
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001d2a:	230c      	movs	r3, #12
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d38:	f002 f882 	bl	8003e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001d3c:	bf00      	nop
 8001d3e:	3728      	adds	r7, #40	; 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40008000 	.word	0x40008000
 8001d48:	40021000 	.word	0x40021000

08001d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <HAL_TIM_Base_MspInit+0x68>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d114      	bne.n	8001d88 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d62:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	6613      	str	r3, [r2, #96]	; 0x60
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2105      	movs	r1, #5
 8001d7a:	2019      	movs	r0, #25
 8001d7c:	f001 fdee 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d80:	2019      	movs	r0, #25
 8001d82:	f001 fe05 	bl	8003990 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001d86:	e010      	b.n	8001daa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <HAL_TIM_Base_MspInit+0x70>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d10b      	bne.n	8001daa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_TIM_Base_MspInit+0x6c>)
 8001da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40014400 	.word	0x40014400
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40014800 	.word	0x40014800

08001dc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08c      	sub	sp, #48	; 0x30
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_InitTick+0xcc>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	4a2c      	ldr	r2, [pc, #176]	; (8001e8c <HAL_InitTick+0xcc>)
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	6593      	str	r3, [r2, #88]	; 0x58
 8001de2:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <HAL_InitTick+0xcc>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dee:	f107 020c 	add.w	r2, r7, #12
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 ff8f 	bl	8004d1c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dfe:	f002 ff61 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 8001e02:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e06:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <HAL_InitTick+0xd0>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	0c9b      	lsrs	r3, r3, #18
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <HAL_InitTick+0xd4>)
 8001e14:	4a20      	ldr	r2, [pc, #128]	; (8001e98 <HAL_InitTick+0xd8>)
 8001e16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <HAL_InitTick+0xd4>)
 8001e1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e1e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001e20:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <HAL_InitTick+0xd4>)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001e26:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_InitTick+0xd4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_InitTick+0xd4>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  status = HAL_TIM_Base_Init(&htim7);
 8001e32:	4818      	ldr	r0, [pc, #96]	; (8001e94 <HAL_InitTick+0xd4>)
 8001e34:	f003 fa36 	bl	80052a4 <HAL_TIM_Base_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d11b      	bne.n	8001e7e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001e46:	4813      	ldr	r0, [pc, #76]	; (8001e94 <HAL_InitTick+0xd4>)
 8001e48:	f003 faf4 	bl	8005434 <HAL_TIM_Base_Start_IT>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d111      	bne.n	8001e7e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001e5a:	2037      	movs	r0, #55	; 0x37
 8001e5c:	f001 fd98 	bl	8003990 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	d808      	bhi.n	8001e78 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_DAC_IRQn, TickPriority, 0U);
 8001e66:	2200      	movs	r2, #0
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	2037      	movs	r0, #55	; 0x37
 8001e6c:	f001 fd76 	bl	800395c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <HAL_InitTick+0xdc>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e002      	b.n	8001e7e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8001e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3730      	adds	r7, #48	; 0x30
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	431bde83 	.word	0x431bde83
 8001e94:	20010f84 	.word	0x20010f84
 8001e98:	40001400 	.word	0x40001400
 8001e9c:	20000004 	.word	0x20000004

08001ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <HardFault_Handler+0x4>

08001eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <MemManage_Handler+0x4>

08001eba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <BusFault_Handler+0x4>

08001ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <UsageFault_Handler+0x4>

08001ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001eda:	f003 fb23 	bl	8005524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20010f34 	.word	0x20010f34

08001ee8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001eec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ef0:	f002 f95a 	bl	80041a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ef4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ef8:	f002 f956 	bl	80041a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <TIM7_DAC_IRQHandler+0x10>)
 8001f06:	f003 fb0d 	bl	8005524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20010f84 	.word	0x20010f84

08001f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f1c:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <_sbrk+0x5c>)
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <_sbrk+0x60>)
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <_sbrk+0x64>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <_sbrk+0x64>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <_sbrk+0x68>)
 8001f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d207      	bcs.n	8001f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f44:	f007 fffa 	bl	8009f3c <__errno>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	e009      	b.n	8001f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a05      	ldr	r2, [pc, #20]	; (8001f78 <_sbrk+0x64>)
 8001f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20020000 	.word	0x20020000
 8001f74:	00000400 	.word	0x00000400
 8001f78:	20000090 	.word	0x20000090
 8001f7c:	20011018 	.word	0x20011018

08001f80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <SystemInit+0x28>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <SystemInit+0x28>)
 8001f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <SystemInit+0x28>)
 8001f96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f9a:	609a      	str	r2, [r3, #8]
#endif
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb0:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fb2:	490e      	ldr	r1, [pc, #56]	; (8001fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <LoopForever+0xe>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001fb8:	e002      	b.n	8001fc0 <LoopCopyDataInit>

08001fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fbe:	3304      	adds	r3, #4

08001fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc4:	d3f9      	bcc.n	8001fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc8:	4c0b      	ldr	r4, [pc, #44]	; (8001ff8 <LoopForever+0x16>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fcc:	e001      	b.n	8001fd2 <LoopFillZerobss>

08001fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd0:	3204      	adds	r2, #4

08001fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd4:	d3fb      	bcc.n	8001fce <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fd6:	f7ff ffd3 	bl	8001f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fda:	f007 ffb5 	bl	8009f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fde:	f7fe ff15 	bl	8000e0c <main>

08001fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fe2:	e7fe      	b.n	8001fe2 <LoopForever>
  ldr   r0, =_estack
 8001fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ff0:	0800aabc 	.word	0x0800aabc
  ldr r2, =_sbss
 8001ff4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ff8:	20011018 	.word	0x20011018

08001ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC1_2_IRQHandler>

08001ffe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002008:	2003      	movs	r0, #3
 800200a:	f001 fc9c 	bl	8003946 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff fed6 	bl	8001dc0 <HAL_InitTick>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	e001      	b.n	8002024 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002020:	f7ff fdb4 	bl	8001b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002024:	79fb      	ldrb	r3, [r7, #7]

}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_IncTick+0x1c>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_IncTick+0x20>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4413      	add	r3, r2
 800203e:	4a03      	ldr	r2, [pc, #12]	; (800204c <HAL_IncTick+0x1c>)
 8002040:	6013      	str	r3, [r2, #0]
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	20010fd0 	.word	0x20010fd0
 8002050:	20000008 	.word	0x20000008

08002054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return uwTick;
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <HAL_GetTick+0x14>)
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20010fd0 	.word	0x20010fd0

0800206c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff ffee 	bl	8002054 <HAL_GetTick>
 8002078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002084:	d004      	beq.n	8002090 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_Delay+0x40>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4413      	add	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002090:	bf00      	nop
 8002092:	f7ff ffdf 	bl	8002054 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d8f7      	bhi.n	8002092 <HAL_Delay+0x26>
  {
  }
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000008 	.word	0x20000008

080020b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	609a      	str	r2, [r3, #8]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	609a      	str	r2, [r3, #8]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3360      	adds	r3, #96	; 0x60
 800212a:	461a      	mov	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <LL_ADC_SetOffset+0x44>)
 800213a:	4013      	ands	r3, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	4313      	orrs	r3, r2
 8002148:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002150:	bf00      	nop
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	03fff000 	.word	0x03fff000

08002160 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3360      	adds	r3, #96	; 0x60
 800216e:	461a      	mov	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3360      	adds	r3, #96	; 0x60
 800219c:	461a      	mov	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b087      	sub	sp, #28
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3360      	adds	r3, #96	; 0x60
 80021d2:	461a      	mov	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80021ec:	bf00      	nop
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3360      	adds	r3, #96	; 0x60
 8002208:	461a      	mov	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	431a      	orrs	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	615a      	str	r2, [r3, #20]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800227a:	b480      	push	{r7}
 800227c:	b087      	sub	sp, #28
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3330      	adds	r3, #48	; 0x30
 800228a:	461a      	mov	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	4413      	add	r3, r2
 8002298:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	211f      	movs	r1, #31
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	401a      	ands	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0e9b      	lsrs	r3, r3, #26
 80022b2:	f003 011f 	and.w	r1, r3, #31
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	431a      	orrs	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022c6:	bf00      	nop
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b087      	sub	sp, #28
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3314      	adds	r3, #20
 80022e2:	461a      	mov	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	0e5b      	lsrs	r3, r3, #25
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	4413      	add	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	0d1b      	lsrs	r3, r3, #20
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2107      	movs	r1, #7
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	401a      	ands	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	0d1b      	lsrs	r3, r3, #20
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	431a      	orrs	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800231c:	bf00      	nop
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002340:	43db      	mvns	r3, r3
 8002342:	401a      	ands	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f003 0318 	and.w	r3, r3, #24
 800234a:	4908      	ldr	r1, [pc, #32]	; (800236c <LL_ADC_SetChannelSingleDiff+0x44>)
 800234c:	40d9      	lsrs	r1, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	400b      	ands	r3, r1
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	431a      	orrs	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	0007ffff 	.word	0x0007ffff

08002370 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 031f 	and.w	r3, r3, #31
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80023b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6093      	str	r3, [r2, #8]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023e0:	d101      	bne.n	80023e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002404:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002408:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002430:	d101      	bne.n	8002436 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002454:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <LL_ADC_IsEnabled+0x18>
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <LL_ADC_IsEnabled+0x1a>
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024a6:	f043 0204 	orr.w	r2, r3, #4
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d101      	bne.n	80024d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d101      	bne.n	80024f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002514:	2300      	movs	r3, #0
 8002516:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e1ad      	b.n	800287e <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff fb4f 	bl	8001bd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff3f 	bl	80023cc <LL_ADC_IsDeepPowerDownEnabled>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff25 	bl	80023a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff5a 	bl	800241c <LL_ADC_IsInternalRegulatorEnabled>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d113      	bne.n	8002596 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ff3e 	bl	80023f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002578:	4b9e      	ldr	r3, [pc, #632]	; (80027f4 <HAL_ADC_Init+0x2ec>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	4a9e      	ldr	r2, [pc, #632]	; (80027f8 <HAL_ADC_Init+0x2f0>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002588:	e002      	b.n	8002590 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	3b01      	subs	r3, #1
 800258e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f9      	bne.n	800258a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff ff3e 	bl	800241c <LL_ADC_IsInternalRegulatorEnabled>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10d      	bne.n	80025c2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	f043 0210 	orr.w	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff77 	bl	80024ba <LL_ADC_REG_IsConversionOngoing>
 80025cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 8148 	bne.w	800286c <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 8144 	bne.w	800286c <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025ec:	f043 0202 	orr.w	r2, r3, #2
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff37 	bl	800246c <LL_ADC_IsEnabled>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d141      	bne.n	8002688 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800260c:	d004      	beq.n	8002618 <HAL_ADC_Init+0x110>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a7a      	ldr	r2, [pc, #488]	; (80027fc <HAL_ADC_Init+0x2f4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d10f      	bne.n	8002638 <HAL_ADC_Init+0x130>
 8002618:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800261c:	f7ff ff26 	bl	800246c <LL_ADC_IsEnabled>
 8002620:	4604      	mov	r4, r0
 8002622:	4876      	ldr	r0, [pc, #472]	; (80027fc <HAL_ADC_Init+0x2f4>)
 8002624:	f7ff ff22 	bl	800246c <LL_ADC_IsEnabled>
 8002628:	4603      	mov	r3, r0
 800262a:	4323      	orrs	r3, r4
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	e012      	b.n	800265e <HAL_ADC_Init+0x156>
 8002638:	4871      	ldr	r0, [pc, #452]	; (8002800 <HAL_ADC_Init+0x2f8>)
 800263a:	f7ff ff17 	bl	800246c <LL_ADC_IsEnabled>
 800263e:	4604      	mov	r4, r0
 8002640:	4870      	ldr	r0, [pc, #448]	; (8002804 <HAL_ADC_Init+0x2fc>)
 8002642:	f7ff ff13 	bl	800246c <LL_ADC_IsEnabled>
 8002646:	4603      	mov	r3, r0
 8002648:	431c      	orrs	r4, r3
 800264a:	486f      	ldr	r0, [pc, #444]	; (8002808 <HAL_ADC_Init+0x300>)
 800264c:	f7ff ff0e 	bl	800246c <LL_ADC_IsEnabled>
 8002650:	4603      	mov	r3, r0
 8002652:	4323      	orrs	r3, r4
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d012      	beq.n	8002688 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800266a:	d004      	beq.n	8002676 <HAL_ADC_Init+0x16e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a62      	ldr	r2, [pc, #392]	; (80027fc <HAL_ADC_Init+0x2f4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d101      	bne.n	800267a <HAL_ADC_Init+0x172>
 8002676:	4a65      	ldr	r2, [pc, #404]	; (800280c <HAL_ADC_Init+0x304>)
 8002678:	e000      	b.n	800267c <HAL_ADC_Init+0x174>
 800267a:	4a65      	ldr	r2, [pc, #404]	; (8002810 <HAL_ADC_Init+0x308>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4619      	mov	r1, r3
 8002682:	4610      	mov	r0, r2
 8002684:	f7ff fd14 	bl	80020b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7f5b      	ldrb	r3, [r3, #29]
 800268c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002692:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002698:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800269e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026a6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d106      	bne.n	80026c4 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	3b01      	subs	r3, #1
 80026bc:	045b      	lsls	r3, r3, #17
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <HAL_ADC_Init+0x30c>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	69b9      	ldr	r1, [r7, #24]
 80026f0:	430b      	orrs	r3, r1
 80026f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fed3 	bl	80024ba <LL_ADC_REG_IsConversionOngoing>
 8002714:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fee0 	bl	80024e0 <LL_ADC_INJ_IsConversionOngoing>
 8002720:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d17f      	bne.n	8002828 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d17c      	bne.n	8002828 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002732:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800273a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800274a:	f023 0302 	bic.w	r3, r3, #2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	69b9      	ldr	r1, [r7, #24]
 8002754:	430b      	orrs	r3, r1
 8002756:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d017      	beq.n	8002790 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800276e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002778:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800277c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6911      	ldr	r1, [r2, #16]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	430b      	orrs	r3, r1
 800278a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800278e:	e013      	b.n	80027b8 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800279e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027b4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d12a      	bne.n	8002818 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027cc:	f023 0304 	bic.w	r3, r3, #4
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027d8:	4311      	orrs	r1, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027de:	4311      	orrs	r1, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027e4:	430a      	orrs	r2, r1
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	611a      	str	r2, [r3, #16]
 80027f2:	e019      	b.n	8002828 <HAL_ADC_Init+0x320>
 80027f4:	20000000 	.word	0x20000000
 80027f8:	053e2d63 	.word	0x053e2d63
 80027fc:	50000100 	.word	0x50000100
 8002800:	50000400 	.word	0x50000400
 8002804:	50000500 	.word	0x50000500
 8002808:	50000600 	.word	0x50000600
 800280c:	50000300 	.word	0x50000300
 8002810:	50000700 	.word	0x50000700
 8002814:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d10c      	bne.n	800284a <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f023 010f 	bic.w	r1, r3, #15
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	1e5a      	subs	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
 8002848:	e007      	b.n	800285a <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 020f 	bic.w	r2, r2, #15
 8002858:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	f023 0303 	bic.w	r3, r3, #3
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	65da      	str	r2, [r3, #92]	; 0x5c
 800286a:	e007      	b.n	800287c <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002870:	f043 0210 	orr.w	r2, r3, #16
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800287c:	7ffb      	ldrb	r3, [r7, #31]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3724      	adds	r7, #36	; 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}
 8002886:	bf00      	nop

08002888 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002898:	d004      	beq.n	80028a4 <HAL_ADC_Start+0x1c>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a67      	ldr	r2, [pc, #412]	; (8002a3c <HAL_ADC_Start+0x1b4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_Start+0x20>
 80028a4:	4b66      	ldr	r3, [pc, #408]	; (8002a40 <HAL_ADC_Start+0x1b8>)
 80028a6:	e000      	b.n	80028aa <HAL_ADC_Start+0x22>
 80028a8:	4b66      	ldr	r3, [pc, #408]	; (8002a44 <HAL_ADC_Start+0x1bc>)
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fd60 	bl	8002370 <LL_ADC_GetMultimode>
 80028b0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fdff 	bl	80024ba <LL_ADC_REG_IsConversionOngoing>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 80b4 	bne.w	8002a2c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_Start+0x4a>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e0af      	b.n	8002a32 <HAL_ADC_Start+0x1aa>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fe02 	bl	80034e4 <ADC_Enable>
 80028e0:	4603      	mov	r3, r0
 80028e2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 809b 	bne.w	8002a22 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028f4:	f023 0301 	bic.w	r3, r3, #1
 80028f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a4d      	ldr	r2, [pc, #308]	; (8002a3c <HAL_ADC_Start+0x1b4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d009      	beq.n	800291e <HAL_ADC_Start+0x96>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a4e      	ldr	r2, [pc, #312]	; (8002a48 <HAL_ADC_Start+0x1c0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d002      	beq.n	800291a <HAL_ADC_Start+0x92>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	e003      	b.n	8002922 <HAL_ADC_Start+0x9a>
 800291a:	4b4c      	ldr	r3, [pc, #304]	; (8002a4c <HAL_ADC_Start+0x1c4>)
 800291c:	e001      	b.n	8002922 <HAL_ADC_Start+0x9a>
 800291e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	4293      	cmp	r3, r2
 8002928:	d002      	beq.n	8002930 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002948:	d106      	bne.n	8002958 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800294e:	f023 0206 	bic.w	r2, r3, #6
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	661a      	str	r2, [r3, #96]	; 0x60
 8002956:	e002      	b.n	800295e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	221c      	movs	r2, #28
 8002964:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a32      	ldr	r2, [pc, #200]	; (8002a3c <HAL_ADC_Start+0x1b4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_ADC_Start+0x104>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a32      	ldr	r2, [pc, #200]	; (8002a48 <HAL_ADC_Start+0x1c0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d002      	beq.n	8002988 <HAL_ADC_Start+0x100>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	e003      	b.n	8002990 <HAL_ADC_Start+0x108>
 8002988:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <HAL_ADC_Start+0x1c4>)
 800298a:	e001      	b.n	8002990 <HAL_ADC_Start+0x108>
 800298c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	4293      	cmp	r3, r2
 8002996:	d008      	beq.n	80029aa <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d002      	beq.n	80029aa <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2b09      	cmp	r3, #9
 80029a8:	d114      	bne.n	80029d4 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d007      	beq.n	80029c8 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fd60 	bl	8002492 <LL_ADC_REG_StartConversion>
 80029d2:	e02d      	b.n	8002a30 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a15      	ldr	r2, [pc, #84]	; (8002a3c <HAL_ADC_Start+0x1b4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d009      	beq.n	80029fe <HAL_ADC_Start+0x176>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <HAL_ADC_Start+0x1c0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d002      	beq.n	80029fa <HAL_ADC_Start+0x172>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	e003      	b.n	8002a02 <HAL_ADC_Start+0x17a>
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <HAL_ADC_Start+0x1c4>)
 80029fc:	e001      	b.n	8002a02 <HAL_ADC_Start+0x17a>
 80029fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a02:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00f      	beq.n	8002a30 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a20:	e006      	b.n	8002a30 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002a2a:	e001      	b.n	8002a30 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	50000100 	.word	0x50000100
 8002a40:	50000300 	.word	0x50000300
 8002a44:	50000700 	.word	0x50000700
 8002a48:	50000500 	.word	0x50000500
 8002a4c:	50000400 	.word	0x50000400

08002a50 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a62:	d004      	beq.n	8002a6e <HAL_ADC_PollForConversion+0x1e>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a73      	ldr	r2, [pc, #460]	; (8002c38 <HAL_ADC_PollForConversion+0x1e8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_PollForConversion+0x22>
 8002a6e:	4b73      	ldr	r3, [pc, #460]	; (8002c3c <HAL_ADC_PollForConversion+0x1ec>)
 8002a70:	e000      	b.n	8002a74 <HAL_ADC_PollForConversion+0x24>
 8002a72:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <HAL_ADC_PollForConversion+0x1f0>)
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fc7b 	bl	8002370 <LL_ADC_GetMultimode>
 8002a7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d102      	bne.n	8002a8a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002a84:	2308      	movs	r3, #8
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	e037      	b.n	8002afa <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d002      	beq.n	8002a9c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b09      	cmp	r3, #9
 8002a9a:	d111      	bne.n	8002ac0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	f043 0220 	orr.w	r2, r3, #32
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0ba      	b.n	8002c30 <HAL_ADC_PollForConversion+0x1e0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002aba:	2304      	movs	r3, #4
 8002abc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002abe:	e01c      	b.n	8002afa <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac8:	d004      	beq.n	8002ad4 <HAL_ADC_PollForConversion+0x84>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a5a      	ldr	r2, [pc, #360]	; (8002c38 <HAL_ADC_PollForConversion+0x1e8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADC_PollForConversion+0x88>
 8002ad4:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <HAL_ADC_PollForConversion+0x1ec>)
 8002ad6:	e000      	b.n	8002ada <HAL_ADC_PollForConversion+0x8a>
 8002ad8:	4b59      	ldr	r3, [pc, #356]	; (8002c40 <HAL_ADC_PollForConversion+0x1f0>)
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fc56 	bl	800238c <LL_ADC_GetMultiDMATransfer>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aea:	f043 0220 	orr.w	r2, r3, #32
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e09c      	b.n	8002c30 <HAL_ADC_PollForConversion+0x1e0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002af6:	2304      	movs	r3, #4
 8002af8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002afa:	f7ff faab 	bl	8002054 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b00:	e01a      	b.n	8002b38 <HAL_ADC_PollForConversion+0xe8>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d016      	beq.n	8002b38 <HAL_ADC_PollForConversion+0xe8>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b0a:	f7ff faa3 	bl	8002054 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <HAL_ADC_PollForConversion+0xd0>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10b      	bne.n	8002b38 <HAL_ADC_PollForConversion+0xe8>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	f043 0204 	orr.w	r2, r3, #4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e07b      	b.n	8002c30 <HAL_ADC_PollForConversion+0x1e0>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0dd      	beq.n	8002b02 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fb7c 	bl	8002254 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01c      	beq.n	8002b9c <HAL_ADC_PollForConversion+0x14c>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7f5b      	ldrb	r3, [r3, #29]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d118      	bne.n	8002b9c <HAL_ADC_PollForConversion+0x14c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d111      	bne.n	8002b9c <HAL_ADC_PollForConversion+0x14c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <HAL_ADC_PollForConversion+0x14c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b94:	f043 0201 	orr.w	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a25      	ldr	r2, [pc, #148]	; (8002c38 <HAL_ADC_PollForConversion+0x1e8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d009      	beq.n	8002bba <HAL_ADC_PollForConversion+0x16a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a26      	ldr	r2, [pc, #152]	; (8002c44 <HAL_ADC_PollForConversion+0x1f4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d002      	beq.n	8002bb6 <HAL_ADC_PollForConversion+0x166>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	e003      	b.n	8002bbe <HAL_ADC_PollForConversion+0x16e>
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_ADC_PollForConversion+0x1f8>)
 8002bb8:	e001      	b.n	8002bbe <HAL_ADC_PollForConversion+0x16e>
 8002bba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d008      	beq.n	8002bd8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d002      	beq.n	8002bd8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b09      	cmp	r3, #9
 8002bd6:	d104      	bne.n	8002be2 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	e014      	b.n	8002c0c <HAL_ADC_PollForConversion+0x1bc>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <HAL_ADC_PollForConversion+0x1e8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d009      	beq.n	8002c00 <HAL_ADC_PollForConversion+0x1b0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <HAL_ADC_PollForConversion+0x1f4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d002      	beq.n	8002bfc <HAL_ADC_PollForConversion+0x1ac>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	e003      	b.n	8002c04 <HAL_ADC_PollForConversion+0x1b4>
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_ADC_PollForConversion+0x1f8>)
 8002bfe:	e001      	b.n	8002c04 <HAL_ADC_PollForConversion+0x1b4>
 8002c00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c04:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d104      	bne.n	8002c1c <HAL_ADC_PollForConversion+0x1cc>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2208      	movs	r2, #8
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e008      	b.n	8002c2e <HAL_ADC_PollForConversion+0x1de>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <HAL_ADC_PollForConversion+0x1de>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3720      	adds	r7, #32
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	50000100 	.word	0x50000100
 8002c3c:	50000300 	.word	0x50000300
 8002c40:	50000700 	.word	0x50000700
 8002c44:	50000500 	.word	0x50000500
 8002c48:	50000400 	.word	0x50000400

08002c4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b0b6      	sub	sp, #216	; 0xd8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d102      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x24>
 8002c86:	2302      	movs	r3, #2
 8002c88:	f000 bc12 	b.w	80034b0 <HAL_ADC_ConfigChannel+0x848>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fc0e 	bl	80024ba <LL_ADC_REG_IsConversionOngoing>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f040 83f2 	bne.w	800348a <HAL_ADC_ConfigChannel+0x822>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6859      	ldr	r1, [r3, #4]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f7ff fae1 	bl	800227a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fbfc 	bl	80024ba <LL_ADC_REG_IsConversionOngoing>
 8002cc2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fc08 	bl	80024e0 <LL_ADC_INJ_IsConversionOngoing>
 8002cd0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f040 81d9 	bne.w	8003090 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 81d4 	bne.w	8003090 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cf0:	d10f      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f7ff fae8 	bl	80022d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fa8f 	bl	800222e <LL_ADC_SetSamplingTimeCommonConfig>
 8002d10:	e00e      	b.n	8002d30 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6819      	ldr	r1, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f7ff fad7 	bl	80022d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fa7f 	bl	800222e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	08db      	lsrs	r3, r3, #3
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d022      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6919      	ldr	r1, [r3, #16]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d62:	f7ff f9d9 	bl	8002118 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6919      	ldr	r1, [r3, #16]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	461a      	mov	r2, r3
 8002d74:	f7ff fa25 	bl	80021c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6919      	ldr	r1, [r3, #16]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	7f1b      	ldrb	r3, [r3, #28]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d102      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x126>
 8002d88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d8c:	e000      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x128>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	461a      	mov	r2, r3
 8002d92:	f7ff fa31 	bl	80021f8 <LL_ADC_SetOffsetSaturation>
 8002d96:	e17b      	b.n	8003090 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff f9de 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x15c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff f9d3 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	0e9b      	lsrs	r3, r3, #26
 8002dbe:	f003 021f 	and.w	r2, r3, #31
 8002dc2:	e01e      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x19a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff f9c8 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002de2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002de6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002df2:	2320      	movs	r3, #32
 8002df4:	e004      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002df6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d105      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x1b2>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	0e9b      	lsrs	r3, r3, #26
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	e018      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x1e4>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e3e:	2320      	movs	r3, #32
 8002e40:	e004      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d106      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2200      	movs	r2, #0
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f997 	bl	800218c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2101      	movs	r1, #1
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff f97b 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10a      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x222>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff f970 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002e80:	4603      	mov	r3, r0
 8002e82:	0e9b      	lsrs	r3, r3, #26
 8002e84:	f003 021f 	and.w	r2, r3, #31
 8002e88:	e01e      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x260>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2101      	movs	r1, #1
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff f965 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ea8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002eac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002eb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002eb8:	2320      	movs	r3, #32
 8002eba:	e004      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d105      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x278>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0e9b      	lsrs	r3, r3, #26
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	e018      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x2aa>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ef4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f04:	2320      	movs	r3, #32
 8002f06:	e004      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d106      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff f934 	bl	800218c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2102      	movs	r1, #2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff f918 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x2e8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2102      	movs	r1, #2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff f90d 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002f46:	4603      	mov	r3, r0
 8002f48:	0e9b      	lsrs	r3, r3, #26
 8002f4a:	f003 021f 	and.w	r2, r3, #31
 8002f4e:	e01e      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x326>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2102      	movs	r1, #2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff f902 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002f7e:	2320      	movs	r3, #32
 8002f80:	e004      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002f82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d105      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x33e>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	0e9b      	lsrs	r3, r3, #26
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	e016      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x36c>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002fb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	e004      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002fca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d106      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2102      	movs	r1, #2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff f8d3 	bl	800218c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2103      	movs	r1, #3
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff f8b7 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10a      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x3aa>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2103      	movs	r1, #3
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff f8ac 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8003008:	4603      	mov	r3, r0
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	f003 021f 	and.w	r2, r3, #31
 8003010:	e017      	b.n	8003042 <HAL_ADC_ConfigChannel+0x3da>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2103      	movs	r1, #3
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff f8a1 	bl	8002160 <LL_ADC_GetOffsetChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800302a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800302c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800302e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003034:	2320      	movs	r3, #32
 8003036:	e003      	b.n	8003040 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304a:	2b00      	cmp	r3, #0
 800304c:	d105      	bne.n	800305a <HAL_ADC_ConfigChannel+0x3f2>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	0e9b      	lsrs	r3, r3, #26
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	e011      	b.n	800307e <HAL_ADC_ConfigChannel+0x416>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003062:	fa93 f3a3 	rbit	r3, r3
 8003066:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800306a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800306c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003072:	2320      	movs	r3, #32
 8003074:	e003      	b.n	800307e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003078:	fab3 f383 	clz	r3, r3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	429a      	cmp	r2, r3
 8003080:	d106      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2200      	movs	r2, #0
 8003088:	2103      	movs	r1, #3
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff f87e 	bl	800218c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff f9e9 	bl	800246c <LL_ADC_IsEnabled>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	f040 813d 	bne.w	800331c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f7ff f93a 	bl	8002328 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4aa2      	ldr	r2, [pc, #648]	; (8003344 <HAL_ADC_ConfigChannel+0x6dc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	f040 812e 	bne.w	800331c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10b      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x480>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	0e9b      	lsrs	r3, r3, #26
 80030d6:	3301      	adds	r3, #1
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	2b09      	cmp	r3, #9
 80030de:	bf94      	ite	ls
 80030e0:	2301      	movls	r3, #1
 80030e2:	2300      	movhi	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e019      	b.n	800311c <HAL_ADC_ConfigChannel+0x4b4>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80030f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030f8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80030fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003100:	2320      	movs	r3, #32
 8003102:	e003      	b.n	800310c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	3301      	adds	r3, #1
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	2b09      	cmp	r3, #9
 8003114:	bf94      	ite	ls
 8003116:	2301      	movls	r3, #1
 8003118:	2300      	movhi	r3, #0
 800311a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800311c:	2b00      	cmp	r3, #0
 800311e:	d079      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003128:	2b00      	cmp	r3, #0
 800312a:	d107      	bne.n	800313c <HAL_ADC_ConfigChannel+0x4d4>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0e9b      	lsrs	r3, r3, #26
 8003132:	3301      	adds	r3, #1
 8003134:	069b      	lsls	r3, r3, #26
 8003136:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800313a:	e015      	b.n	8003168 <HAL_ADC_ConfigChannel+0x500>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800314a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800314e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	e003      	b.n	8003160 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3301      	adds	r3, #1
 8003162:	069b      	lsls	r3, r3, #26
 8003164:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d109      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x520>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	3301      	adds	r3, #1
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2101      	movs	r1, #1
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	e017      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x550>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003198:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800319a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80031a0:	2320      	movs	r3, #32
 80031a2:	e003      	b.n	80031ac <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80031a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	3301      	adds	r3, #1
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	2101      	movs	r1, #1
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	ea42 0103 	orr.w	r1, r2, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <HAL_ADC_ConfigChannel+0x576>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	0e9b      	lsrs	r3, r3, #26
 80031ce:	3301      	adds	r3, #1
 80031d0:	f003 021f 	and.w	r2, r3, #31
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	051b      	lsls	r3, r3, #20
 80031dc:	e018      	b.n	8003210 <HAL_ADC_ConfigChannel+0x5a8>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80031f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80031f6:	2320      	movs	r3, #32
 80031f8:	e003      	b.n	8003202 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80031fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031fc:	fab3 f383 	clz	r3, r3
 8003200:	b2db      	uxtb	r3, r3
 8003202:	3301      	adds	r3, #1
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003210:	430b      	orrs	r3, r1
 8003212:	e07e      	b.n	8003312 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321c:	2b00      	cmp	r3, #0
 800321e:	d107      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x5c8>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	0e9b      	lsrs	r3, r3, #26
 8003226:	3301      	adds	r3, #1
 8003228:	069b      	lsls	r3, r3, #26
 800322a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800322e:	e015      	b.n	800325c <HAL_ADC_ConfigChannel+0x5f4>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003238:	fa93 f3a3 	rbit	r3, r3
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003248:	2320      	movs	r3, #32
 800324a:	e003      	b.n	8003254 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	3301      	adds	r3, #1
 8003256:	069b      	lsls	r3, r3, #26
 8003258:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003264:	2b00      	cmp	r3, #0
 8003266:	d109      	bne.n	800327c <HAL_ADC_ConfigChannel+0x614>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	0e9b      	lsrs	r3, r3, #26
 800326e:	3301      	adds	r3, #1
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	2101      	movs	r1, #1
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	e017      	b.n	80032ac <HAL_ADC_ConfigChannel+0x644>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	61fb      	str	r3, [r7, #28]
  return result;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003294:	2320      	movs	r3, #32
 8003296:	e003      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	3301      	adds	r3, #1
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	2101      	movs	r1, #1
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	ea42 0103 	orr.w	r1, r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10d      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x670>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0e9b      	lsrs	r3, r3, #26
 80032c2:	3301      	adds	r3, #1
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	3b1e      	subs	r3, #30
 80032d0:	051b      	lsls	r3, r3, #20
 80032d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032d6:	e01b      	b.n	8003310 <HAL_ADC_ConfigChannel+0x6a8>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	613b      	str	r3, [r7, #16]
  return result;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80032f0:	2320      	movs	r3, #32
 80032f2:	e003      	b.n	80032fc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	3301      	adds	r3, #1
 80032fe:	f003 021f 	and.w	r2, r3, #31
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	3b1e      	subs	r3, #30
 800330a:	051b      	lsls	r3, r3, #20
 800330c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003310:	430b      	orrs	r3, r1
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	6892      	ldr	r2, [r2, #8]
 8003316:	4619      	mov	r1, r3
 8003318:	f7fe ffdb 	bl	80022d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_ADC_ConfigChannel+0x6e0>)
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80bd 	beq.w	80034a4 <HAL_ADC_ConfigChannel+0x83c>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003332:	d004      	beq.n	800333e <HAL_ADC_ConfigChannel+0x6d6>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <HAL_ADC_ConfigChannel+0x6e4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d10a      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x6ec>
 800333e:	4b04      	ldr	r3, [pc, #16]	; (8003350 <HAL_ADC_ConfigChannel+0x6e8>)
 8003340:	e009      	b.n	8003356 <HAL_ADC_ConfigChannel+0x6ee>
 8003342:	bf00      	nop
 8003344:	407f0000 	.word	0x407f0000
 8003348:	80080000 	.word	0x80080000
 800334c:	50000100 	.word	0x50000100
 8003350:	50000300 	.word	0x50000300
 8003354:	4b58      	ldr	r3, [pc, #352]	; (80034b8 <HAL_ADC_ConfigChannel+0x850>)
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe fed0 	bl	80020fc <LL_ADC_GetCommonPathInternalCh>
 800335c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a55      	ldr	r2, [pc, #340]	; (80034bc <HAL_ADC_ConfigChannel+0x854>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_ADC_ConfigChannel+0x70c>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a54      	ldr	r2, [pc, #336]	; (80034c0 <HAL_ADC_ConfigChannel+0x858>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d139      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x780>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003378:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d133      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003388:	d005      	beq.n	8003396 <HAL_ADC_ConfigChannel+0x72e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a4d      	ldr	r2, [pc, #308]	; (80034c4 <HAL_ADC_ConfigChannel+0x85c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	f040 8084 	bne.w	800349e <HAL_ADC_ConfigChannel+0x836>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800339e:	d004      	beq.n	80033aa <HAL_ADC_ConfigChannel+0x742>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a48      	ldr	r2, [pc, #288]	; (80034c8 <HAL_ADC_ConfigChannel+0x860>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x746>
 80033aa:	4a48      	ldr	r2, [pc, #288]	; (80034cc <HAL_ADC_ConfigChannel+0x864>)
 80033ac:	e000      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x748>
 80033ae:	4a42      	ldr	r2, [pc, #264]	; (80034b8 <HAL_ADC_ConfigChannel+0x850>)
 80033b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f7fe fe8b 	bl	80020d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80033c0:	4b43      	ldr	r3, [pc, #268]	; (80034d0 <HAL_ADC_ConfigChannel+0x868>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	4a43      	ldr	r2, [pc, #268]	; (80034d4 <HAL_ADC_ConfigChannel+0x86c>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	099a      	lsrs	r2, r3, #6
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033d8:	e002      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x778>
          {
            wait_loop_index--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	3b01      	subs	r3, #1
 80033de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f9      	bne.n	80033da <HAL_ADC_ConfigChannel+0x772>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033e6:	e05a      	b.n	800349e <HAL_ADC_ConfigChannel+0x836>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a3a      	ldr	r2, [pc, #232]	; (80034d8 <HAL_ADC_ConfigChannel+0x870>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d125      	bne.n	800343e <HAL_ADC_ConfigChannel+0x7d6>
 80033f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d11f      	bne.n	800343e <HAL_ADC_ConfigChannel+0x7d6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a31      	ldr	r2, [pc, #196]	; (80034c8 <HAL_ADC_ConfigChannel+0x860>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d104      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x7aa>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a33      	ldr	r2, [pc, #204]	; (80034dc <HAL_ADC_ConfigChannel+0x874>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d047      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x83a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800341a:	d004      	beq.n	8003426 <HAL_ADC_ConfigChannel+0x7be>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a29      	ldr	r2, [pc, #164]	; (80034c8 <HAL_ADC_ConfigChannel+0x860>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d101      	bne.n	800342a <HAL_ADC_ConfigChannel+0x7c2>
 8003426:	4a29      	ldr	r2, [pc, #164]	; (80034cc <HAL_ADC_ConfigChannel+0x864>)
 8003428:	e000      	b.n	800342c <HAL_ADC_ConfigChannel+0x7c4>
 800342a:	4a23      	ldr	r2, [pc, #140]	; (80034b8 <HAL_ADC_ConfigChannel+0x850>)
 800342c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003434:	4619      	mov	r1, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f7fe fe4d 	bl	80020d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800343c:	e031      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x83a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a27      	ldr	r2, [pc, #156]	; (80034e0 <HAL_ADC_ConfigChannel+0x878>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d12d      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x83c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800344c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d127      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x83c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <HAL_ADC_ConfigChannel+0x860>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d022      	beq.n	80034a4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003466:	d004      	beq.n	8003472 <HAL_ADC_ConfigChannel+0x80a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a16      	ldr	r2, [pc, #88]	; (80034c8 <HAL_ADC_ConfigChannel+0x860>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d101      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x80e>
 8003472:	4a16      	ldr	r2, [pc, #88]	; (80034cc <HAL_ADC_ConfigChannel+0x864>)
 8003474:	e000      	b.n	8003478 <HAL_ADC_ConfigChannel+0x810>
 8003476:	4a10      	ldr	r2, [pc, #64]	; (80034b8 <HAL_ADC_ConfigChannel+0x850>)
 8003478:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800347c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f7fe fe27 	bl	80020d6 <LL_ADC_SetCommonPathInternalCh>
 8003488:	e00c      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x83c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	f043 0220 	orr.w	r2, r3, #32
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800349c:	e002      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034a2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034ac:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	37d8      	adds	r7, #216	; 0xd8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	50000700 	.word	0x50000700
 80034bc:	c3210000 	.word	0xc3210000
 80034c0:	90c00010 	.word	0x90c00010
 80034c4:	50000600 	.word	0x50000600
 80034c8:	50000100 	.word	0x50000100
 80034cc:	50000300 	.word	0x50000300
 80034d0:	20000000 	.word	0x20000000
 80034d4:	053e2d63 	.word	0x053e2d63
 80034d8:	c7520000 	.word	0xc7520000
 80034dc:	50000500 	.word	0x50000500
 80034e0:	cb840000 	.word	0xcb840000

080034e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fe ffbb 	bl	800246c <LL_ADC_IsEnabled>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d146      	bne.n	800358a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <ADC_Enable+0xb0>)
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00d      	beq.n	8003526 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	f043 0210 	orr.w	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351a:	f043 0201 	orr.w	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e032      	b.n	800358c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe ff8a 	bl	8002444 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003530:	f7fe fd90 	bl	8002054 <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003536:	e021      	b.n	800357c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe ff95 	bl	800246c <LL_ADC_IsEnabled>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d104      	bne.n	8003552 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe ff79 	bl	8002444 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003552:	f7fe fd7f 	bl	8002054 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d90d      	bls.n	800357c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	f043 0210 	orr.w	r2, r3, #16
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e007      	b.n	800358c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d1d6      	bne.n	8003538 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	8000003f 	.word	0x8000003f

08003598 <LL_ADC_IsEnabled>:
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <LL_ADC_IsEnabled+0x18>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <LL_ADC_IsEnabled+0x1a>
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <LL_ADC_REG_IsConversionOngoing>:
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d101      	bne.n	80035d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b0a1      	sub	sp, #132	; 0x84
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035fe:	2302      	movs	r3, #2
 8003600:	e0e3      	b.n	80037ca <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003612:	d102      	bne.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003614:	4b6f      	ldr	r3, [pc, #444]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	e009      	b.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a6e      	ldr	r2, [pc, #440]	; (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d102      	bne.n	800362a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8003624:	4b6d      	ldr	r3, [pc, #436]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	e001      	b.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10b      	bne.n	800364c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0be      	b.n	80037ca <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff ffb5 	bl	80035be <LL_ADC_REG_IsConversionOngoing>
 8003654:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff ffaf 	bl	80035be <LL_ADC_REG_IsConversionOngoing>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 80a0 	bne.w	80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 809c 	bne.w	80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003678:	d004      	beq.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a55      	ldr	r2, [pc, #340]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8003684:	4b56      	ldr	r3, [pc, #344]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003686:	e000      	b.n	800368a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003688:	4b56      	ldr	r3, [pc, #344]	; (80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800368a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d04b      	beq.n	800372c <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036a6:	035b      	lsls	r3, r3, #13
 80036a8:	430b      	orrs	r3, r1
 80036aa:	431a      	orrs	r2, r3
 80036ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036b8:	d004      	beq.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a45      	ldr	r2, [pc, #276]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d10f      	bne.n	80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80036c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036c8:	f7ff ff66 	bl	8003598 <LL_ADC_IsEnabled>
 80036cc:	4604      	mov	r4, r0
 80036ce:	4841      	ldr	r0, [pc, #260]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80036d0:	f7ff ff62 	bl	8003598 <LL_ADC_IsEnabled>
 80036d4:	4603      	mov	r3, r0
 80036d6:	4323      	orrs	r3, r4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bf0c      	ite	eq
 80036dc:	2301      	moveq	r3, #1
 80036de:	2300      	movne	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	e012      	b.n	800370a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80036e4:	483c      	ldr	r0, [pc, #240]	; (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80036e6:	f7ff ff57 	bl	8003598 <LL_ADC_IsEnabled>
 80036ea:	4604      	mov	r4, r0
 80036ec:	483b      	ldr	r0, [pc, #236]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036ee:	f7ff ff53 	bl	8003598 <LL_ADC_IsEnabled>
 80036f2:	4603      	mov	r3, r0
 80036f4:	431c      	orrs	r4, r3
 80036f6:	483c      	ldr	r0, [pc, #240]	; (80037e8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80036f8:	f7ff ff4e 	bl	8003598 <LL_ADC_IsEnabled>
 80036fc:	4603      	mov	r3, r0
 80036fe:	4323      	orrs	r3, r4
 8003700:	2b00      	cmp	r3, #0
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d056      	beq.n	80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800370e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003716:	f023 030f 	bic.w	r3, r3, #15
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	6811      	ldr	r1, [r2, #0]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	6892      	ldr	r2, [r2, #8]
 8003722:	430a      	orrs	r2, r1
 8003724:	431a      	orrs	r2, r3
 8003726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003728:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800372a:	e047      	b.n	80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800372c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003736:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003740:	d004      	beq.n	800374c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d10f      	bne.n	800376c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800374c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003750:	f7ff ff22 	bl	8003598 <LL_ADC_IsEnabled>
 8003754:	4604      	mov	r4, r0
 8003756:	481f      	ldr	r0, [pc, #124]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003758:	f7ff ff1e 	bl	8003598 <LL_ADC_IsEnabled>
 800375c:	4603      	mov	r3, r0
 800375e:	4323      	orrs	r3, r4
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf0c      	ite	eq
 8003764:	2301      	moveq	r3, #1
 8003766:	2300      	movne	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	e012      	b.n	8003792 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800376c:	481a      	ldr	r0, [pc, #104]	; (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800376e:	f7ff ff13 	bl	8003598 <LL_ADC_IsEnabled>
 8003772:	4604      	mov	r4, r0
 8003774:	4819      	ldr	r0, [pc, #100]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003776:	f7ff ff0f 	bl	8003598 <LL_ADC_IsEnabled>
 800377a:	4603      	mov	r3, r0
 800377c:	431c      	orrs	r4, r3
 800377e:	481a      	ldr	r0, [pc, #104]	; (80037e8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003780:	f7ff ff0a 	bl	8003598 <LL_ADC_IsEnabled>
 8003784:	4603      	mov	r3, r0
 8003786:	4323      	orrs	r3, r4
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d012      	beq.n	80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800379e:	f023 030f 	bic.w	r3, r3, #15
 80037a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80037a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037a6:	e009      	b.n	80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80037ba:	e000      	b.n	80037be <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80037c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3784      	adds	r7, #132	; 0x84
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd90      	pop	{r4, r7, pc}
 80037d2:	bf00      	nop
 80037d4:	50000100 	.word	0x50000100
 80037d8:	50000400 	.word	0x50000400
 80037dc:	50000500 	.word	0x50000500
 80037e0:	50000300 	.word	0x50000300
 80037e4:	50000700 	.word	0x50000700
 80037e8:	50000600 	.word	0x50000600

080037ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003808:	4013      	ands	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381e:	4a04      	ldr	r2, [pc, #16]	; (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	60d3      	str	r3, [r2, #12]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <__NVIC_GetPriorityGrouping+0x18>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	f003 0307 	and.w	r3, r3, #7
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db0b      	blt.n	800387a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	f003 021f 	and.w	r2, r3, #31
 8003868:	4907      	ldr	r1, [pc, #28]	; (8003888 <__NVIC_EnableIRQ+0x38>)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	2001      	movs	r0, #1
 8003872:	fa00 f202 	lsl.w	r2, r0, r2
 8003876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e000e100 	.word	0xe000e100

0800388c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	6039      	str	r1, [r7, #0]
 8003896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389c:	2b00      	cmp	r3, #0
 800389e:	db0a      	blt.n	80038b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	490c      	ldr	r1, [pc, #48]	; (80038d8 <__NVIC_SetPriority+0x4c>)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	0112      	lsls	r2, r2, #4
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	440b      	add	r3, r1
 80038b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b4:	e00a      	b.n	80038cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4908      	ldr	r1, [pc, #32]	; (80038dc <__NVIC_SetPriority+0x50>)
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	3b04      	subs	r3, #4
 80038c4:	0112      	lsls	r2, r2, #4
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	440b      	add	r3, r1
 80038ca:	761a      	strb	r2, [r3, #24]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000e100 	.word	0xe000e100
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b089      	sub	sp, #36	; 0x24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f1c3 0307 	rsb	r3, r3, #7
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	bf28      	it	cs
 80038fe:	2304      	movcs	r3, #4
 8003900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3304      	adds	r3, #4
 8003906:	2b06      	cmp	r3, #6
 8003908:	d902      	bls.n	8003910 <NVIC_EncodePriority+0x30>
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3b03      	subs	r3, #3
 800390e:	e000      	b.n	8003912 <NVIC_EncodePriority+0x32>
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003914:	f04f 32ff 	mov.w	r2, #4294967295
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43da      	mvns	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	401a      	ands	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003928:	f04f 31ff 	mov.w	r1, #4294967295
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa01 f303 	lsl.w	r3, r1, r3
 8003932:	43d9      	mvns	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003938:	4313      	orrs	r3, r2
         );
}
 800393a:	4618      	mov	r0, r3
 800393c:	3724      	adds	r7, #36	; 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff4c 	bl	80037ec <__NVIC_SetPriorityGrouping>
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800396a:	f7ff ff63 	bl	8003834 <__NVIC_GetPriorityGrouping>
 800396e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	6978      	ldr	r0, [r7, #20]
 8003976:	f7ff ffb3 	bl	80038e0 <NVIC_EncodePriority>
 800397a:	4602      	mov	r2, r0
 800397c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff ff82 	bl	800388c <__NVIC_SetPriority>
}
 8003988:	bf00      	nop
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff ff56 	bl	8003850 <__NVIC_EnableIRQ>
}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e014      	b.n	80039e8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	791b      	ldrb	r3, [r3, #4]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d105      	bne.n	80039d4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fe f93c 	bl	8001c4c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	795b      	ldrb	r3, [r3, #5]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_DAC_Start+0x16>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e043      	b.n	8003a8e <HAL_DAC_Start+0x9e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6819      	ldr	r1, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	2201      	movs	r2, #1
 8003a20:	409a      	lsls	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f7fe fb1e 	bl	800206c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d11d      	bne.n	8003a80 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	e014      	b.n	8003a80 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2102      	movs	r1, #2
 8003a68:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d107      	bne.n	8003a80 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0202 	orr.w	r2, r2, #2
 8003a7e:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b087      	sub	sp, #28
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d105      	bne.n	8003ac6 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4413      	add	r3, r2
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	e004      	b.n	8003ad0 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4413      	add	r3, r2
 8003acc:	3314      	adds	r3, #20
 8003ace:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	795b      	ldrb	r3, [r3, #5]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_DAC_ConfigChannel+0x1c>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e194      	b.n	8003e2e <HAL_DAC_ConfigChannel+0x346>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d174      	bne.n	8003c02 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d137      	bne.n	8003b8e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003b1e:	f7fe fa99 	bl	8002054 <HAL_GetTick>
 8003b22:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b24:	e011      	b.n	8003b4a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b26:	f7fe fa95 	bl	8002054 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d90a      	bls.n	8003b4a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f043 0208 	orr.w	r2, r3, #8
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2203      	movs	r2, #3
 8003b44:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e171      	b.n	8003e2e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e6      	bne.n	8003b26 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f7fe fa87 	bl	800206c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40
 8003b68:	e01e      	b.n	8003ba8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b6a:	f7fe fa73 	bl	8002054 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d90a      	bls.n	8003b8e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f043 0208 	orr.w	r2, r3, #8
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2203      	movs	r2, #3
 8003b88:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e14f      	b.n	8003e2e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	dbe8      	blt.n	8003b6a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f7fe fa67 	bl	800206c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ba6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	ea02 0103 	and.w	r1, r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	21ff      	movs	r1, #255	; 0xff
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	ea02 0103 	and.w	r1, r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d11d      	bne.n	8003c46 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	221f      	movs	r2, #31
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c22:	4013      	ands	r3, r2
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2207      	movs	r2, #7
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5e:	4013      	ands	r3, r2
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	623b      	str	r3, [r7, #32]
 8003c72:	e011      	b.n	8003c98 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003c80:	2301      	movs	r3, #1
 8003c82:	623b      	str	r3, [r7, #32]
 8003c84:	e008      	b.n	8003c98 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	623b      	str	r3, [r7, #32]
 8003c92:	e001      	b.n	8003c98 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	6a3a      	ldr	r2, [r7, #32]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cba:	4013      	ands	r3, r2
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	791b      	ldrb	r3, [r3, #4]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <HAL_DAC_ConfigChannel+0x1e4>
 8003cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cca:	e000      	b.n	8003cce <HAL_DAC_ConfigChannel+0x1e6>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	795b      	ldrb	r3, [r3, #5]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d102      	bne.n	8003cf8 <HAL_DAC_ConfigChannel+0x210>
 8003cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cf6:	e000      	b.n	8003cfa <HAL_DAC_ConfigChannel+0x212>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d114      	bne.n	8003d3a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003d10:	f000 ffcc 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8003d14:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	4a47      	ldr	r2, [pc, #284]	; (8003e38 <HAL_DAC_ConfigChannel+0x350>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d904      	bls.n	8003d28 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
 8003d26:	e00d      	b.n	8003d44 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	4a44      	ldr	r2, [pc, #272]	; (8003e3c <HAL_DAC_ConfigChannel+0x354>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d909      	bls.n	8003d44 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
 8003d38:	e004      	b.n	8003d44 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d40:	4313      	orrs	r3, r2
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d52:	4313      	orrs	r3, r2
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43da      	mvns	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	400a      	ands	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d96:	4013      	ands	r3, r2
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f003 0310 	and.w	r3, r3, #16
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dae:	4313      	orrs	r3, r2
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	22c0      	movs	r2, #192	; 0xc0
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43da      	mvns	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	400a      	ands	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	089b      	lsrs	r3, r3, #2
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	ea02 0103 	and.w	r1, r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	409a      	lsls	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3728      	adds	r7, #40	; 0x28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	09896800 	.word	0x09896800
 8003e3c:	04c4b400 	.word	0x04c4b400

08003e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e4e:	e15a      	b.n	8004106 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	2101      	movs	r1, #1
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 814c 	beq.w	8004100 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d00b      	beq.n	8003e88 <HAL_GPIO_Init+0x48>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d007      	beq.n	8003e88 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e7c:	2b11      	cmp	r3, #17
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b12      	cmp	r3, #18
 8003e86:	d130      	bne.n	8003eea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	2203      	movs	r2, #3
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	f003 0201 	and.w	r2, r3, #1
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4013      	ands	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0xea>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b12      	cmp	r3, #18
 8003f28:	d123      	bne.n	8003f72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	08da      	lsrs	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3208      	adds	r2, #8
 8003f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	220f      	movs	r2, #15
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	08da      	lsrs	r2, r3, #3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3208      	adds	r2, #8
 8003f6c:	6939      	ldr	r1, [r7, #16]
 8003f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43db      	mvns	r3, r3
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4013      	ands	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f003 0203 	and.w	r2, r3, #3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80a6 	beq.w	8004100 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb4:	4b5b      	ldr	r3, [pc, #364]	; (8004124 <HAL_GPIO_Init+0x2e4>)
 8003fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb8:	4a5a      	ldr	r2, [pc, #360]	; (8004124 <HAL_GPIO_Init+0x2e4>)
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	6613      	str	r3, [r2, #96]	; 0x60
 8003fc0:	4b58      	ldr	r3, [pc, #352]	; (8004124 <HAL_GPIO_Init+0x2e4>)
 8003fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fcc:	4a56      	ldr	r2, [pc, #344]	; (8004128 <HAL_GPIO_Init+0x2e8>)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	3302      	adds	r3, #2
 8003fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f003 0303 	and.w	r3, r3, #3
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	220f      	movs	r2, #15
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ff6:	d01f      	beq.n	8004038 <HAL_GPIO_Init+0x1f8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a4c      	ldr	r2, [pc, #304]	; (800412c <HAL_GPIO_Init+0x2ec>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d019      	beq.n	8004034 <HAL_GPIO_Init+0x1f4>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a4b      	ldr	r2, [pc, #300]	; (8004130 <HAL_GPIO_Init+0x2f0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <HAL_GPIO_Init+0x1f0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a4a      	ldr	r2, [pc, #296]	; (8004134 <HAL_GPIO_Init+0x2f4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00d      	beq.n	800402c <HAL_GPIO_Init+0x1ec>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a49      	ldr	r2, [pc, #292]	; (8004138 <HAL_GPIO_Init+0x2f8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d007      	beq.n	8004028 <HAL_GPIO_Init+0x1e8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a48      	ldr	r2, [pc, #288]	; (800413c <HAL_GPIO_Init+0x2fc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d101      	bne.n	8004024 <HAL_GPIO_Init+0x1e4>
 8004020:	2305      	movs	r3, #5
 8004022:	e00a      	b.n	800403a <HAL_GPIO_Init+0x1fa>
 8004024:	2306      	movs	r3, #6
 8004026:	e008      	b.n	800403a <HAL_GPIO_Init+0x1fa>
 8004028:	2304      	movs	r3, #4
 800402a:	e006      	b.n	800403a <HAL_GPIO_Init+0x1fa>
 800402c:	2303      	movs	r3, #3
 800402e:	e004      	b.n	800403a <HAL_GPIO_Init+0x1fa>
 8004030:	2302      	movs	r3, #2
 8004032:	e002      	b.n	800403a <HAL_GPIO_Init+0x1fa>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_GPIO_Init+0x1fa>
 8004038:	2300      	movs	r3, #0
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	f002 0203 	and.w	r2, r2, #3
 8004040:	0092      	lsls	r2, r2, #2
 8004042:	4093      	lsls	r3, r2
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800404a:	4937      	ldr	r1, [pc, #220]	; (8004128 <HAL_GPIO_Init+0x2e8>)
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	3302      	adds	r3, #2
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004058:	4b39      	ldr	r3, [pc, #228]	; (8004140 <HAL_GPIO_Init+0x300>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	43db      	mvns	r3, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4013      	ands	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800407c:	4a30      	ldr	r2, [pc, #192]	; (8004140 <HAL_GPIO_Init+0x300>)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004082:	4b2f      	ldr	r3, [pc, #188]	; (8004140 <HAL_GPIO_Init+0x300>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	43db      	mvns	r3, r3
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4013      	ands	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040a6:	4a26      	ldr	r2, [pc, #152]	; (8004140 <HAL_GPIO_Init+0x300>)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040ac:	4b24      	ldr	r3, [pc, #144]	; (8004140 <HAL_GPIO_Init+0x300>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4013      	ands	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040d0:	4a1b      	ldr	r2, [pc, #108]	; (8004140 <HAL_GPIO_Init+0x300>)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <HAL_GPIO_Init+0x300>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	43db      	mvns	r3, r3
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040fa:	4a11      	ldr	r2, [pc, #68]	; (8004140 <HAL_GPIO_Init+0x300>)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3301      	adds	r3, #1
 8004104:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	fa22 f303 	lsr.w	r3, r2, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	f47f ae9d 	bne.w	8003e50 <HAL_GPIO_Init+0x10>
  }
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000
 8004128:	40010000 	.word	0x40010000
 800412c:	48000400 	.word	0x48000400
 8004130:	48000800 	.word	0x48000800
 8004134:	48000c00 	.word	0x48000c00
 8004138:	48001000 	.word	0x48001000
 800413c:	48001400 	.word	0x48001400
 8004140:	40010400 	.word	0x40010400

08004144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]
 8004150:	4613      	mov	r3, r2
 8004152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004154:	787b      	ldrb	r3, [r7, #1]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800415a:	887a      	ldrh	r2, [r7, #2]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004160:	e002      	b.n	8004168 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004162:	887a      	ldrh	r2, [r7, #2]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004186:	887a      	ldrh	r2, [r7, #2]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4013      	ands	r3, r2
 800418c:	041a      	lsls	r2, r3, #16
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	43d9      	mvns	r1, r3
 8004192:	887b      	ldrh	r3, [r7, #2]
 8004194:	400b      	ands	r3, r1
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	619a      	str	r2, [r3, #24]
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d006      	beq.n	80041cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041be:	4a05      	ldr	r2, [pc, #20]	; (80041d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fd f8cc 	bl	8001364 <HAL_GPIO_EXTI_Callback>
  }
}
 80041cc:	bf00      	nop
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40010400 	.word	0x40010400

080041d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d141      	bne.n	800426a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041e6:	4b4b      	ldr	r3, [pc, #300]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f2:	d131      	bne.n	8004258 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041f4:	4b47      	ldr	r3, [pc, #284]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041fa:	4a46      	ldr	r2, [pc, #280]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004200:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004204:	4b43      	ldr	r3, [pc, #268]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800420c:	4a41      	ldr	r2, [pc, #260]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004212:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004214:	4b40      	ldr	r3, [pc, #256]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2232      	movs	r2, #50	; 0x32
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	4a3f      	ldr	r2, [pc, #252]	; (800431c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004220:	fba2 2303 	umull	r2, r3, r2, r3
 8004224:	0c9b      	lsrs	r3, r3, #18
 8004226:	3301      	adds	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800422a:	e002      	b.n	8004232 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3b01      	subs	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004232:	4b38      	ldr	r3, [pc, #224]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423e:	d102      	bne.n	8004246 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f2      	bne.n	800422c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004246:	4b33      	ldr	r3, [pc, #204]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004252:	d158      	bne.n	8004306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e057      	b.n	8004308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004258:	4b2e      	ldr	r3, [pc, #184]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800425e:	4a2d      	ldr	r2, [pc, #180]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004264:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004268:	e04d      	b.n	8004306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004270:	d141      	bne.n	80042f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004272:	4b28      	ldr	r3, [pc, #160]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800427a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427e:	d131      	bne.n	80042e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004280:	4b24      	ldr	r3, [pc, #144]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004286:	4a23      	ldr	r2, [pc, #140]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004290:	4b20      	ldr	r3, [pc, #128]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004298:	4a1e      	ldr	r2, [pc, #120]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800429e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042a0:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2232      	movs	r2, #50	; 0x32
 80042a6:	fb02 f303 	mul.w	r3, r2, r3
 80042aa:	4a1c      	ldr	r2, [pc, #112]	; (800431c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	0c9b      	lsrs	r3, r3, #18
 80042b2:	3301      	adds	r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042b6:	e002      	b.n	80042be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042be:	4b15      	ldr	r3, [pc, #84]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ca:	d102      	bne.n	80042d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f2      	bne.n	80042b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042d2:	4b10      	ldr	r3, [pc, #64]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042de:	d112      	bne.n	8004306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e011      	b.n	8004308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ea:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80042f4:	e007      	b.n	8004306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042fe:	4a05      	ldr	r2, [pc, #20]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004300:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004304:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40007000 	.word	0x40007000
 8004318:	20000000 	.word	0x20000000
 800431c:	431bde83 	.word	0x431bde83

08004320 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a04      	ldr	r2, [pc, #16]	; (800433c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800432a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800432e:	6093      	str	r3, [r2, #8]
}
 8004330:	bf00      	nop
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40007000 	.word	0x40007000

08004340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e308      	b.n	8004964 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d075      	beq.n	800444a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800435e:	4ba3      	ldr	r3, [pc, #652]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004368:	4ba0      	ldr	r3, [pc, #640]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b0c      	cmp	r3, #12
 8004376:	d102      	bne.n	800437e <HAL_RCC_OscConfig+0x3e>
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b03      	cmp	r3, #3
 800437c:	d002      	beq.n	8004384 <HAL_RCC_OscConfig+0x44>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d10b      	bne.n	800439c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004384:	4b99      	ldr	r3, [pc, #612]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d05b      	beq.n	8004448 <HAL_RCC_OscConfig+0x108>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d157      	bne.n	8004448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e2e3      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a4:	d106      	bne.n	80043b4 <HAL_RCC_OscConfig+0x74>
 80043a6:	4b91      	ldr	r3, [pc, #580]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a90      	ldr	r2, [pc, #576]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e01d      	b.n	80043f0 <HAL_RCC_OscConfig+0xb0>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x98>
 80043be:	4b8b      	ldr	r3, [pc, #556]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a8a      	ldr	r2, [pc, #552]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	4b88      	ldr	r3, [pc, #544]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a87      	ldr	r2, [pc, #540]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e00b      	b.n	80043f0 <HAL_RCC_OscConfig+0xb0>
 80043d8:	4b84      	ldr	r3, [pc, #528]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a83      	ldr	r2, [pc, #524]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	4b81      	ldr	r3, [pc, #516]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a80      	ldr	r2, [pc, #512]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d013      	beq.n	8004420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fd fe2c 	bl	8002054 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004400:	f7fd fe28 	bl	8002054 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e2a8      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004412:	4b76      	ldr	r3, [pc, #472]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0xc0>
 800441e:	e014      	b.n	800444a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fd fe18 	bl	8002054 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004428:	f7fd fe14 	bl	8002054 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	; 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e294      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800443a:	4b6c      	ldr	r3, [pc, #432]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0xe8>
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d075      	beq.n	8004542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004456:	4b65      	ldr	r3, [pc, #404]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004460:	4b62      	ldr	r3, [pc, #392]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b0c      	cmp	r3, #12
 800446e:	d102      	bne.n	8004476 <HAL_RCC_OscConfig+0x136>
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d002      	beq.n	800447c <HAL_RCC_OscConfig+0x13c>
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	2b04      	cmp	r3, #4
 800447a:	d11f      	bne.n	80044bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800447c:	4b5b      	ldr	r3, [pc, #364]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_RCC_OscConfig+0x154>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e267      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004494:	4b55      	ldr	r3, [pc, #340]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	061b      	lsls	r3, r3, #24
 80044a2:	4952      	ldr	r1, [pc, #328]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044a8:	4b51      	ldr	r3, [pc, #324]	; (80045f0 <HAL_RCC_OscConfig+0x2b0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fd fc87 	bl	8001dc0 <HAL_InitTick>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d043      	beq.n	8004540 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e253      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d023      	beq.n	800450c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c4:	4b49      	ldr	r3, [pc, #292]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a48      	ldr	r2, [pc, #288]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80044ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fd fdc0 	bl	8002054 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d8:	f7fd fdbc 	bl	8002054 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e23c      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044ea:	4b40      	ldr	r3, [pc, #256]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f6:	4b3d      	ldr	r3, [pc, #244]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	061b      	lsls	r3, r3, #24
 8004504:	4939      	ldr	r1, [pc, #228]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004506:	4313      	orrs	r3, r2
 8004508:	604b      	str	r3, [r1, #4]
 800450a:	e01a      	b.n	8004542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800450c:	4b37      	ldr	r3, [pc, #220]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a36      	ldr	r2, [pc, #216]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004512:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fd fd9c 	bl	8002054 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004520:	f7fd fd98 	bl	8002054 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e218      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004532:	4b2e      	ldr	r3, [pc, #184]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x1e0>
 800453e:	e000      	b.n	8004542 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004540:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d03c      	beq.n	80045c8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01c      	beq.n	8004590 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004556:	4b25      	ldr	r3, [pc, #148]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800455c:	4a23      	ldr	r2, [pc, #140]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004566:	f7fd fd75 	bl	8002054 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800456e:	f7fd fd71 	bl	8002054 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e1f1      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004580:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ef      	beq.n	800456e <HAL_RCC_OscConfig+0x22e>
 800458e:	e01b      	b.n	80045c8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004590:	4b16      	ldr	r3, [pc, #88]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004596:	4a15      	ldr	r2, [pc, #84]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fd fd58 	bl	8002054 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a8:	f7fd fd54 	bl	8002054 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e1d4      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ef      	bne.n	80045a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80ab 	beq.w	800472c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d6:	2300      	movs	r3, #0
 80045d8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045da:	4b04      	ldr	r3, [pc, #16]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_RCC_OscConfig+0x2b4>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e005      	b.n	80045f6 <HAL_RCC_OscConfig+0x2b6>
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000
 80045f0:	20000004 	.word	0x20000004
 80045f4:	2300      	movs	r3, #0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00d      	beq.n	8004616 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fa:	4baf      	ldr	r3, [pc, #700]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80045fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fe:	4aae      	ldr	r2, [pc, #696]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004604:	6593      	str	r3, [r2, #88]	; 0x58
 8004606:	4bac      	ldr	r3, [pc, #688]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004612:	2301      	movs	r3, #1
 8004614:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004616:	4ba9      	ldr	r3, [pc, #676]	; (80048bc <HAL_RCC_OscConfig+0x57c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d118      	bne.n	8004654 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004622:	4ba6      	ldr	r3, [pc, #664]	; (80048bc <HAL_RCC_OscConfig+0x57c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4aa5      	ldr	r2, [pc, #660]	; (80048bc <HAL_RCC_OscConfig+0x57c>)
 8004628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800462e:	f7fd fd11 	bl	8002054 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004636:	f7fd fd0d 	bl	8002054 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e18d      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004648:	4b9c      	ldr	r3, [pc, #624]	; (80048bc <HAL_RCC_OscConfig+0x57c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d108      	bne.n	800466e <HAL_RCC_OscConfig+0x32e>
 800465c:	4b96      	ldr	r3, [pc, #600]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	4a95      	ldr	r2, [pc, #596]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800466c:	e024      	b.n	80046b8 <HAL_RCC_OscConfig+0x378>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b05      	cmp	r3, #5
 8004674:	d110      	bne.n	8004698 <HAL_RCC_OscConfig+0x358>
 8004676:	4b90      	ldr	r3, [pc, #576]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467c:	4a8e      	ldr	r2, [pc, #568]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800467e:	f043 0304 	orr.w	r3, r3, #4
 8004682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004686:	4b8c      	ldr	r3, [pc, #560]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	4a8a      	ldr	r2, [pc, #552]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004696:	e00f      	b.n	80046b8 <HAL_RCC_OscConfig+0x378>
 8004698:	4b87      	ldr	r3, [pc, #540]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469e:	4a86      	ldr	r2, [pc, #536]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046a8:	4b83      	ldr	r3, [pc, #524]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	4a82      	ldr	r2, [pc, #520]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d016      	beq.n	80046ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c0:	f7fd fcc8 	bl	8002054 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c6:	e00a      	b.n	80046de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c8:	f7fd fcc4 	bl	8002054 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e142      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046de:	4b76      	ldr	r3, [pc, #472]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0ed      	beq.n	80046c8 <HAL_RCC_OscConfig+0x388>
 80046ec:	e015      	b.n	800471a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ee:	f7fd fcb1 	bl	8002054 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046f4:	e00a      	b.n	800470c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f6:	f7fd fcad 	bl	8002054 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	f241 3288 	movw	r2, #5000	; 0x1388
 8004704:	4293      	cmp	r3, r2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e12b      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800470c:	4b6a      	ldr	r3, [pc, #424]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1ed      	bne.n	80046f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800471a:	7ffb      	ldrb	r3, [r7, #31]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004720:	4b65      	ldr	r3, [pc, #404]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	4a64      	ldr	r2, [pc, #400]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	d03c      	beq.n	80047b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01c      	beq.n	800477a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004740:	4b5d      	ldr	r3, [pc, #372]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004746:	4a5c      	ldr	r2, [pc, #368]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fd fc80 	bl	8002054 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004758:	f7fd fc7c 	bl	8002054 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e0fc      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800476a:	4b53      	ldr	r3, [pc, #332]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800476c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ef      	beq.n	8004758 <HAL_RCC_OscConfig+0x418>
 8004778:	e01b      	b.n	80047b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800477a:	4b4f      	ldr	r3, [pc, #316]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800477c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004780:	4a4d      	ldr	r2, [pc, #308]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478a:	f7fd fc63 	bl	8002054 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004792:	f7fd fc5f 	bl	8002054 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e0df      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047a4:	4b44      	ldr	r3, [pc, #272]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80047a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1ef      	bne.n	8004792 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80d3 	beq.w	8004962 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047bc:	4b3e      	ldr	r3, [pc, #248]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 030c 	and.w	r3, r3, #12
 80047c4:	2b0c      	cmp	r3, #12
 80047c6:	f000 808d 	beq.w	80048e4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d15a      	bne.n	8004888 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d2:	4b39      	ldr	r3, [pc, #228]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a38      	ldr	r2, [pc, #224]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80047d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047de:	f7fd fc39 	bl	8002054 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e6:	f7fd fc35 	bl	8002054 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e0b5      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f8:	4b2f      	ldr	r3, [pc, #188]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f0      	bne.n	80047e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004804:	4b2c      	ldr	r3, [pc, #176]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	4b2d      	ldr	r3, [pc, #180]	; (80048c0 <HAL_RCC_OscConfig+0x580>)
 800480a:	4013      	ands	r3, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6a11      	ldr	r1, [r2, #32]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004814:	3a01      	subs	r2, #1
 8004816:	0112      	lsls	r2, r2, #4
 8004818:	4311      	orrs	r1, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800481e:	0212      	lsls	r2, r2, #8
 8004820:	4311      	orrs	r1, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004826:	0852      	lsrs	r2, r2, #1
 8004828:	3a01      	subs	r2, #1
 800482a:	0552      	lsls	r2, r2, #21
 800482c:	4311      	orrs	r1, r2
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004832:	0852      	lsrs	r2, r2, #1
 8004834:	3a01      	subs	r2, #1
 8004836:	0652      	lsls	r2, r2, #25
 8004838:	4311      	orrs	r1, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800483e:	06d2      	lsls	r2, r2, #27
 8004840:	430a      	orrs	r2, r1
 8004842:	491d      	ldr	r1, [pc, #116]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004844:	4313      	orrs	r3, r2
 8004846:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004848:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1a      	ldr	r2, [pc, #104]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800484e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004852:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004854:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4a17      	ldr	r2, [pc, #92]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800485a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800485e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fd fbf8 	bl	8002054 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004868:	f7fd fbf4 	bl	8002054 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e074      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800487a:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x528>
 8004886:	e06c      	b.n	8004962 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004888:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800488e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004892:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004894:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4a07      	ldr	r2, [pc, #28]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800489a:	f023 0303 	bic.w	r3, r3, #3
 800489e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80048a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80048aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7fd fbd0 	bl	8002054 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b6:	e00e      	b.n	80048d6 <HAL_RCC_OscConfig+0x596>
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40007000 	.word	0x40007000
 80048c0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fd fbc6 	bl	8002054 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e046      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048d6:	4b25      	ldr	r3, [pc, #148]	; (800496c <HAL_RCC_OscConfig+0x62c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x584>
 80048e2:	e03e      	b.n	8004962 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e039      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80048f0:	4b1e      	ldr	r3, [pc, #120]	; (800496c <HAL_RCC_OscConfig+0x62c>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f003 0203 	and.w	r2, r3, #3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	429a      	cmp	r2, r3
 8004902:	d12c      	bne.n	800495e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	3b01      	subs	r3, #1
 8004910:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d123      	bne.n	800495e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d11b      	bne.n	800495e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d113      	bne.n	800495e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	3b01      	subs	r3, #1
 8004944:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004946:	429a      	cmp	r2, r3
 8004948:	d109      	bne.n	800495e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	3b01      	subs	r3, #1
 8004958:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d001      	beq.n	8004962 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3720      	adds	r7, #32
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000

08004970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e11e      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004988:	4b91      	ldr	r3, [pc, #580]	; (8004bd0 <HAL_RCC_ClockConfig+0x260>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d910      	bls.n	80049b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004996:	4b8e      	ldr	r3, [pc, #568]	; (8004bd0 <HAL_RCC_ClockConfig+0x260>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f023 020f 	bic.w	r2, r3, #15
 800499e:	498c      	ldr	r1, [pc, #560]	; (8004bd0 <HAL_RCC_ClockConfig+0x260>)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a6:	4b8a      	ldr	r3, [pc, #552]	; (8004bd0 <HAL_RCC_ClockConfig+0x260>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e106      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d073      	beq.n	8004aac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	d129      	bne.n	8004a20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049cc:	4b81      	ldr	r3, [pc, #516]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0f4      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80049dc:	f000 f9d0 	bl	8004d80 <RCC_GetSysClockFreqFromPLLSource>
 80049e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4a7c      	ldr	r2, [pc, #496]	; (8004bd8 <HAL_RCC_ClockConfig+0x268>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d93f      	bls.n	8004a6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049ea:	4b7a      	ldr	r3, [pc, #488]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d033      	beq.n	8004a6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d12f      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a0a:	4b72      	ldr	r3, [pc, #456]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a12:	4a70      	ldr	r2, [pc, #448]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e024      	b.n	8004a6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d107      	bne.n	8004a38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a28:	4b6a      	ldr	r3, [pc, #424]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d109      	bne.n	8004a48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0c6      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a38:	4b66      	ldr	r3, [pc, #408]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0be      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a48:	f000 f8ce 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4a61      	ldr	r2, [pc, #388]	; (8004bd8 <HAL_RCC_ClockConfig+0x268>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d909      	bls.n	8004a6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a56:	4b5f      	ldr	r3, [pc, #380]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a5e:	4a5d      	ldr	r2, [pc, #372]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a66:	2380      	movs	r3, #128	; 0x80
 8004a68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a6a:	4b5a      	ldr	r3, [pc, #360]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f023 0203 	bic.w	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	4957      	ldr	r1, [pc, #348]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a7c:	f7fd faea 	bl	8002054 <HAL_GetTick>
 8004a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a82:	e00a      	b.n	8004a9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a84:	f7fd fae6 	bl	8002054 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e095      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9a:	4b4e      	ldr	r3, [pc, #312]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 020c 	and.w	r2, r3, #12
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d1eb      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d023      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ac4:	4b43      	ldr	r3, [pc, #268]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	4a42      	ldr	r2, [pc, #264]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004aca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ace:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004adc:	4b3d      	ldr	r3, [pc, #244]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ae4:	4a3b      	ldr	r2, [pc, #236]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004aea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aec:	4b39      	ldr	r3, [pc, #228]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4936      	ldr	r1, [pc, #216]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d105      	bne.n	8004b12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b06:	4b33      	ldr	r3, [pc, #204]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	4a32      	ldr	r2, [pc, #200]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b12:	4b2f      	ldr	r3, [pc, #188]	; (8004bd0 <HAL_RCC_ClockConfig+0x260>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d21d      	bcs.n	8004b5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b20:	4b2b      	ldr	r3, [pc, #172]	; (8004bd0 <HAL_RCC_ClockConfig+0x260>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f023 020f 	bic.w	r2, r3, #15
 8004b28:	4929      	ldr	r1, [pc, #164]	; (8004bd0 <HAL_RCC_ClockConfig+0x260>)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b30:	f7fd fa90 	bl	8002054 <HAL_GetTick>
 8004b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	e00a      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b38:	f7fd fa8c 	bl	8002054 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e03b      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4e:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <HAL_RCC_ClockConfig+0x260>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d1ed      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b68:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	4917      	ldr	r1, [pc, #92]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b86:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	490f      	ldr	r1, [pc, #60]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b9a:	f000 f825 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8004b9e:	4601      	mov	r1, r0
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	4a0c      	ldr	r2, [pc, #48]	; (8004bdc <HAL_RCC_ClockConfig+0x26c>)
 8004bac:	5cd3      	ldrb	r3, [r2, r3]
 8004bae:	f003 031f 	and.w	r3, r3, #31
 8004bb2:	fa21 f303 	lsr.w	r3, r1, r3
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	; (8004be0 <HAL_RCC_ClockConfig+0x270>)
 8004bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004bba:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <HAL_RCC_ClockConfig+0x274>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fd f8fe 	bl	8001dc0 <HAL_InitTick>
 8004bc4:	4603      	mov	r3, r0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40022000 	.word	0x40022000
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	04c4b400 	.word	0x04c4b400
 8004bdc:	0800aa48 	.word	0x0800aa48
 8004be0:	20000000 	.word	0x20000000
 8004be4:	20000004 	.word	0x20000004

08004be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004bee:	4b2c      	ldr	r3, [pc, #176]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d102      	bne.n	8004c00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bfa:	4b2a      	ldr	r3, [pc, #168]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	e047      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c00:	4b27      	ldr	r3, [pc, #156]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d102      	bne.n	8004c12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c0c:	4b26      	ldr	r3, [pc, #152]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	e03e      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c12:	4b23      	ldr	r3, [pc, #140]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
 8004c1a:	2b0c      	cmp	r3, #12
 8004c1c:	d136      	bne.n	8004c8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	3301      	adds	r3, #1
 8004c34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d10c      	bne.n	8004c56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	4a16      	ldr	r2, [pc, #88]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c46:	68d2      	ldr	r2, [r2, #12]
 8004c48:	0a12      	lsrs	r2, r2, #8
 8004c4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	617b      	str	r3, [r7, #20]
      break;
 8004c54:	e00c      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c56:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5e:	4a10      	ldr	r2, [pc, #64]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c60:	68d2      	ldr	r2, [r2, #12]
 8004c62:	0a12      	lsrs	r2, r2, #8
 8004c64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c68:	fb02 f303 	mul.w	r3, r2, r3
 8004c6c:	617b      	str	r3, [r7, #20]
      break;
 8004c6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	0e5b      	lsrs	r3, r3, #25
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	e001      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c90:	693b      	ldr	r3, [r7, #16]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	00f42400 	.word	0x00f42400
 8004ca8:	016e3600 	.word	0x016e3600

08004cac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb0:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	20000000 	.word	0x20000000

08004cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cc8:	f7ff fff0 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8004ccc:	4601      	mov	r1, r0
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	0a1b      	lsrs	r3, r3, #8
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	4a04      	ldr	r2, [pc, #16]	; (8004cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cda:	5cd3      	ldrb	r3, [r2, r3]
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	0800aa58 	.word	0x0800aa58

08004cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cf4:	f7ff ffda 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8004cf8:	4601      	mov	r1, r0
 8004cfa:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0adb      	lsrs	r3, r3, #11
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4a04      	ldr	r2, [pc, #16]	; (8004d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d06:	5cd3      	ldrb	r3, [r2, r3]
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021000 	.word	0x40021000
 8004d18:	0800aa58 	.word	0x0800aa58

08004d1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	220f      	movs	r2, #15
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004d2c:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <HAL_RCC_GetClockConfig+0x5c>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0203 	and.w	r2, r3, #3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004d38:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <HAL_RCC_GetClockConfig+0x5c>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004d44:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <HAL_RCC_GetClockConfig+0x5c>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004d50:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <HAL_RCC_GetClockConfig+0x5c>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	08db      	lsrs	r3, r3, #3
 8004d56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004d5e:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <HAL_RCC_GetClockConfig+0x60>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 020f 	and.w	r2, r3, #15
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	601a      	str	r2, [r3, #0]
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	40022000 	.word	0x40022000

08004d80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d86:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d90:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d10c      	bne.n	8004dbe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dac:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dae:	68d2      	ldr	r2, [r2, #12]
 8004db0:	0a12      	lsrs	r2, r2, #8
 8004db2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	617b      	str	r3, [r7, #20]
    break;
 8004dbc:	e00c      	b.n	8004dd8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dbe:	4a12      	ldr	r2, [pc, #72]	; (8004e08 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	4a0e      	ldr	r2, [pc, #56]	; (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dc8:	68d2      	ldr	r2, [r2, #12]
 8004dca:	0a12      	lsrs	r2, r2, #8
 8004dcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dd0:	fb02 f303 	mul.w	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]
    break;
 8004dd6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dd8:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	0e5b      	lsrs	r3, r3, #25
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	3301      	adds	r3, #1
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004df2:	687b      	ldr	r3, [r7, #4]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	40021000 	.word	0x40021000
 8004e04:	016e3600 	.word	0x016e3600
 8004e08:	00f42400 	.word	0x00f42400

08004e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e14:	2300      	movs	r3, #0
 8004e16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e18:	2300      	movs	r3, #0
 8004e1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8098 	beq.w	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2e:	4b43      	ldr	r3, [pc, #268]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10d      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	4b40      	ldr	r3, [pc, #256]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3e:	4a3f      	ldr	r2, [pc, #252]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e44:	6593      	str	r3, [r2, #88]	; 0x58
 8004e46:	4b3d      	ldr	r3, [pc, #244]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e52:	2301      	movs	r3, #1
 8004e54:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e56:	4b3a      	ldr	r3, [pc, #232]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a39      	ldr	r2, [pc, #228]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e62:	f7fd f8f7 	bl	8002054 <HAL_GetTick>
 8004e66:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e68:	e009      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6a:	f7fd f8f3 	bl	8002054 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d902      	bls.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	74fb      	strb	r3, [r7, #19]
        break;
 8004e7c:	e005      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e7e:	4b30      	ldr	r3, [pc, #192]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0ef      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e8a:	7cfb      	ldrb	r3, [r7, #19]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d159      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e90:	4b2a      	ldr	r3, [pc, #168]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01e      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d019      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004eac:	4b23      	ldr	r3, [pc, #140]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eb8:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	4a1f      	ldr	r2, [pc, #124]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ec8:	4b1c      	ldr	r3, [pc, #112]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	4a1b      	ldr	r2, [pc, #108]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ed8:	4a18      	ldr	r2, [pc, #96]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eea:	f7fd f8b3 	bl	8002054 <HAL_GetTick>
 8004eee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef0:	e00b      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef2:	f7fd f8af 	bl	8002054 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d902      	bls.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	74fb      	strb	r3, [r7, #19]
            break;
 8004f08:	e006      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f0a:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0ec      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f1e:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2c:	4903      	ldr	r1, [pc, #12]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f34:	e008      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	74bb      	strb	r3, [r7, #18]
 8004f3a:	e005      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f44:	7cfb      	ldrb	r3, [r7, #19]
 8004f46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f48:	7c7b      	ldrb	r3, [r7, #17]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d105      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4e:	4baf      	ldr	r3, [pc, #700]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f52:	4aae      	ldr	r2, [pc, #696]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f66:	4ba9      	ldr	r3, [pc, #676]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6c:	f023 0203 	bic.w	r2, r3, #3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	49a5      	ldr	r1, [pc, #660]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f88:	4ba0      	ldr	r3, [pc, #640]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8e:	f023 020c 	bic.w	r2, r3, #12
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	499d      	ldr	r1, [pc, #628]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004faa:	4b98      	ldr	r3, [pc, #608]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4994      	ldr	r1, [pc, #592]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fcc:	4b8f      	ldr	r3, [pc, #572]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	498c      	ldr	r1, [pc, #560]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fee:	4b87      	ldr	r3, [pc, #540]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	4983      	ldr	r1, [pc, #524]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0320 	and.w	r3, r3, #32
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005010:	4b7e      	ldr	r3, [pc, #504]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	497b      	ldr	r1, [pc, #492]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005032:	4b76      	ldr	r3, [pc, #472]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005038:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	4972      	ldr	r1, [pc, #456]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005054:	4b6d      	ldr	r3, [pc, #436]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	496a      	ldr	r1, [pc, #424]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005076:	4b65      	ldr	r3, [pc, #404]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	4961      	ldr	r1, [pc, #388]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005098:	4b5c      	ldr	r3, [pc, #368]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800509a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800509e:	f023 0203 	bic.w	r2, r3, #3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a6:	4959      	ldr	r1, [pc, #356]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ba:	4b54      	ldr	r3, [pc, #336]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	4950      	ldr	r1, [pc, #320]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d015      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050dc:	4b4b      	ldr	r3, [pc, #300]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	4948      	ldr	r1, [pc, #288]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050fa:	d105      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050fc:	4b43      	ldr	r3, [pc, #268]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4a42      	ldr	r2, [pc, #264]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005106:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005110:	2b00      	cmp	r3, #0
 8005112:	d015      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005114:	4b3d      	ldr	r3, [pc, #244]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005122:	493a      	ldr	r1, [pc, #232]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005132:	d105      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005134:	4b35      	ldr	r3, [pc, #212]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4a34      	ldr	r2, [pc, #208]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800513a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800513e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800514c:	4b2f      	ldr	r3, [pc, #188]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	492c      	ldr	r1, [pc, #176]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800516a:	d105      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800516c:	4b27      	ldr	r3, [pc, #156]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	4a26      	ldr	r2, [pc, #152]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005176:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d015      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005184:	4b21      	ldr	r3, [pc, #132]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	491e      	ldr	r1, [pc, #120]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a2:	d105      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a4:	4b19      	ldr	r3, [pc, #100]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4a18      	ldr	r2, [pc, #96]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d015      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051bc:	4b13      	ldr	r3, [pc, #76]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	4910      	ldr	r1, [pc, #64]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051da:	d105      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051dc:	4b0b      	ldr	r3, [pc, #44]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4a0a      	ldr	r2, [pc, #40]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d018      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	4902      	ldr	r1, [pc, #8]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800520a:	e001      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800520c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005214:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005218:	d105      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800521a:	4b21      	ldr	r3, [pc, #132]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	4a20      	ldr	r2, [pc, #128]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005224:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d015      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005232:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005240:	4917      	ldr	r1, [pc, #92]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005250:	d105      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005252:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800525c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d015      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800526a:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800526c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005270:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005278:	4909      	ldr	r1, [pc, #36]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005284:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005288:	d105      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	4a04      	ldr	r2, [pc, #16]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005294:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005296:	7cbb      	ldrb	r3, [r7, #18]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40021000 	.word	0x40021000

080052a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e049      	b.n	800534a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fc fd3e 	bl	8001d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3304      	adds	r3, #4
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f000 fac6 	bl	8005874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d001      	beq.n	800536c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e04c      	b.n	8005406 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a26      	ldr	r2, [pc, #152]	; (8005414 <HAL_TIM_Base_Start+0xc0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d022      	beq.n	80053c4 <HAL_TIM_Base_Start+0x70>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005386:	d01d      	beq.n	80053c4 <HAL_TIM_Base_Start+0x70>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a22      	ldr	r2, [pc, #136]	; (8005418 <HAL_TIM_Base_Start+0xc4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d018      	beq.n	80053c4 <HAL_TIM_Base_Start+0x70>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a21      	ldr	r2, [pc, #132]	; (800541c <HAL_TIM_Base_Start+0xc8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d013      	beq.n	80053c4 <HAL_TIM_Base_Start+0x70>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <HAL_TIM_Base_Start+0xcc>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00e      	beq.n	80053c4 <HAL_TIM_Base_Start+0x70>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <HAL_TIM_Base_Start+0xd0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d009      	beq.n	80053c4 <HAL_TIM_Base_Start+0x70>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1c      	ldr	r2, [pc, #112]	; (8005428 <HAL_TIM_Base_Start+0xd4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_TIM_Base_Start+0x70>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1b      	ldr	r2, [pc, #108]	; (800542c <HAL_TIM_Base_Start+0xd8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d115      	bne.n	80053f0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	4b19      	ldr	r3, [pc, #100]	; (8005430 <HAL_TIM_Base_Start+0xdc>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b06      	cmp	r3, #6
 80053d4:	d015      	beq.n	8005402 <HAL_TIM_Base_Start+0xae>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053dc:	d011      	beq.n	8005402 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0201 	orr.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ee:	e008      	b.n	8005402 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	e000      	b.n	8005404 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005402:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40012c00 	.word	0x40012c00
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40000c00 	.word	0x40000c00
 8005424:	40013400 	.word	0x40013400
 8005428:	40014000 	.word	0x40014000
 800542c:	40015000 	.word	0x40015000
 8005430:	00010007 	.word	0x00010007

08005434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b01      	cmp	r3, #1
 8005446:	d001      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e054      	b.n	80054f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a26      	ldr	r2, [pc, #152]	; (8005504 <HAL_TIM_Base_Start_IT+0xd0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d022      	beq.n	80054b4 <HAL_TIM_Base_Start_IT+0x80>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005476:	d01d      	beq.n	80054b4 <HAL_TIM_Base_Start_IT+0x80>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a22      	ldr	r2, [pc, #136]	; (8005508 <HAL_TIM_Base_Start_IT+0xd4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d018      	beq.n	80054b4 <HAL_TIM_Base_Start_IT+0x80>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a21      	ldr	r2, [pc, #132]	; (800550c <HAL_TIM_Base_Start_IT+0xd8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d013      	beq.n	80054b4 <HAL_TIM_Base_Start_IT+0x80>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <HAL_TIM_Base_Start_IT+0xdc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00e      	beq.n	80054b4 <HAL_TIM_Base_Start_IT+0x80>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a1e      	ldr	r2, [pc, #120]	; (8005514 <HAL_TIM_Base_Start_IT+0xe0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d009      	beq.n	80054b4 <HAL_TIM_Base_Start_IT+0x80>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1c      	ldr	r2, [pc, #112]	; (8005518 <HAL_TIM_Base_Start_IT+0xe4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d004      	beq.n	80054b4 <HAL_TIM_Base_Start_IT+0x80>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1b      	ldr	r2, [pc, #108]	; (800551c <HAL_TIM_Base_Start_IT+0xe8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d115      	bne.n	80054e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	4b19      	ldr	r3, [pc, #100]	; (8005520 <HAL_TIM_Base_Start_IT+0xec>)
 80054bc:	4013      	ands	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b06      	cmp	r3, #6
 80054c4:	d015      	beq.n	80054f2 <HAL_TIM_Base_Start_IT+0xbe>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054cc:	d011      	beq.n	80054f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0201 	orr.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054de:	e008      	b.n	80054f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	e000      	b.n	80054f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800
 8005510:	40000c00 	.word	0x40000c00
 8005514:	40013400 	.word	0x40013400
 8005518:	40014000 	.word	0x40014000
 800551c:	40015000 	.word	0x40015000
 8005520:	00010007 	.word	0x00010007

08005524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b02      	cmp	r3, #2
 8005538:	d122      	bne.n	8005580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b02      	cmp	r3, #2
 8005546:	d11b      	bne.n	8005580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0202 	mvn.w	r2, #2
 8005550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f965 	bl	8005836 <HAL_TIM_IC_CaptureCallback>
 800556c:	e005      	b.n	800557a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f957 	bl	8005822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f968 	bl	800584a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b04      	cmp	r3, #4
 800558c:	d122      	bne.n	80055d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b04      	cmp	r3, #4
 800559a:	d11b      	bne.n	80055d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0204 	mvn.w	r2, #4
 80055a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2202      	movs	r2, #2
 80055aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f93b 	bl	8005836 <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f92d 	bl	8005822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f93e 	bl	800584a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d122      	bne.n	8005628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d11b      	bne.n	8005628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0208 	mvn.w	r2, #8
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2204      	movs	r2, #4
 80055fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f911 	bl	8005836 <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f903 	bl	8005822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f914 	bl	800584a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0310 	and.w	r3, r3, #16
 8005632:	2b10      	cmp	r3, #16
 8005634:	d122      	bne.n	800567c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b10      	cmp	r3, #16
 8005642:	d11b      	bne.n	800567c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0210 	mvn.w	r2, #16
 800564c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2208      	movs	r2, #8
 8005652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f8e7 	bl	8005836 <HAL_TIM_IC_CaptureCallback>
 8005668:	e005      	b.n	8005676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f8d9 	bl	8005822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f8ea 	bl	800584a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b01      	cmp	r3, #1
 8005688:	d10e      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b01      	cmp	r3, #1
 8005696:	d107      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0201 	mvn.w	r2, #1
 80056a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fc f958 	bl	8001958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b80      	cmp	r3, #128	; 0x80
 80056b4:	d10e      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c0:	2b80      	cmp	r3, #128	; 0x80
 80056c2:	d107      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f982 	bl	80059d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e2:	d10e      	bne.n	8005702 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ee:	2b80      	cmp	r3, #128	; 0x80
 80056f0:	d107      	bne.n	8005702 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f975 	bl	80059ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d10e      	bne.n	800572e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d107      	bne.n	800572e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f898 	bl	800585e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f003 0320 	and.w	r3, r3, #32
 8005738:	2b20      	cmp	r3, #32
 800573a:	d10e      	bne.n	800575a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b20      	cmp	r3, #32
 8005748:	d107      	bne.n	800575a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f06f 0220 	mvn.w	r2, #32
 8005752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f935 	bl	80059c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005768:	d10f      	bne.n	800578a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005778:	d107      	bne.n	800578a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f93b 	bl	8005a00 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005794:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005798:	d10f      	bne.n	80057ba <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057a8:	d107      	bne.n	80057ba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80057b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f92d 	bl	8005a14 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057c8:	d10f      	bne.n	80057ea <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d8:	d107      	bne.n	80057ea <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80057e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f91f 	bl	8005a28 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057f8:	d10f      	bne.n	800581a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005804:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005808:	d107      	bne.n	800581a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f911 	bl	8005a3c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800581a:	bf00      	nop
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
	...

08005874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a46      	ldr	r2, [pc, #280]	; (80059a0 <TIM_Base_SetConfig+0x12c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d017      	beq.n	80058bc <TIM_Base_SetConfig+0x48>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005892:	d013      	beq.n	80058bc <TIM_Base_SetConfig+0x48>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a43      	ldr	r2, [pc, #268]	; (80059a4 <TIM_Base_SetConfig+0x130>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00f      	beq.n	80058bc <TIM_Base_SetConfig+0x48>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a42      	ldr	r2, [pc, #264]	; (80059a8 <TIM_Base_SetConfig+0x134>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00b      	beq.n	80058bc <TIM_Base_SetConfig+0x48>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a41      	ldr	r2, [pc, #260]	; (80059ac <TIM_Base_SetConfig+0x138>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d007      	beq.n	80058bc <TIM_Base_SetConfig+0x48>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a40      	ldr	r2, [pc, #256]	; (80059b0 <TIM_Base_SetConfig+0x13c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <TIM_Base_SetConfig+0x48>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a3f      	ldr	r2, [pc, #252]	; (80059b4 <TIM_Base_SetConfig+0x140>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d108      	bne.n	80058ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a33      	ldr	r2, [pc, #204]	; (80059a0 <TIM_Base_SetConfig+0x12c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d023      	beq.n	800591e <TIM_Base_SetConfig+0xaa>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058dc:	d01f      	beq.n	800591e <TIM_Base_SetConfig+0xaa>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a30      	ldr	r2, [pc, #192]	; (80059a4 <TIM_Base_SetConfig+0x130>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d01b      	beq.n	800591e <TIM_Base_SetConfig+0xaa>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2f      	ldr	r2, [pc, #188]	; (80059a8 <TIM_Base_SetConfig+0x134>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d017      	beq.n	800591e <TIM_Base_SetConfig+0xaa>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2e      	ldr	r2, [pc, #184]	; (80059ac <TIM_Base_SetConfig+0x138>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <TIM_Base_SetConfig+0xaa>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2d      	ldr	r2, [pc, #180]	; (80059b0 <TIM_Base_SetConfig+0x13c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00f      	beq.n	800591e <TIM_Base_SetConfig+0xaa>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2d      	ldr	r2, [pc, #180]	; (80059b8 <TIM_Base_SetConfig+0x144>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00b      	beq.n	800591e <TIM_Base_SetConfig+0xaa>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2c      	ldr	r2, [pc, #176]	; (80059bc <TIM_Base_SetConfig+0x148>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d007      	beq.n	800591e <TIM_Base_SetConfig+0xaa>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a2b      	ldr	r2, [pc, #172]	; (80059c0 <TIM_Base_SetConfig+0x14c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_Base_SetConfig+0xaa>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a26      	ldr	r2, [pc, #152]	; (80059b4 <TIM_Base_SetConfig+0x140>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d108      	bne.n	8005930 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a12      	ldr	r2, [pc, #72]	; (80059a0 <TIM_Base_SetConfig+0x12c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d013      	beq.n	8005984 <TIM_Base_SetConfig+0x110>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a14      	ldr	r2, [pc, #80]	; (80059b0 <TIM_Base_SetConfig+0x13c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00f      	beq.n	8005984 <TIM_Base_SetConfig+0x110>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a14      	ldr	r2, [pc, #80]	; (80059b8 <TIM_Base_SetConfig+0x144>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00b      	beq.n	8005984 <TIM_Base_SetConfig+0x110>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a13      	ldr	r2, [pc, #76]	; (80059bc <TIM_Base_SetConfig+0x148>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d007      	beq.n	8005984 <TIM_Base_SetConfig+0x110>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a12      	ldr	r2, [pc, #72]	; (80059c0 <TIM_Base_SetConfig+0x14c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_Base_SetConfig+0x110>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a0d      	ldr	r2, [pc, #52]	; (80059b4 <TIM_Base_SetConfig+0x140>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d103      	bne.n	800598c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	615a      	str	r2, [r3, #20]
}
 8005992:	bf00      	nop
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40000c00 	.word	0x40000c00
 80059b0:	40013400 	.word	0x40013400
 80059b4:	40015000 	.word	0x40015000
 80059b8:	40014000 	.word	0x40014000
 80059bc:	40014400 	.word	0x40014400
 80059c0:	40014800 	.word	0x40014800

080059c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e042      	b.n	8005ae8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d106      	bne.n	8005a7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fc f927 	bl	8001cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2224      	movs	r2, #36	; 0x24
 8005a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0201 	bic.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f8c2 	bl	8005c1c <UART_SetConfig>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e022      	b.n	8005ae8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fb88 	bl	80061c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ace:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fc0f 	bl	8006304 <UART_CheckIdleState>
 8005ae6:	4603      	mov	r3, r0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	; 0x28
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	603b      	str	r3, [r7, #0]
 8005afc:	4613      	mov	r3, r2
 8005afe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	f040 8083 	bne.w	8005c12 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_UART_Transmit+0x28>
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e07b      	b.n	8005c14 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_UART_Transmit+0x3a>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e074      	b.n	8005c14 <HAL_UART_Transmit+0x124>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2221      	movs	r2, #33	; 0x21
 8005b3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b42:	f7fc fa87 	bl	8002054 <HAL_GetTick>
 8005b46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	88fa      	ldrh	r2, [r7, #6]
 8005b4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	88fa      	ldrh	r2, [r7, #6]
 8005b54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b60:	d108      	bne.n	8005b74 <HAL_UART_Transmit+0x84>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d104      	bne.n	8005b74 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	e003      	b.n	8005b7c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005b84:	e02c      	b.n	8005be0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2180      	movs	r1, #128	; 0x80
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 fbff 	bl	8006394 <UART_WaitOnFlagUntilTimeout>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e039      	b.n	8005c14 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10b      	bne.n	8005bbe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	3302      	adds	r3, #2
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	e007      	b.n	8005bce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	781a      	ldrb	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1cc      	bne.n	8005b86 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	2140      	movs	r1, #64	; 0x40
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 fbcc 	bl	8006394 <UART_WaitOnFlagUntilTimeout>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e006      	b.n	8005c14 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e000      	b.n	8005c14 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005c12:	2302      	movs	r3, #2
  }
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3720      	adds	r7, #32
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c1c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005c20:	b088      	sub	sp, #32
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4bb1      	ldr	r3, [pc, #708]	; (8005f18 <UART_SetConfig+0x2fc>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	69f9      	ldr	r1, [r7, #28]
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4aa6      	ldr	r2, [pc, #664]	; (8005f1c <UART_SetConfig+0x300>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d004      	beq.n	8005c90 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c9a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	69f9      	ldr	r1, [r7, #28]
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	f023 010f 	bic.w	r1, r3, #15
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a97      	ldr	r2, [pc, #604]	; (8005f20 <UART_SetConfig+0x304>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d121      	bne.n	8005d0c <UART_SetConfig+0xf0>
 8005cc8:	4b96      	ldr	r3, [pc, #600]	; (8005f24 <UART_SetConfig+0x308>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d816      	bhi.n	8005d04 <UART_SetConfig+0xe8>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <UART_SetConfig+0xc0>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005ced 	.word	0x08005ced
 8005ce0:	08005cf9 	.word	0x08005cf9
 8005ce4:	08005cf3 	.word	0x08005cf3
 8005ce8:	08005cff 	.word	0x08005cff
 8005cec:	2301      	movs	r3, #1
 8005cee:	76fb      	strb	r3, [r7, #27]
 8005cf0:	e0e8      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	76fb      	strb	r3, [r7, #27]
 8005cf6:	e0e5      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	76fb      	strb	r3, [r7, #27]
 8005cfc:	e0e2      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005cfe:	2308      	movs	r3, #8
 8005d00:	76fb      	strb	r3, [r7, #27]
 8005d02:	e0df      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005d04:	2310      	movs	r3, #16
 8005d06:	76fb      	strb	r3, [r7, #27]
 8005d08:	bf00      	nop
 8005d0a:	e0db      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a85      	ldr	r2, [pc, #532]	; (8005f28 <UART_SetConfig+0x30c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d134      	bne.n	8005d80 <UART_SetConfig+0x164>
 8005d16:	4b83      	ldr	r3, [pc, #524]	; (8005f24 <UART_SetConfig+0x308>)
 8005d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1c:	f003 030c 	and.w	r3, r3, #12
 8005d20:	2b0c      	cmp	r3, #12
 8005d22:	d829      	bhi.n	8005d78 <UART_SetConfig+0x15c>
 8005d24:	a201      	add	r2, pc, #4	; (adr r2, 8005d2c <UART_SetConfig+0x110>)
 8005d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2a:	bf00      	nop
 8005d2c:	08005d61 	.word	0x08005d61
 8005d30:	08005d79 	.word	0x08005d79
 8005d34:	08005d79 	.word	0x08005d79
 8005d38:	08005d79 	.word	0x08005d79
 8005d3c:	08005d6d 	.word	0x08005d6d
 8005d40:	08005d79 	.word	0x08005d79
 8005d44:	08005d79 	.word	0x08005d79
 8005d48:	08005d79 	.word	0x08005d79
 8005d4c:	08005d67 	.word	0x08005d67
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d79 	.word	0x08005d79
 8005d58:	08005d79 	.word	0x08005d79
 8005d5c:	08005d73 	.word	0x08005d73
 8005d60:	2300      	movs	r3, #0
 8005d62:	76fb      	strb	r3, [r7, #27]
 8005d64:	e0ae      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005d66:	2302      	movs	r3, #2
 8005d68:	76fb      	strb	r3, [r7, #27]
 8005d6a:	e0ab      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	76fb      	strb	r3, [r7, #27]
 8005d70:	e0a8      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005d72:	2308      	movs	r3, #8
 8005d74:	76fb      	strb	r3, [r7, #27]
 8005d76:	e0a5      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	76fb      	strb	r3, [r7, #27]
 8005d7c:	bf00      	nop
 8005d7e:	e0a1      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a69      	ldr	r2, [pc, #420]	; (8005f2c <UART_SetConfig+0x310>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d120      	bne.n	8005dcc <UART_SetConfig+0x1b0>
 8005d8a:	4b66      	ldr	r3, [pc, #408]	; (8005f24 <UART_SetConfig+0x308>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d94:	2b10      	cmp	r3, #16
 8005d96:	d00f      	beq.n	8005db8 <UART_SetConfig+0x19c>
 8005d98:	2b10      	cmp	r3, #16
 8005d9a:	d802      	bhi.n	8005da2 <UART_SetConfig+0x186>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <UART_SetConfig+0x190>
 8005da0:	e010      	b.n	8005dc4 <UART_SetConfig+0x1a8>
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	d005      	beq.n	8005db2 <UART_SetConfig+0x196>
 8005da6:	2b30      	cmp	r3, #48	; 0x30
 8005da8:	d009      	beq.n	8005dbe <UART_SetConfig+0x1a2>
 8005daa:	e00b      	b.n	8005dc4 <UART_SetConfig+0x1a8>
 8005dac:	2300      	movs	r3, #0
 8005dae:	76fb      	strb	r3, [r7, #27]
 8005db0:	e088      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005db2:	2302      	movs	r3, #2
 8005db4:	76fb      	strb	r3, [r7, #27]
 8005db6:	e085      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005db8:	2304      	movs	r3, #4
 8005dba:	76fb      	strb	r3, [r7, #27]
 8005dbc:	e082      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	76fb      	strb	r3, [r7, #27]
 8005dc2:	e07f      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005dc4:	2310      	movs	r3, #16
 8005dc6:	76fb      	strb	r3, [r7, #27]
 8005dc8:	bf00      	nop
 8005dca:	e07b      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a57      	ldr	r2, [pc, #348]	; (8005f30 <UART_SetConfig+0x314>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d120      	bne.n	8005e18 <UART_SetConfig+0x1fc>
 8005dd6:	4b53      	ldr	r3, [pc, #332]	; (8005f24 <UART_SetConfig+0x308>)
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ddc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005de0:	2b40      	cmp	r3, #64	; 0x40
 8005de2:	d00f      	beq.n	8005e04 <UART_SetConfig+0x1e8>
 8005de4:	2b40      	cmp	r3, #64	; 0x40
 8005de6:	d802      	bhi.n	8005dee <UART_SetConfig+0x1d2>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d005      	beq.n	8005df8 <UART_SetConfig+0x1dc>
 8005dec:	e010      	b.n	8005e10 <UART_SetConfig+0x1f4>
 8005dee:	2b80      	cmp	r3, #128	; 0x80
 8005df0:	d005      	beq.n	8005dfe <UART_SetConfig+0x1e2>
 8005df2:	2bc0      	cmp	r3, #192	; 0xc0
 8005df4:	d009      	beq.n	8005e0a <UART_SetConfig+0x1ee>
 8005df6:	e00b      	b.n	8005e10 <UART_SetConfig+0x1f4>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	76fb      	strb	r3, [r7, #27]
 8005dfc:	e062      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	76fb      	strb	r3, [r7, #27]
 8005e02:	e05f      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005e04:	2304      	movs	r3, #4
 8005e06:	76fb      	strb	r3, [r7, #27]
 8005e08:	e05c      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005e0a:	2308      	movs	r3, #8
 8005e0c:	76fb      	strb	r3, [r7, #27]
 8005e0e:	e059      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005e10:	2310      	movs	r3, #16
 8005e12:	76fb      	strb	r3, [r7, #27]
 8005e14:	bf00      	nop
 8005e16:	e055      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a45      	ldr	r2, [pc, #276]	; (8005f34 <UART_SetConfig+0x318>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d124      	bne.n	8005e6c <UART_SetConfig+0x250>
 8005e22:	4b40      	ldr	r3, [pc, #256]	; (8005f24 <UART_SetConfig+0x308>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e30:	d012      	beq.n	8005e58 <UART_SetConfig+0x23c>
 8005e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e36:	d802      	bhi.n	8005e3e <UART_SetConfig+0x222>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d007      	beq.n	8005e4c <UART_SetConfig+0x230>
 8005e3c:	e012      	b.n	8005e64 <UART_SetConfig+0x248>
 8005e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e42:	d006      	beq.n	8005e52 <UART_SetConfig+0x236>
 8005e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e48:	d009      	beq.n	8005e5e <UART_SetConfig+0x242>
 8005e4a:	e00b      	b.n	8005e64 <UART_SetConfig+0x248>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	76fb      	strb	r3, [r7, #27]
 8005e50:	e038      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005e52:	2302      	movs	r3, #2
 8005e54:	76fb      	strb	r3, [r7, #27]
 8005e56:	e035      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	76fb      	strb	r3, [r7, #27]
 8005e5c:	e032      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005e5e:	2308      	movs	r3, #8
 8005e60:	76fb      	strb	r3, [r7, #27]
 8005e62:	e02f      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005e64:	2310      	movs	r3, #16
 8005e66:	76fb      	strb	r3, [r7, #27]
 8005e68:	bf00      	nop
 8005e6a:	e02b      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a2a      	ldr	r2, [pc, #168]	; (8005f1c <UART_SetConfig+0x300>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d124      	bne.n	8005ec0 <UART_SetConfig+0x2a4>
 8005e76:	4b2b      	ldr	r3, [pc, #172]	; (8005f24 <UART_SetConfig+0x308>)
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e84:	d012      	beq.n	8005eac <UART_SetConfig+0x290>
 8005e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8a:	d802      	bhi.n	8005e92 <UART_SetConfig+0x276>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d007      	beq.n	8005ea0 <UART_SetConfig+0x284>
 8005e90:	e012      	b.n	8005eb8 <UART_SetConfig+0x29c>
 8005e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e96:	d006      	beq.n	8005ea6 <UART_SetConfig+0x28a>
 8005e98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e9c:	d009      	beq.n	8005eb2 <UART_SetConfig+0x296>
 8005e9e:	e00b      	b.n	8005eb8 <UART_SetConfig+0x29c>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	76fb      	strb	r3, [r7, #27]
 8005ea4:	e00e      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	76fb      	strb	r3, [r7, #27]
 8005eaa:	e00b      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005eac:	2304      	movs	r3, #4
 8005eae:	76fb      	strb	r3, [r7, #27]
 8005eb0:	e008      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	76fb      	strb	r3, [r7, #27]
 8005eb6:	e005      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	76fb      	strb	r3, [r7, #27]
 8005ebc:	bf00      	nop
 8005ebe:	e001      	b.n	8005ec4 <UART_SetConfig+0x2a8>
 8005ec0:	2310      	movs	r3, #16
 8005ec2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a14      	ldr	r2, [pc, #80]	; (8005f1c <UART_SetConfig+0x300>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	f040 80a1 	bne.w	8006012 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ed0:	7efb      	ldrb	r3, [r7, #27]
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d836      	bhi.n	8005f44 <UART_SetConfig+0x328>
 8005ed6:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <UART_SetConfig+0x2c0>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005f01 	.word	0x08005f01
 8005ee0:	08005f45 	.word	0x08005f45
 8005ee4:	08005f09 	.word	0x08005f09
 8005ee8:	08005f45 	.word	0x08005f45
 8005eec:	08005f0f 	.word	0x08005f0f
 8005ef0:	08005f45 	.word	0x08005f45
 8005ef4:	08005f45 	.word	0x08005f45
 8005ef8:	08005f45 	.word	0x08005f45
 8005efc:	08005f3d 	.word	0x08005f3d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f00:	f7fe fee0 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 8005f04:	6178      	str	r0, [r7, #20]
        break;
 8005f06:	e022      	b.n	8005f4e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <UART_SetConfig+0x31c>)
 8005f0a:	617b      	str	r3, [r7, #20]
        break;
 8005f0c:	e01f      	b.n	8005f4e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f0e:	f7fe fe6b 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8005f12:	6178      	str	r0, [r7, #20]
        break;
 8005f14:	e01b      	b.n	8005f4e <UART_SetConfig+0x332>
 8005f16:	bf00      	nop
 8005f18:	cfff69f3 	.word	0xcfff69f3
 8005f1c:	40008000 	.word	0x40008000
 8005f20:	40013800 	.word	0x40013800
 8005f24:	40021000 	.word	0x40021000
 8005f28:	40004400 	.word	0x40004400
 8005f2c:	40004800 	.word	0x40004800
 8005f30:	40004c00 	.word	0x40004c00
 8005f34:	40005000 	.word	0x40005000
 8005f38:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f40:	617b      	str	r3, [r7, #20]
        break;
 8005f42:	e004      	b.n	8005f4e <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	76bb      	strb	r3, [r7, #26]
        break;
 8005f4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 811d 	beq.w	8006190 <UART_SetConfig+0x574>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	4a97      	ldr	r2, [pc, #604]	; (80061b8 <UART_SetConfig+0x59c>)
 8005f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f60:	461a      	mov	r2, r3
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f68:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	4413      	add	r3, r2
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d305      	bcc.n	8005f86 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d902      	bls.n	8005f8c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	76bb      	strb	r3, [r7, #26]
 8005f8a:	e101      	b.n	8006190 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f04f 0100 	mov.w	r1, #0
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	4a87      	ldr	r2, [pc, #540]	; (80061b8 <UART_SetConfig+0x59c>)
 8005f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	f04f 0400 	mov.w	r4, #0
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	f7fa fdb0 	bl	8000b0c <__aeabi_uldivmod>
 8005fac:	4603      	mov	r3, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	f04f 0300 	mov.w	r3, #0
 8005fb8:	f04f 0400 	mov.w	r4, #0
 8005fbc:	0214      	lsls	r4, r2, #8
 8005fbe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005fc2:	020b      	lsls	r3, r1, #8
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6852      	ldr	r2, [r2, #4]
 8005fc8:	0852      	lsrs	r2, r2, #1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	eb13 0b01 	adds.w	fp, r3, r1
 8005fd4:	eb44 0c02 	adc.w	ip, r4, r2
 8005fd8:	4658      	mov	r0, fp
 8005fda:	4661      	mov	r1, ip
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f04f 0400 	mov.w	r4, #0
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4623      	mov	r3, r4
 8005fe8:	f7fa fd90 	bl	8000b0c <__aeabi_uldivmod>
 8005fec:	4603      	mov	r3, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff8:	d308      	bcc.n	800600c <UART_SetConfig+0x3f0>
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006000:	d204      	bcs.n	800600c <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	60da      	str	r2, [r3, #12]
 800600a:	e0c1      	b.n	8006190 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	76bb      	strb	r3, [r7, #26]
 8006010:	e0be      	b.n	8006190 <UART_SetConfig+0x574>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800601a:	d164      	bne.n	80060e6 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 800601c:	7efb      	ldrb	r3, [r7, #27]
 800601e:	2b08      	cmp	r3, #8
 8006020:	d827      	bhi.n	8006072 <UART_SetConfig+0x456>
 8006022:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <UART_SetConfig+0x40c>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	0800604d 	.word	0x0800604d
 800602c:	08006055 	.word	0x08006055
 8006030:	0800605d 	.word	0x0800605d
 8006034:	08006073 	.word	0x08006073
 8006038:	08006063 	.word	0x08006063
 800603c:	08006073 	.word	0x08006073
 8006040:	08006073 	.word	0x08006073
 8006044:	08006073 	.word	0x08006073
 8006048:	0800606b 	.word	0x0800606b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800604c:	f7fe fe3a 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 8006050:	6178      	str	r0, [r7, #20]
        break;
 8006052:	e013      	b.n	800607c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006054:	f7fe fe4c 	bl	8004cf0 <HAL_RCC_GetPCLK2Freq>
 8006058:	6178      	str	r0, [r7, #20]
        break;
 800605a:	e00f      	b.n	800607c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800605c:	4b57      	ldr	r3, [pc, #348]	; (80061bc <UART_SetConfig+0x5a0>)
 800605e:	617b      	str	r3, [r7, #20]
        break;
 8006060:	e00c      	b.n	800607c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006062:	f7fe fdc1 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8006066:	6178      	str	r0, [r7, #20]
        break;
 8006068:	e008      	b.n	800607c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800606a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800606e:	617b      	str	r3, [r7, #20]
        break;
 8006070:	e004      	b.n	800607c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	76bb      	strb	r3, [r7, #26]
        break;
 800607a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 8086 	beq.w	8006190 <UART_SetConfig+0x574>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	4a4b      	ldr	r2, [pc, #300]	; (80061b8 <UART_SetConfig+0x59c>)
 800608a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800608e:	461a      	mov	r2, r3
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	fbb3 f3f2 	udiv	r3, r3, r2
 8006096:	005a      	lsls	r2, r3, #1
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	085b      	lsrs	r3, r3, #1
 800609e:	441a      	add	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b0f      	cmp	r3, #15
 80060b0:	d916      	bls.n	80060e0 <UART_SetConfig+0x4c4>
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b8:	d212      	bcs.n	80060e0 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f023 030f 	bic.w	r3, r3, #15
 80060c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	89fb      	ldrh	r3, [r7, #14]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	89fa      	ldrh	r2, [r7, #14]
 80060dc:	60da      	str	r2, [r3, #12]
 80060de:	e057      	b.n	8006190 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	76bb      	strb	r3, [r7, #26]
 80060e4:	e054      	b.n	8006190 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060e6:	7efb      	ldrb	r3, [r7, #27]
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d828      	bhi.n	800613e <UART_SetConfig+0x522>
 80060ec:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <UART_SetConfig+0x4d8>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	08006119 	.word	0x08006119
 80060f8:	08006121 	.word	0x08006121
 80060fc:	08006129 	.word	0x08006129
 8006100:	0800613f 	.word	0x0800613f
 8006104:	0800612f 	.word	0x0800612f
 8006108:	0800613f 	.word	0x0800613f
 800610c:	0800613f 	.word	0x0800613f
 8006110:	0800613f 	.word	0x0800613f
 8006114:	08006137 	.word	0x08006137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006118:	f7fe fdd4 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 800611c:	6178      	str	r0, [r7, #20]
        break;
 800611e:	e013      	b.n	8006148 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006120:	f7fe fde6 	bl	8004cf0 <HAL_RCC_GetPCLK2Freq>
 8006124:	6178      	str	r0, [r7, #20]
        break;
 8006126:	e00f      	b.n	8006148 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006128:	4b24      	ldr	r3, [pc, #144]	; (80061bc <UART_SetConfig+0x5a0>)
 800612a:	617b      	str	r3, [r7, #20]
        break;
 800612c:	e00c      	b.n	8006148 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800612e:	f7fe fd5b 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8006132:	6178      	str	r0, [r7, #20]
        break;
 8006134:	e008      	b.n	8006148 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800613a:	617b      	str	r3, [r7, #20]
        break;
 800613c:	e004      	b.n	8006148 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	76bb      	strb	r3, [r7, #26]
        break;
 8006146:	bf00      	nop
    }

    if (pclk != 0U)
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d020      	beq.n	8006190 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	4a19      	ldr	r2, [pc, #100]	; (80061b8 <UART_SetConfig+0x59c>)
 8006154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006158:	461a      	mov	r2, r3
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	085b      	lsrs	r3, r3, #1
 8006166:	441a      	add	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006170:	b29b      	uxth	r3, r3
 8006172:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	2b0f      	cmp	r3, #15
 8006178:	d908      	bls.n	800618c <UART_SetConfig+0x570>
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006180:	d204      	bcs.n	800618c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	e001      	b.n	8006190 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80061ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3720      	adds	r7, #32
 80061b2:	46bd      	mov	sp, r7
 80061b4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80061b8:	0800aa60 	.word	0x0800aa60
 80061bc:	00f42400 	.word	0x00f42400

080061c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d01a      	beq.n	80062d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062be:	d10a      	bne.n	80062d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	605a      	str	r2, [r3, #4]
  }
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af02      	add	r7, sp, #8
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006314:	f7fb fe9e 	bl	8002054 <HAL_GetTick>
 8006318:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0308 	and.w	r3, r3, #8
 8006324:	2b08      	cmp	r3, #8
 8006326:	d10e      	bne.n	8006346 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f82c 	bl	8006394 <UART_WaitOnFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e022      	b.n	800638c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b04      	cmp	r3, #4
 8006352:	d10e      	bne.n	8006372 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f816 	bl	8006394 <UART_WaitOnFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e00c      	b.n	800638c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2220      	movs	r2, #32
 8006376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	4613      	mov	r3, r2
 80063a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a4:	e062      	b.n	800646c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ac:	d05e      	beq.n	800646c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ae:	f7fb fe51 	bl	8002054 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d302      	bcc.n	80063c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d11d      	bne.n	8006400 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063d2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0201 	bic.w	r2, r2, #1
 80063e2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e045      	b.n	800648c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0304 	and.w	r3, r3, #4
 800640a:	2b00      	cmp	r3, #0
 800640c:	d02e      	beq.n	800646c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800641c:	d126      	bne.n	800646c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006426:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006436:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0201 	bic.w	r2, r2, #1
 8006446:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2220      	movs	r2, #32
 8006454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e00f      	b.n	800648c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69da      	ldr	r2, [r3, #28]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4013      	ands	r3, r2
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	429a      	cmp	r2, r3
 800647a:	bf0c      	ite	eq
 800647c:	2301      	moveq	r3, #1
 800647e:	2300      	movne	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	429a      	cmp	r2, r3
 8006488:	d08d      	beq.n	80063a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <HAL_UARTEx_DisableFifoMode+0x16>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e027      	b.n	80064fa <HAL_UARTEx_DisableFifoMode+0x66>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2224      	movs	r2, #36	; 0x24
 80064b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0201 	bic.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800651a:	2302      	movs	r3, #2
 800651c:	e02d      	b.n	800657a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2224      	movs	r2, #36	; 0x24
 800652a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0201 	bic.w	r2, r2, #1
 8006544:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f850 	bl	8006600 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006596:	2302      	movs	r3, #2
 8006598:	e02d      	b.n	80065f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2224      	movs	r2, #36	; 0x24
 80065a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0201 	bic.w	r2, r2, #1
 80065c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f812 	bl	8006600 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006600:	b480      	push	{r7}
 8006602:	b089      	sub	sp, #36	; 0x24
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006608:	4a2f      	ldr	r2, [pc, #188]	; (80066c8 <UARTEx_SetNbDataToProcess+0xc8>)
 800660a:	f107 0314 	add.w	r3, r7, #20
 800660e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006612:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006616:	4a2d      	ldr	r2, [pc, #180]	; (80066cc <UARTEx_SetNbDataToProcess+0xcc>)
 8006618:	f107 030c 	add.w	r3, r7, #12
 800661c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006620:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006628:	2b00      	cmp	r3, #0
 800662a:	d108      	bne.n	800663e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800663c:	e03d      	b.n	80066ba <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800663e:	2308      	movs	r3, #8
 8006640:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006642:	2308      	movs	r3, #8
 8006644:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	0e5b      	lsrs	r3, r3, #25
 800664e:	b2db      	uxtb	r3, r3
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	0f5b      	lsrs	r3, r3, #29
 800665e:	b2db      	uxtb	r3, r3
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006666:	7fbb      	ldrb	r3, [r7, #30]
 8006668:	7f3a      	ldrb	r2, [r7, #28]
 800666a:	f107 0120 	add.w	r1, r7, #32
 800666e:	440a      	add	r2, r1
 8006670:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006674:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006678:	7f3a      	ldrb	r2, [r7, #28]
 800667a:	f107 0120 	add.w	r1, r7, #32
 800667e:	440a      	add	r2, r1
 8006680:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006684:	fb93 f3f2 	sdiv	r3, r3, r2
 8006688:	b29a      	uxth	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006690:	7ffb      	ldrb	r3, [r7, #31]
 8006692:	7f7a      	ldrb	r2, [r7, #29]
 8006694:	f107 0120 	add.w	r1, r7, #32
 8006698:	440a      	add	r2, r1
 800669a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800669e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066a2:	7f7a      	ldrb	r2, [r7, #29]
 80066a4:	f107 0120 	add.w	r1, r7, #32
 80066a8:	440a      	add	r2, r1
 80066aa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80066ba:	bf00      	nop
 80066bc:	3724      	adds	r7, #36	; 0x24
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	0800a96c 	.word	0x0800a96c
 80066cc:	0800a974 	.word	0x0800a974

080066d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80066d0:	b480      	push	{r7}
 80066d2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80066d4:	bf00      	nop
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
	...

080066e0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066e6:	f3ef 8305 	mrs	r3, IPSR
 80066ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80066ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10f      	bne.n	8006712 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066f2:	f3ef 8310 	mrs	r3, PRIMASK
 80066f6:	607b      	str	r3, [r7, #4]
  return(result);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d105      	bne.n	800670a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006702:	603b      	str	r3, [r7, #0]
  return(result);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d007      	beq.n	800671a <osKernelInitialize+0x3a>
 800670a:	4b0e      	ldr	r3, [pc, #56]	; (8006744 <osKernelInitialize+0x64>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d103      	bne.n	800671a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006712:	f06f 0305 	mvn.w	r3, #5
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	e00c      	b.n	8006734 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800671a:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <osKernelInitialize+0x64>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d105      	bne.n	800672e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006722:	4b08      	ldr	r3, [pc, #32]	; (8006744 <osKernelInitialize+0x64>)
 8006724:	2201      	movs	r2, #1
 8006726:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	e002      	b.n	8006734 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800672e:	f04f 33ff 	mov.w	r3, #4294967295
 8006732:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006734:	68fb      	ldr	r3, [r7, #12]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20000094 	.word	0x20000094

08006748 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800674e:	f3ef 8305 	mrs	r3, IPSR
 8006752:	60bb      	str	r3, [r7, #8]
  return(result);
 8006754:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10f      	bne.n	800677a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800675a:	f3ef 8310 	mrs	r3, PRIMASK
 800675e:	607b      	str	r3, [r7, #4]
  return(result);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d105      	bne.n	8006772 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006766:	f3ef 8311 	mrs	r3, BASEPRI
 800676a:	603b      	str	r3, [r7, #0]
  return(result);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <osKernelStart+0x3a>
 8006772:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <osKernelStart+0x68>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d103      	bne.n	8006782 <osKernelStart+0x3a>
    stat = osErrorISR;
 800677a:	f06f 0305 	mvn.w	r3, #5
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	e010      	b.n	80067a4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006782:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <osKernelStart+0x68>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d109      	bne.n	800679e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800678a:	f7ff ffa1 	bl	80066d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800678e:	4b08      	ldr	r3, [pc, #32]	; (80067b0 <osKernelStart+0x68>)
 8006790:	2202      	movs	r2, #2
 8006792:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006794:	f001 fe92 	bl	80084bc <vTaskStartScheduler>
      stat = osOK;
 8006798:	2300      	movs	r3, #0
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	e002      	b.n	80067a4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800679e:	f04f 33ff 	mov.w	r3, #4294967295
 80067a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80067a4:	68fb      	ldr	r3, [r7, #12]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20000094 	.word	0x20000094

080067b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b090      	sub	sp, #64	; 0x40
 80067b8:	af04      	add	r7, sp, #16
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067c4:	f3ef 8305 	mrs	r3, IPSR
 80067c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80067ca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f040 808f 	bne.w	80068f0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d2:	f3ef 8310 	mrs	r3, PRIMASK
 80067d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d105      	bne.n	80067ea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067de:	f3ef 8311 	mrs	r3, BASEPRI
 80067e2:	617b      	str	r3, [r7, #20]
  return(result);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <osThreadNew+0x3e>
 80067ea:	4b44      	ldr	r3, [pc, #272]	; (80068fc <osThreadNew+0x148>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d07e      	beq.n	80068f0 <osThreadNew+0x13c>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d07b      	beq.n	80068f0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80067f8:	2380      	movs	r3, #128	; 0x80
 80067fa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80067fc:	2318      	movs	r3, #24
 80067fe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006800:	2300      	movs	r3, #0
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006804:	f04f 33ff 	mov.w	r3, #4294967295
 8006808:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d045      	beq.n	800689c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <osThreadNew+0x6a>
        name = attr->name;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	2b00      	cmp	r3, #0
 8006830:	d008      	beq.n	8006844 <osThreadNew+0x90>
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	2b38      	cmp	r3, #56	; 0x38
 8006836:	d805      	bhi.n	8006844 <osThreadNew+0x90>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <osThreadNew+0x94>
        return (NULL);
 8006844:	2300      	movs	r3, #0
 8006846:	e054      	b.n	80068f2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	089b      	lsrs	r3, r3, #2
 8006856:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00e      	beq.n	800687e <osThreadNew+0xca>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b6b      	cmp	r3, #107	; 0x6b
 8006866:	d90a      	bls.n	800687e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800686c:	2b00      	cmp	r3, #0
 800686e:	d006      	beq.n	800687e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <osThreadNew+0xca>
        mem = 1;
 8006878:	2301      	movs	r3, #1
 800687a:	623b      	str	r3, [r7, #32]
 800687c:	e010      	b.n	80068a0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10c      	bne.n	80068a0 <osThreadNew+0xec>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d108      	bne.n	80068a0 <osThreadNew+0xec>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d104      	bne.n	80068a0 <osThreadNew+0xec>
          mem = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	623b      	str	r3, [r7, #32]
 800689a:	e001      	b.n	80068a0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d110      	bne.n	80068c8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068ae:	9202      	str	r2, [sp, #8]
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f001 fc2b 	bl	8008118 <xTaskCreateStatic>
 80068c2:	4603      	mov	r3, r0
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	e013      	b.n	80068f0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d110      	bne.n	80068f0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	f107 0310 	add.w	r3, r7, #16
 80068d6:	9301      	str	r3, [sp, #4]
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f001 fc73 	bl	80081cc <xTaskCreate>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d001      	beq.n	80068f0 <osThreadNew+0x13c>
          hTask = NULL;
 80068ec:	2300      	movs	r3, #0
 80068ee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80068f0:	693b      	ldr	r3, [r7, #16]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3730      	adds	r7, #48	; 0x30
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000094 	.word	0x20000094

08006900 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006908:	f3ef 8305 	mrs	r3, IPSR
 800690c:	613b      	str	r3, [r7, #16]
  return(result);
 800690e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10f      	bne.n	8006934 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006914:	f3ef 8310 	mrs	r3, PRIMASK
 8006918:	60fb      	str	r3, [r7, #12]
  return(result);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d105      	bne.n	800692c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006920:	f3ef 8311 	mrs	r3, BASEPRI
 8006924:	60bb      	str	r3, [r7, #8]
  return(result);
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d007      	beq.n	800693c <osDelay+0x3c>
 800692c:	4b0a      	ldr	r3, [pc, #40]	; (8006958 <osDelay+0x58>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b02      	cmp	r3, #2
 8006932:	d103      	bne.n	800693c <osDelay+0x3c>
    stat = osErrorISR;
 8006934:	f06f 0305 	mvn.w	r3, #5
 8006938:	617b      	str	r3, [r7, #20]
 800693a:	e007      	b.n	800694c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 fd84 	bl	8008454 <vTaskDelay>
    }
  }

  return (stat);
 800694c:	697b      	ldr	r3, [r7, #20]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000094 	.word	0x20000094

0800695c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006964:	2300      	movs	r3, #0
 8006966:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006968:	f3ef 8305 	mrs	r3, IPSR
 800696c:	617b      	str	r3, [r7, #20]
  return(result);
 800696e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8006970:	2b00      	cmp	r3, #0
 8006972:	d13d      	bne.n	80069f0 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006974:	f3ef 8310 	mrs	r3, PRIMASK
 8006978:	613b      	str	r3, [r7, #16]
  return(result);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d105      	bne.n	800698c <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006980:	f3ef 8311 	mrs	r3, BASEPRI
 8006984:	60fb      	str	r3, [r7, #12]
  return(result);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <osEventFlagsNew+0x38>
 800698c:	4b1b      	ldr	r3, [pc, #108]	; (80069fc <osEventFlagsNew+0xa0>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d02d      	beq.n	80069f0 <osEventFlagsNew+0x94>
    mem = -1;
 8006994:	f04f 33ff 	mov.w	r3, #4294967295
 8006998:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d015      	beq.n	80069cc <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d006      	beq.n	80069b6 <osEventFlagsNew+0x5a>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	2b1f      	cmp	r3, #31
 80069ae:	d902      	bls.n	80069b6 <osEventFlagsNew+0x5a>
        mem = 1;
 80069b0:	2301      	movs	r3, #1
 80069b2:	61bb      	str	r3, [r7, #24]
 80069b4:	e00c      	b.n	80069d0 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d108      	bne.n	80069d0 <osEventFlagsNew+0x74>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <osEventFlagsNew+0x74>
          mem = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	61bb      	str	r3, [r7, #24]
 80069ca:	e001      	b.n	80069d0 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d106      	bne.n	80069e4 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 faf6 	bl	8006fcc <xEventGroupCreateStatic>
 80069e0:	61f8      	str	r0, [r7, #28]
 80069e2:	e005      	b.n	80069f0 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d102      	bne.n	80069f0 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 80069ea:	f000 fb24 	bl	8007036 <xEventGroupCreate>
 80069ee:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80069f0:	69fb      	ldr	r3, [r7, #28]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3720      	adds	r7, #32
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20000094 	.word	0x20000094

08006a00 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d004      	beq.n	8006a1e <osEventFlagsSet+0x1e>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006a1e:	f06f 0303 	mvn.w	r3, #3
 8006a22:	61fb      	str	r3, [r7, #28]
 8006a24:	e03a      	b.n	8006a9c <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a26:	f3ef 8305 	mrs	r3, IPSR
 8006a2a:	617b      	str	r3, [r7, #20]
  return(result);
 8006a2c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10f      	bne.n	8006a52 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a32:	f3ef 8310 	mrs	r3, PRIMASK
 8006a36:	613b      	str	r3, [r7, #16]
  return(result);
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d105      	bne.n	8006a4a <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a42:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d021      	beq.n	8006a8e <osEventFlagsSet+0x8e>
 8006a4a:	4b17      	ldr	r3, [pc, #92]	; (8006aa8 <osEventFlagsSet+0xa8>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d11d      	bne.n	8006a8e <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006a56:	f107 0308 	add.w	r3, r7, #8
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	69b8      	ldr	r0, [r7, #24]
 8006a60:	f000 fd00 	bl	8007464 <xEventGroupSetBitsFromISR>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d103      	bne.n	8006a72 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8006a6a:	f06f 0302 	mvn.w	r3, #2
 8006a6e:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006a70:	e013      	b.n	8006a9a <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00e      	beq.n	8006a9a <osEventFlagsSet+0x9a>
 8006a7c:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <osEventFlagsSet+0xac>)
 8006a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006a8c:	e005      	b.n	8006a9a <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	69b8      	ldr	r0, [r7, #24]
 8006a92:	f000 fc22 	bl	80072da <xEventGroupSetBits>
 8006a96:	61f8      	str	r0, [r7, #28]
 8006a98:	e000      	b.n	8006a9c <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006a9a:	bf00      	nop
  }

  return (rflags);
 8006a9c:	69fb      	ldr	r3, [r7, #28]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3720      	adds	r7, #32
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000094 	.word	0x20000094
 8006aac:	e000ed04 	.word	0xe000ed04

08006ab0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d004      	beq.n	8006ace <osEventFlagsClear+0x1e>
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006ace:	f06f 0303 	mvn.w	r3, #3
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	e029      	b.n	8006b2a <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ad6:	f3ef 8305 	mrs	r3, IPSR
 8006ada:	617b      	str	r3, [r7, #20]
  return(result);
 8006adc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10f      	bne.n	8006b02 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ae6:	613b      	str	r3, [r7, #16]
  return(result);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d105      	bne.n	8006afa <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006aee:	f3ef 8311 	mrs	r3, BASEPRI
 8006af2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d012      	beq.n	8006b20 <osEventFlagsClear+0x70>
 8006afa:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <osEventFlagsClear+0x84>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d10e      	bne.n	8006b20 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8006b02:	69b8      	ldr	r0, [r7, #24]
 8006b04:	f000 fbc6 	bl	8007294 <xEventGroupGetBitsFromISR>
 8006b08:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	69b8      	ldr	r0, [r7, #24]
 8006b0e:	f000 fbad 	bl	800726c <xEventGroupClearBitsFromISR>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d108      	bne.n	8006b2a <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8006b18:	f06f 0302 	mvn.w	r3, #2
 8006b1c:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8006b1e:	e004      	b.n	8006b2a <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	69b8      	ldr	r0, [r7, #24]
 8006b24:	f000 fb6c 	bl	8007200 <xEventGroupClearBits>
 8006b28:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8006b2a:	69fb      	ldr	r3, [r7, #28]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3720      	adds	r7, #32
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20000094 	.word	0x20000094

08006b38 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if (ef_id == NULL) {
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <osEventFlagsGet+0x18>
    rflags = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61fb      	str	r3, [r7, #28]
 8006b4e:	e01f      	b.n	8006b90 <osEventFlagsGet+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b50:	f3ef 8305 	mrs	r3, IPSR
 8006b54:	617b      	str	r3, [r7, #20]
  return(result);
 8006b56:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10f      	bne.n	8006b7c <osEventFlagsGet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b60:	613b      	str	r3, [r7, #16]
  return(result);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d105      	bne.n	8006b74 <osEventFlagsGet+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b68:	f3ef 8311 	mrs	r3, BASEPRI
 8006b6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d008      	beq.n	8006b86 <osEventFlagsGet+0x4e>
 8006b74:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <osEventFlagsGet+0x64>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d104      	bne.n	8006b86 <osEventFlagsGet+0x4e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8006b7c:	69b8      	ldr	r0, [r7, #24]
 8006b7e:	f000 fb89 	bl	8007294 <xEventGroupGetBitsFromISR>
 8006b82:	61f8      	str	r0, [r7, #28]
 8006b84:	e004      	b.n	8006b90 <osEventFlagsGet+0x58>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8006b86:	2100      	movs	r1, #0
 8006b88:	69b8      	ldr	r0, [r7, #24]
 8006b8a:	f000 fb39 	bl	8007200 <xEventGroupClearBits>
 8006b8e:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8006b90:	69fb      	ldr	r3, [r7, #28]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3720      	adds	r7, #32
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000094 	.word	0x20000094

08006ba0 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08e      	sub	sp, #56	; 0x38
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d004      	beq.n	8006bc2 <osEventFlagsWait+0x22>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8006bc2:	f06f 0303 	mvn.w	r3, #3
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc8:	e059      	b.n	8006c7e <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bca:	f3ef 8305 	mrs	r3, IPSR
 8006bce:	61fb      	str	r3, [r7, #28]
  return(result);
 8006bd0:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10f      	bne.n	8006bf6 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8006bda:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d105      	bne.n	8006bee <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006be2:	f3ef 8311 	mrs	r3, BASEPRI
 8006be6:	617b      	str	r3, [r7, #20]
  return(result);
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d007      	beq.n	8006bfe <osEventFlagsWait+0x5e>
 8006bee:	4b26      	ldr	r3, [pc, #152]	; (8006c88 <osEventFlagsWait+0xe8>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d103      	bne.n	8006bfe <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8006bf6:	f06f 0305 	mvn.w	r3, #5
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfc:	e03f      	b.n	8006c7e <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c0c:	e001      	b.n	8006c12 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c20:	e001      	b.n	8006c26 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8006c22:	2301      	movs	r3, #1
 8006c24:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c2e:	68b9      	ldr	r1, [r7, #8]
 8006c30:	6a38      	ldr	r0, [r7, #32]
 8006c32:	f000 fa1b 	bl	800706c <xEventGroupWaitBits>
 8006c36:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00e      	beq.n	8006c60 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d019      	beq.n	8006c7e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8006c50:	f06f 0301 	mvn.w	r3, #1
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
 8006c56:	e012      	b.n	8006c7e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006c58:	f06f 0302 	mvn.w	r3, #2
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5e:	e00e      	b.n	8006c7e <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	4013      	ands	r3, r2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d109      	bne.n	8006c7e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8006c70:	f06f 0301 	mvn.w	r3, #1
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
 8006c76:	e002      	b.n	8006c7e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006c78:	f06f 0302 	mvn.w	r3, #2
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3730      	adds	r7, #48	; 0x30
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20000094 	.word	0x20000094

08006c8c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08c      	sub	sp, #48	; 0x30
 8006c90:	af02      	add	r7, sp, #8
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c9c:	f3ef 8305 	mrs	r3, IPSR
 8006ca0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ca2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d170      	bne.n	8006d8a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cac:	617b      	str	r3, [r7, #20]
  return(result);
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d105      	bne.n	8006cc0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8006cb8:	613b      	str	r3, [r7, #16]
  return(result);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <osMessageQueueNew+0x3c>
 8006cc0:	4b34      	ldr	r3, [pc, #208]	; (8006d94 <osMessageQueueNew+0x108>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d060      	beq.n	8006d8a <osMessageQueueNew+0xfe>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d05d      	beq.n	8006d8a <osMessageQueueNew+0xfe>
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d05a      	beq.n	8006d8a <osMessageQueueNew+0xfe>
    mem = -1;
 8006cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d029      	beq.n	8006d34 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d012      	beq.n	8006d0e <osMessageQueueNew+0x82>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	2b4f      	cmp	r3, #79	; 0x4f
 8006cee:	d90e      	bls.n	8006d0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	695a      	ldr	r2, [r3, #20]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	fb01 f303 	mul.w	r3, r1, r3
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d302      	bcc.n	8006d0e <osMessageQueueNew+0x82>
        mem = 1;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	623b      	str	r3, [r7, #32]
 8006d0c:	e014      	b.n	8006d38 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d110      	bne.n	8006d38 <osMessageQueueNew+0xac>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10c      	bne.n	8006d38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d108      	bne.n	8006d38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d104      	bne.n	8006d38 <osMessageQueueNew+0xac>
          mem = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	623b      	str	r3, [r7, #32]
 8006d32:	e001      	b.n	8006d38 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d10c      	bne.n	8006d58 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691a      	ldr	r2, [r3, #16]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6899      	ldr	r1, [r3, #8]
 8006d46:	2300      	movs	r3, #0
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fcb8 	bl	80076c4 <xQueueGenericCreateStatic>
 8006d54:	6278      	str	r0, [r7, #36]	; 0x24
 8006d56:	e008      	b.n	8006d6a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d105      	bne.n	8006d6a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006d5e:	2200      	movs	r2, #0
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 fd21 	bl	80077aa <xQueueGenericCreate>
 8006d68:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00c      	beq.n	8006d8a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <osMessageQueueNew+0xf2>
        name = attr->name;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	61fb      	str	r3, [r7, #28]
 8006d7c:	e001      	b.n	8006d82 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006d82:	69f9      	ldr	r1, [r7, #28]
 8006d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d86:	f001 f96b 	bl	8008060 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3728      	adds	r7, #40	; 0x28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20000094 	.word	0x20000094

08006d98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08a      	sub	sp, #40	; 0x28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	4613      	mov	r3, r2
 8006da6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006db0:	f3ef 8305 	mrs	r3, IPSR
 8006db4:	61fb      	str	r3, [r7, #28]
  return(result);
 8006db6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10f      	bne.n	8006ddc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8006dc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d105      	bne.n	8006dd4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006dc8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dcc:	617b      	str	r3, [r7, #20]
  return(result);
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d02c      	beq.n	8006e2e <osMessageQueuePut+0x96>
 8006dd4:	4b28      	ldr	r3, [pc, #160]	; (8006e78 <osMessageQueuePut+0xe0>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d128      	bne.n	8006e2e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d005      	beq.n	8006dee <osMessageQueuePut+0x56>
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <osMessageQueuePut+0x56>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006dee:	f06f 0303 	mvn.w	r3, #3
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006df4:	e039      	b.n	8006e6a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006df6:	2300      	movs	r3, #0
 8006df8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006dfa:	f107 0210 	add.w	r2, r7, #16
 8006dfe:	2300      	movs	r3, #0
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	6a38      	ldr	r0, [r7, #32]
 8006e04:	f000 fe2e 	bl	8007a64 <xQueueGenericSendFromISR>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d003      	beq.n	8006e16 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006e0e:	f06f 0302 	mvn.w	r3, #2
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e14:	e029      	b.n	8006e6a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d026      	beq.n	8006e6a <osMessageQueuePut+0xd2>
 8006e1c:	4b17      	ldr	r3, [pc, #92]	; (8006e7c <osMessageQueuePut+0xe4>)
 8006e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e2c:	e01d      	b.n	8006e6a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <osMessageQueuePut+0xa2>
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d103      	bne.n	8006e42 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006e3a:	f06f 0303 	mvn.w	r3, #3
 8006e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e40:	e014      	b.n	8006e6c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e42:	2300      	movs	r3, #0
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	68b9      	ldr	r1, [r7, #8]
 8006e48:	6a38      	ldr	r0, [r7, #32]
 8006e4a:	f000 fd11 	bl	8007870 <xQueueGenericSend>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d00b      	beq.n	8006e6c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006e5a:	f06f 0301 	mvn.w	r3, #1
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e60:	e004      	b.n	8006e6c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006e62:	f06f 0302 	mvn.w	r3, #2
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
 8006e68:	e000      	b.n	8006e6c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e6a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3728      	adds	r7, #40	; 0x28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20000094 	.word	0x20000094
 8006e7c:	e000ed04 	.word	0xe000ed04

08006e80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08a      	sub	sp, #40	; 0x28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e96:	f3ef 8305 	mrs	r3, IPSR
 8006e9a:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e9c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10f      	bne.n	8006ec2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea6:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d105      	bne.n	8006eba <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006eae:	f3ef 8311 	mrs	r3, BASEPRI
 8006eb2:	617b      	str	r3, [r7, #20]
  return(result);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d02c      	beq.n	8006f14 <osMessageQueueGet+0x94>
 8006eba:	4b28      	ldr	r3, [pc, #160]	; (8006f5c <osMessageQueueGet+0xdc>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d128      	bne.n	8006f14 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <osMessageQueueGet+0x54>
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <osMessageQueueGet+0x54>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006ed4:	f06f 0303 	mvn.w	r3, #3
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006eda:	e038      	b.n	8006f4e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006edc:	2300      	movs	r3, #0
 8006ede:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006ee0:	f107 0310 	add.w	r3, r7, #16
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	6a38      	ldr	r0, [r7, #32]
 8006eea:	f000 ff2b 	bl	8007d44 <xQueueReceiveFromISR>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d003      	beq.n	8006efc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006ef4:	f06f 0302 	mvn.w	r3, #2
 8006ef8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006efa:	e028      	b.n	8006f4e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d025      	beq.n	8006f4e <osMessageQueueGet+0xce>
 8006f02:	4b17      	ldr	r3, [pc, #92]	; (8006f60 <osMessageQueueGet+0xe0>)
 8006f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f12:	e01c      	b.n	8006f4e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <osMessageQueueGet+0xa0>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d103      	bne.n	8006f28 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006f20:	f06f 0303 	mvn.w	r3, #3
 8006f24:	627b      	str	r3, [r7, #36]	; 0x24
 8006f26:	e013      	b.n	8006f50 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	6a38      	ldr	r0, [r7, #32]
 8006f2e:	f000 fe2d 	bl	8007b8c <xQueueReceive>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d00b      	beq.n	8006f50 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006f3e:	f06f 0301 	mvn.w	r3, #1
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
 8006f44:	e004      	b.n	8006f50 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006f46:	f06f 0302 	mvn.w	r3, #2
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f4c:	e000      	b.n	8006f50 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f4e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3728      	adds	r7, #40	; 0x28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000094 	.word	0x20000094
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a07      	ldr	r2, [pc, #28]	; (8006f90 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	4a06      	ldr	r2, [pc, #24]	; (8006f94 <vApplicationGetIdleTaskMemory+0x30>)
 8006f7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2280      	movs	r2, #128	; 0x80
 8006f80:	601a      	str	r2, [r3, #0]
}
 8006f82:	bf00      	nop
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	20000098 	.word	0x20000098
 8006f94:	20000104 	.word	0x20000104

08006f98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4a07      	ldr	r2, [pc, #28]	; (8006fc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006fa8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4a06      	ldr	r2, [pc, #24]	; (8006fc8 <vApplicationGetTimerTaskMemory+0x30>)
 8006fae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fb6:	601a      	str	r2, [r3, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	20000304 	.word	0x20000304
 8006fc8:	20000370 	.word	0x20000370

08006fcc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	613b      	str	r3, [r7, #16]
 8006fec:	e7fe      	b.n	8006fec <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8006fee:	2320      	movs	r3, #32
 8006ff0:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d009      	beq.n	800700c <xEventGroupCreateStatic+0x40>
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	e7fe      	b.n	800700a <xEventGroupCreateStatic+0x3e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	3304      	adds	r3, #4
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fa33 	bl	800748c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2201      	movs	r2, #1
 800702a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800702c:	697b      	ldr	r3, [r7, #20]
	}
 800702e:	4618      	mov	r0, r3
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800703c:	2020      	movs	r0, #32
 800703e:	f002 fda7 	bl	8009b90 <pvPortMalloc>
 8007042:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3304      	adds	r3, #4
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fa19 	bl	800748c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8007060:	687b      	ldr	r3, [r7, #4]
	}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b090      	sub	sp, #64	; 0x40
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8007082:	2300      	movs	r3, #0
 8007084:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d109      	bne.n	80070a0 <xEventGroupWaitBits+0x34>
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	623b      	str	r3, [r7, #32]
 800709e:	e7fe      	b.n	800709e <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <xEventGroupWaitBits+0x52>
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	e7fe      	b.n	80070bc <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d109      	bne.n	80070d8 <xEventGroupWaitBits+0x6c>
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	61bb      	str	r3, [r7, #24]
 80070d6:	e7fe      	b.n	80070d6 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070d8:	f001 fec0 	bl	8008e5c <xTaskGetSchedulerState>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d102      	bne.n	80070e8 <xEventGroupWaitBits+0x7c>
 80070e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <xEventGroupWaitBits+0x80>
 80070e8:	2301      	movs	r3, #1
 80070ea:	e000      	b.n	80070ee <xEventGroupWaitBits+0x82>
 80070ec:	2300      	movs	r3, #0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <xEventGroupWaitBits+0x9a>
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	e7fe      	b.n	8007104 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8007106:	f001 fa3d 	bl	8008584 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800710a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007116:	f000 f983 	bl	8007420 <prvTestWaitCondition>
 800711a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00e      	beq.n	8007140 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007124:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8007126:	2300      	movs	r3, #0
 8007128:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d028      	beq.n	8007182 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	43db      	mvns	r3, r3
 8007138:	401a      	ands	r2, r3
 800713a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	e020      	b.n	8007182 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007142:	2b00      	cmp	r3, #0
 8007144:	d104      	bne.n	8007150 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800714a:	2301      	movs	r3, #1
 800714c:	633b      	str	r3, [r7, #48]	; 0x30
 800714e:	e018      	b.n	8007182 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800715c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800716a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800716c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716e:	1d18      	adds	r0, r3, #4
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	4313      	orrs	r3, r2
 8007176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007178:	4619      	mov	r1, r3
 800717a:	f001 fbf5 	bl	8008968 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007182:	f001 fa0d 	bl	80085a0 <xTaskResumeAll>
 8007186:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800718a:	2b00      	cmp	r3, #0
 800718c:	d031      	beq.n	80071f2 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	2b00      	cmp	r3, #0
 8007192:	d107      	bne.n	80071a4 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8007194:	4b19      	ldr	r3, [pc, #100]	; (80071fc <xEventGroupWaitBits+0x190>)
 8007196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80071a4:	f001 fee4 	bl	8008f70 <uxTaskResetEventItemValue>
 80071a8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80071aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d11a      	bne.n	80071ea <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80071b4:	f002 fbd2 	bl	800995c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80071b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80071c4:	f000 f92c 	bl	8007420 <prvTestWaitCondition>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d006      	beq.n	80071e2 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80071d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	43db      	mvns	r3, r3
 80071dc:	401a      	ands	r2, r3
 80071de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80071e2:	2301      	movs	r3, #1
 80071e4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80071e6:	f002 fbe7 	bl	80099b8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80071ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80071f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3740      	adds	r7, #64	; 0x40
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	e000ed04 	.word	0xe000ed04

08007200 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d109      	bne.n	8007228 <xEventGroupClearBits+0x28>
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	e7fe      	b.n	8007226 <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d009      	beq.n	8007246 <xEventGroupClearBits+0x46>
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	60bb      	str	r3, [r7, #8]
 8007244:	e7fe      	b.n	8007244 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 8007246:	f002 fb89 	bl	800995c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	43db      	mvns	r3, r3
 8007258:	401a      	ands	r2, r3
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800725e:	f002 fbab 	bl	80099b8 <vPortExitCritical>

	return uxReturn;
 8007262:	693b      	ldr	r3, [r7, #16]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8007276:	2300      	movs	r3, #0
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4804      	ldr	r0, [pc, #16]	; (8007290 <xEventGroupClearBitsFromISR+0x24>)
 800727e:	f002 fa29 	bl	80096d4 <xTimerPendFunctionCallFromISR>
 8007282:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8007284:	68fb      	ldr	r3, [r7, #12]
	}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	08007407 	.word	0x08007407

08007294 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8007294:	b480      	push	{r7}
 8007296:	b089      	sub	sp, #36	; 0x24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80072a0:	f3ef 8211 	mrs	r2, BASEPRI
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	60fa      	str	r2, [r7, #12]
 80072b6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072b8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072ba:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80072cc:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80072ce:	4618      	mov	r0, r3
 80072d0:	3724      	adds	r7, #36	; 0x24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b08e      	sub	sp, #56	; 0x38
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80072e4:	2300      	movs	r3, #0
 80072e6:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d109      	bne.n	800730a <xEventGroupSetBits+0x30>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	613b      	str	r3, [r7, #16]
 8007308:	e7fe      	b.n	8007308 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d009      	beq.n	8007328 <xEventGroupSetBits+0x4e>
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	e7fe      	b.n	8007326 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	3304      	adds	r3, #4
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	3308      	adds	r3, #8
 8007332:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007334:	f001 f926 	bl	8008584 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	431a      	orrs	r2, r3
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800734a:	e03c      	b.n	80073c6 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800734c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007358:	2300      	movs	r3, #0
 800735a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007362:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800736a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d108      	bne.n	8007388 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	4013      	ands	r3, r2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8007382:	2301      	movs	r3, #1
 8007384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007386:	e008      	b.n	800739a <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	4013      	ands	r3, r2
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	429a      	cmp	r2, r3
 8007394:	d101      	bne.n	800739a <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007396:	2301      	movs	r3, #1
 8007398:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739c:	2b00      	cmp	r3, #0
 800739e:	d010      	beq.n	80073c2 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80073aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80073ba:	4619      	mov	r1, r3
 80073bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80073be:	f001 fb99 	bl	8008af4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80073c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d1be      	bne.n	800734c <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	43db      	mvns	r3, r3
 80073d6:	401a      	ands	r2, r3
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80073dc:	f001 f8e0 	bl	80085a0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	681b      	ldr	r3, [r3, #0]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3738      	adds	r7, #56	; 0x38
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff ff6e 	bl	80072da <xEventGroupSetBits>
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b082      	sub	sp, #8
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff fef4 	bl	8007200 <xEventGroupClearBits>
}
 8007418:	bf00      	nop
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800742c:	2300      	movs	r3, #0
 800742e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d107      	bne.n	8007446 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	4013      	ands	r3, r2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00a      	beq.n	8007456 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007440:	2301      	movs	r3, #1
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	e007      	b.n	8007456 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4013      	ands	r3, r2
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	429a      	cmp	r2, r3
 8007450:	d101      	bne.n	8007456 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007452:	2301      	movs	r3, #1
 8007454:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007456:	697b      	ldr	r3, [r7, #20]
}
 8007458:	4618      	mov	r0, r3
 800745a:	371c      	adds	r7, #28
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	68f9      	ldr	r1, [r7, #12]
 8007476:	4804      	ldr	r0, [pc, #16]	; (8007488 <xEventGroupSetBitsFromISR+0x24>)
 8007478:	f002 f92c 	bl	80096d4 <xTimerPendFunctionCallFromISR>
 800747c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800747e:	697b      	ldr	r3, [r7, #20]
	}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	080073ed 	.word	0x080073ed

0800748c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f103 0208 	add.w	r2, r3, #8
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f04f 32ff 	mov.w	r2, #4294967295
 80074a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f103 0208 	add.w	r2, r3, #8
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f103 0208 	add.w	r2, r3, #8
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074e6:	b480      	push	{r7}
 80074e8:	b085      	sub	sp, #20
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	601a      	str	r2, [r3, #0]
}
 8007522:	bf00      	nop
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800752e:	b480      	push	{r7}
 8007530:	b085      	sub	sp, #20
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007544:	d103      	bne.n	800754e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	e00c      	b.n	8007568 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3308      	adds	r3, #8
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	e002      	b.n	800755c <vListInsert+0x2e>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	429a      	cmp	r2, r3
 8007566:	d2f6      	bcs.n	8007556 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	601a      	str	r2, [r3, #0]
}
 8007594:	bf00      	nop
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6892      	ldr	r2, [r2, #8]
 80075b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6852      	ldr	r2, [r2, #4]
 80075c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d103      	bne.n	80075d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	1e5a      	subs	r2, r3, #1
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d109      	bne.n	800761c <xQueueGenericReset+0x28>
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	60bb      	str	r3, [r7, #8]
 800761a:	e7fe      	b.n	800761a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800761c:	f002 f99e 	bl	800995c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007628:	68f9      	ldr	r1, [r7, #12]
 800762a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800762c:	fb01 f303 	mul.w	r3, r1, r3
 8007630:	441a      	add	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764c:	3b01      	subs	r3, #1
 800764e:	68f9      	ldr	r1, [r7, #12]
 8007650:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007652:	fb01 f303 	mul.w	r3, r1, r3
 8007656:	441a      	add	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	22ff      	movs	r2, #255	; 0xff
 8007660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	22ff      	movs	r2, #255	; 0xff
 8007668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d114      	bne.n	800769c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d01a      	beq.n	80076b0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3310      	adds	r3, #16
 800767e:	4618      	mov	r0, r3
 8007680:	f001 f9d6 	bl	8008a30 <xTaskRemoveFromEventList>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d012      	beq.n	80076b0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800768a:	4b0d      	ldr	r3, [pc, #52]	; (80076c0 <xQueueGenericReset+0xcc>)
 800768c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	e009      	b.n	80076b0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3310      	adds	r3, #16
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff fef3 	bl	800748c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3324      	adds	r3, #36	; 0x24
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff feee 	bl	800748c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80076b0:	f002 f982 	bl	80099b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80076b4:	2301      	movs	r3, #1
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	e000ed04 	.word	0xe000ed04

080076c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08e      	sub	sp, #56	; 0x38
 80076c8:	af02      	add	r7, sp, #8
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d109      	bne.n	80076ec <xQueueGenericCreateStatic+0x28>
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076ea:	e7fe      	b.n	80076ea <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d109      	bne.n	8007706 <xQueueGenericCreateStatic+0x42>
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	627b      	str	r3, [r7, #36]	; 0x24
 8007704:	e7fe      	b.n	8007704 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <xQueueGenericCreateStatic+0x4e>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <xQueueGenericCreateStatic+0x52>
 8007712:	2301      	movs	r3, #1
 8007714:	e000      	b.n	8007718 <xQueueGenericCreateStatic+0x54>
 8007716:	2300      	movs	r3, #0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d109      	bne.n	8007730 <xQueueGenericCreateStatic+0x6c>
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	623b      	str	r3, [r7, #32]
 800772e:	e7fe      	b.n	800772e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d102      	bne.n	800773c <xQueueGenericCreateStatic+0x78>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <xQueueGenericCreateStatic+0x7c>
 800773c:	2301      	movs	r3, #1
 800773e:	e000      	b.n	8007742 <xQueueGenericCreateStatic+0x7e>
 8007740:	2300      	movs	r3, #0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d109      	bne.n	800775a <xQueueGenericCreateStatic+0x96>
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	61fb      	str	r3, [r7, #28]
 8007758:	e7fe      	b.n	8007758 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800775a:	2350      	movs	r3, #80	; 0x50
 800775c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b50      	cmp	r3, #80	; 0x50
 8007762:	d009      	beq.n	8007778 <xQueueGenericCreateStatic+0xb4>
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	61bb      	str	r3, [r7, #24]
 8007776:	e7fe      	b.n	8007776 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007778:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00d      	beq.n	80077a0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800778c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	4613      	mov	r3, r2
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	68b9      	ldr	r1, [r7, #8]
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 f844 	bl	8007828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3730      	adds	r7, #48	; 0x30
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b08a      	sub	sp, #40	; 0x28
 80077ae:	af02      	add	r7, sp, #8
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	4613      	mov	r3, r2
 80077b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d109      	bne.n	80077d2 <xQueueGenericCreate+0x28>
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	e7fe      	b.n	80077d0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80077d8:	2300      	movs	r3, #0
 80077da:	61fb      	str	r3, [r7, #28]
 80077dc:	e004      	b.n	80077e8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	fb02 f303 	mul.w	r3, r2, r3
 80077e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	3350      	adds	r3, #80	; 0x50
 80077ec:	4618      	mov	r0, r3
 80077ee:	f002 f9cf 	bl	8009b90 <pvPortMalloc>
 80077f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d011      	beq.n	800781e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	3350      	adds	r3, #80	; 0x50
 8007802:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800780c:	79fa      	ldrb	r2, [r7, #7]
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	4613      	mov	r3, r2
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f805 	bl	8007828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800781e:	69bb      	ldr	r3, [r7, #24]
	}
 8007820:	4618      	mov	r0, r3
 8007822:	3720      	adds	r7, #32
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d103      	bne.n	8007844 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	e002      	b.n	800784a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007856:	2101      	movs	r1, #1
 8007858:	69b8      	ldr	r0, [r7, #24]
 800785a:	f7ff fecb 	bl	80075f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	78fa      	ldrb	r2, [r7, #3]
 8007862:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007866:	bf00      	nop
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08e      	sub	sp, #56	; 0x38
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
 800787c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800787e:	2300      	movs	r3, #0
 8007880:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007888:	2b00      	cmp	r3, #0
 800788a:	d109      	bne.n	80078a0 <xQueueGenericSend+0x30>
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	62bb      	str	r3, [r7, #40]	; 0x28
 800789e:	e7fe      	b.n	800789e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d103      	bne.n	80078ae <xQueueGenericSend+0x3e>
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <xQueueGenericSend+0x42>
 80078ae:	2301      	movs	r3, #1
 80078b0:	e000      	b.n	80078b4 <xQueueGenericSend+0x44>
 80078b2:	2300      	movs	r3, #0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d109      	bne.n	80078cc <xQueueGenericSend+0x5c>
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
 80078ca:	e7fe      	b.n	80078ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d103      	bne.n	80078da <xQueueGenericSend+0x6a>
 80078d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d101      	bne.n	80078de <xQueueGenericSend+0x6e>
 80078da:	2301      	movs	r3, #1
 80078dc:	e000      	b.n	80078e0 <xQueueGenericSend+0x70>
 80078de:	2300      	movs	r3, #0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d109      	bne.n	80078f8 <xQueueGenericSend+0x88>
 80078e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	623b      	str	r3, [r7, #32]
 80078f6:	e7fe      	b.n	80078f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078f8:	f001 fab0 	bl	8008e5c <xTaskGetSchedulerState>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d102      	bne.n	8007908 <xQueueGenericSend+0x98>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <xQueueGenericSend+0x9c>
 8007908:	2301      	movs	r3, #1
 800790a:	e000      	b.n	800790e <xQueueGenericSend+0x9e>
 800790c:	2300      	movs	r3, #0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <xQueueGenericSend+0xb6>
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	61fb      	str	r3, [r7, #28]
 8007924:	e7fe      	b.n	8007924 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007926:	f002 f819 	bl	800995c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007932:	429a      	cmp	r2, r3
 8007934:	d302      	bcc.n	800793c <xQueueGenericSend+0xcc>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b02      	cmp	r3, #2
 800793a:	d129      	bne.n	8007990 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	68b9      	ldr	r1, [r7, #8]
 8007940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007942:	f000 fa7c 	bl	8007e3e <prvCopyDataToQueue>
 8007946:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	2b00      	cmp	r3, #0
 800794e:	d010      	beq.n	8007972 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	3324      	adds	r3, #36	; 0x24
 8007954:	4618      	mov	r0, r3
 8007956:	f001 f86b 	bl	8008a30 <xTaskRemoveFromEventList>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d013      	beq.n	8007988 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007960:	4b3f      	ldr	r3, [pc, #252]	; (8007a60 <xQueueGenericSend+0x1f0>)
 8007962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	e00a      	b.n	8007988 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d007      	beq.n	8007988 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007978:	4b39      	ldr	r3, [pc, #228]	; (8007a60 <xQueueGenericSend+0x1f0>)
 800797a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007988:	f002 f816 	bl	80099b8 <vPortExitCritical>
				return pdPASS;
 800798c:	2301      	movs	r3, #1
 800798e:	e063      	b.n	8007a58 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d103      	bne.n	800799e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007996:	f002 f80f 	bl	80099b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800799a:	2300      	movs	r3, #0
 800799c:	e05c      	b.n	8007a58 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800799e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d106      	bne.n	80079b2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079a4:	f107 0314 	add.w	r3, r7, #20
 80079a8:	4618      	mov	r0, r3
 80079aa:	f001 f903 	bl	8008bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079ae:	2301      	movs	r3, #1
 80079b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079b2:	f002 f801 	bl	80099b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079b6:	f000 fde5 	bl	8008584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079ba:	f001 ffcf 	bl	800995c <vPortEnterCritical>
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079c4:	b25b      	sxtb	r3, r3
 80079c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ca:	d103      	bne.n	80079d4 <xQueueGenericSend+0x164>
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079da:	b25b      	sxtb	r3, r3
 80079dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e0:	d103      	bne.n	80079ea <xQueueGenericSend+0x17a>
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079ea:	f001 ffe5 	bl	80099b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079ee:	1d3a      	adds	r2, r7, #4
 80079f0:	f107 0314 	add.w	r3, r7, #20
 80079f4:	4611      	mov	r1, r2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 f8f2 	bl	8008be0 <xTaskCheckForTimeOut>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d124      	bne.n	8007a4c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a04:	f000 fb13 	bl	800802e <prvIsQueueFull>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d018      	beq.n	8007a40 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	3310      	adds	r3, #16
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	4611      	mov	r1, r2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 ff82 	bl	8008920 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a1e:	f000 fa9e 	bl	8007f5e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a22:	f000 fdbd 	bl	80085a0 <xTaskResumeAll>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f47f af7c 	bne.w	8007926 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007a2e:	4b0c      	ldr	r3, [pc, #48]	; (8007a60 <xQueueGenericSend+0x1f0>)
 8007a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	e772      	b.n	8007926 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a42:	f000 fa8c 	bl	8007f5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a46:	f000 fdab 	bl	80085a0 <xTaskResumeAll>
 8007a4a:	e76c      	b.n	8007926 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a4e:	f000 fa86 	bl	8007f5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a52:	f000 fda5 	bl	80085a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3738      	adds	r7, #56	; 0x38
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	e000ed04 	.word	0xe000ed04

08007a64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08e      	sub	sp, #56	; 0x38
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d109      	bne.n	8007a90 <xQueueGenericSendFromISR+0x2c>
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a8e:	e7fe      	b.n	8007a8e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d103      	bne.n	8007a9e <xQueueGenericSendFromISR+0x3a>
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <xQueueGenericSendFromISR+0x3e>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e000      	b.n	8007aa4 <xQueueGenericSendFromISR+0x40>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d109      	bne.n	8007abc <xQueueGenericSendFromISR+0x58>
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	623b      	str	r3, [r7, #32]
 8007aba:	e7fe      	b.n	8007aba <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d103      	bne.n	8007aca <xQueueGenericSendFromISR+0x66>
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d101      	bne.n	8007ace <xQueueGenericSendFromISR+0x6a>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <xQueueGenericSendFromISR+0x6c>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d109      	bne.n	8007ae8 <xQueueGenericSendFromISR+0x84>
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	61fb      	str	r3, [r7, #28]
 8007ae6:	e7fe      	b.n	8007ae6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ae8:	f002 f814 	bl	8009b14 <vPortValidateInterruptPriority>
	__asm volatile
 8007aec:	f3ef 8211 	mrs	r2, BASEPRI
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	61ba      	str	r2, [r7, #24]
 8007b02:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007b04:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d302      	bcc.n	8007b1a <xQueueGenericSendFromISR+0xb6>
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d12c      	bne.n	8007b74 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b2a:	f000 f988 	bl	8007e3e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b2e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b36:	d112      	bne.n	8007b5e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d016      	beq.n	8007b6e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	3324      	adds	r3, #36	; 0x24
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 ff73 	bl	8008a30 <xTaskRemoveFromEventList>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00e      	beq.n	8007b6e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00b      	beq.n	8007b6e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	e007      	b.n	8007b6e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b62:	3301      	adds	r3, #1
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	b25a      	sxtb	r2, r3
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007b72:	e001      	b.n	8007b78 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	637b      	str	r3, [r7, #52]	; 0x34
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3738      	adds	r7, #56	; 0x38
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08c      	sub	sp, #48	; 0x30
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d109      	bne.n	8007bba <xQueueReceive+0x2e>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	623b      	str	r3, [r7, #32]
 8007bb8:	e7fe      	b.n	8007bb8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d103      	bne.n	8007bc8 <xQueueReceive+0x3c>
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <xQueueReceive+0x40>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e000      	b.n	8007bce <xQueueReceive+0x42>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d109      	bne.n	8007be6 <xQueueReceive+0x5a>
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	61fb      	str	r3, [r7, #28]
 8007be4:	e7fe      	b.n	8007be4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007be6:	f001 f939 	bl	8008e5c <xTaskGetSchedulerState>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d102      	bne.n	8007bf6 <xQueueReceive+0x6a>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <xQueueReceive+0x6e>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e000      	b.n	8007bfc <xQueueReceive+0x70>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d109      	bne.n	8007c14 <xQueueReceive+0x88>
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	61bb      	str	r3, [r7, #24]
 8007c12:	e7fe      	b.n	8007c12 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c14:	f001 fea2 	bl	800995c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01f      	beq.n	8007c64 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c24:	68b9      	ldr	r1, [r7, #8]
 8007c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c28:	f000 f973 	bl	8007f12 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	1e5a      	subs	r2, r3, #1
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00f      	beq.n	8007c5c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	3310      	adds	r3, #16
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 fef5 	bl	8008a30 <xTaskRemoveFromEventList>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d007      	beq.n	8007c5c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c4c:	4b3c      	ldr	r3, [pc, #240]	; (8007d40 <xQueueReceive+0x1b4>)
 8007c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c5c:	f001 feac 	bl	80099b8 <vPortExitCritical>
				return pdPASS;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e069      	b.n	8007d38 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d103      	bne.n	8007c72 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c6a:	f001 fea5 	bl	80099b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	e062      	b.n	8007d38 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d106      	bne.n	8007c86 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c78:	f107 0310 	add.w	r3, r7, #16
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 ff99 	bl	8008bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c82:	2301      	movs	r3, #1
 8007c84:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c86:	f001 fe97 	bl	80099b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c8a:	f000 fc7b 	bl	8008584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c8e:	f001 fe65 	bl	800995c <vPortEnterCritical>
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c98:	b25b      	sxtb	r3, r3
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	d103      	bne.n	8007ca8 <xQueueReceive+0x11c>
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cae:	b25b      	sxtb	r3, r3
 8007cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb4:	d103      	bne.n	8007cbe <xQueueReceive+0x132>
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cbe:	f001 fe7b 	bl	80099b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cc2:	1d3a      	adds	r2, r7, #4
 8007cc4:	f107 0310 	add.w	r3, r7, #16
 8007cc8:	4611      	mov	r1, r2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 ff88 	bl	8008be0 <xTaskCheckForTimeOut>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d123      	bne.n	8007d1e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd8:	f000 f993 	bl	8008002 <prvIsQueueEmpty>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d017      	beq.n	8007d12 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	3324      	adds	r3, #36	; 0x24
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	4611      	mov	r1, r2
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fe18 	bl	8008920 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf2:	f000 f934 	bl	8007f5e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cf6:	f000 fc53 	bl	80085a0 <xTaskResumeAll>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d189      	bne.n	8007c14 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007d00:	4b0f      	ldr	r3, [pc, #60]	; (8007d40 <xQueueReceive+0x1b4>)
 8007d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	e780      	b.n	8007c14 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d14:	f000 f923 	bl	8007f5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d18:	f000 fc42 	bl	80085a0 <xTaskResumeAll>
 8007d1c:	e77a      	b.n	8007c14 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d20:	f000 f91d 	bl	8007f5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d24:	f000 fc3c 	bl	80085a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d2a:	f000 f96a 	bl	8008002 <prvIsQueueEmpty>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f43f af6f 	beq.w	8007c14 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3730      	adds	r7, #48	; 0x30
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	e000ed04 	.word	0xe000ed04

08007d44 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08e      	sub	sp, #56	; 0x38
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d109      	bne.n	8007d6e <xQueueReceiveFromISR+0x2a>
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	623b      	str	r3, [r7, #32]
 8007d6c:	e7fe      	b.n	8007d6c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d103      	bne.n	8007d7c <xQueueReceiveFromISR+0x38>
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <xQueueReceiveFromISR+0x3c>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <xQueueReceiveFromISR+0x3e>
 8007d80:	2300      	movs	r3, #0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d109      	bne.n	8007d9a <xQueueReceiveFromISR+0x56>
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	61fb      	str	r3, [r7, #28]
 8007d98:	e7fe      	b.n	8007d98 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d9a:	f001 febb 	bl	8009b14 <vPortValidateInterruptPriority>
	__asm volatile
 8007d9e:	f3ef 8211 	mrs	r2, BASEPRI
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	61ba      	str	r2, [r7, #24]
 8007db4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007db6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007db8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d02f      	beq.n	8007e26 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dd0:	68b9      	ldr	r1, [r7, #8]
 8007dd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dd4:	f000 f89d 	bl	8007f12 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	1e5a      	subs	r2, r3, #1
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007de0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de8:	d112      	bne.n	8007e10 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d016      	beq.n	8007e20 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	3310      	adds	r3, #16
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fe1a 	bl	8008a30 <xTaskRemoveFromEventList>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00e      	beq.n	8007e20 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	e007      	b.n	8007e20 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e14:	3301      	adds	r3, #1
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	b25a      	sxtb	r2, r3
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007e20:	2301      	movs	r3, #1
 8007e22:	637b      	str	r3, [r7, #52]	; 0x34
 8007e24:	e001      	b.n	8007e2a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3738      	adds	r7, #56	; 0x38
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b086      	sub	sp, #24
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	60b9      	str	r1, [r7, #8]
 8007e48:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e52:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10d      	bne.n	8007e78 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d14d      	bne.n	8007f00 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f001 f815 	bl	8008e98 <xTaskPriorityDisinherit>
 8007e6e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	609a      	str	r2, [r3, #8]
 8007e76:	e043      	b.n	8007f00 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d119      	bne.n	8007eb2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6858      	ldr	r0, [r3, #4]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e86:	461a      	mov	r2, r3
 8007e88:	68b9      	ldr	r1, [r7, #8]
 8007e8a:	f002 f881 	bl	8009f90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	441a      	add	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d32b      	bcc.n	8007f00 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	605a      	str	r2, [r3, #4]
 8007eb0:	e026      	b.n	8007f00 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	68d8      	ldr	r0, [r3, #12]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eba:	461a      	mov	r2, r3
 8007ebc:	68b9      	ldr	r1, [r7, #8]
 8007ebe:	f002 f867 	bl	8009f90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	425b      	negs	r3, r3
 8007ecc:	441a      	add	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d207      	bcs.n	8007eee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	689a      	ldr	r2, [r3, #8]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	425b      	negs	r3, r3
 8007ee8:	441a      	add	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d105      	bne.n	8007f00 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f08:	697b      	ldr	r3, [r7, #20]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d018      	beq.n	8007f56 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	68da      	ldr	r2, [r3, #12]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2c:	441a      	add	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d303      	bcc.n	8007f46 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68d9      	ldr	r1, [r3, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4e:	461a      	mov	r2, r3
 8007f50:	6838      	ldr	r0, [r7, #0]
 8007f52:	f002 f81d 	bl	8009f90 <memcpy>
	}
}
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f66:	f001 fcf9 	bl	800995c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f70:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f72:	e011      	b.n	8007f98 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d012      	beq.n	8007fa2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3324      	adds	r3, #36	; 0x24
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fd55 	bl	8008a30 <xTaskRemoveFromEventList>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f8c:	f000 fe88 	bl	8008ca0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dce9      	bgt.n	8007f74 <prvUnlockQueue+0x16>
 8007fa0:	e000      	b.n	8007fa4 <prvUnlockQueue+0x46>
					break;
 8007fa2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	22ff      	movs	r2, #255	; 0xff
 8007fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007fac:	f001 fd04 	bl	80099b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007fb0:	f001 fcd4 	bl	800995c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fbc:	e011      	b.n	8007fe2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d012      	beq.n	8007fec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3310      	adds	r3, #16
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fd30 	bl	8008a30 <xTaskRemoveFromEventList>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007fd6:	f000 fe63 	bl	8008ca0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dce9      	bgt.n	8007fbe <prvUnlockQueue+0x60>
 8007fea:	e000      	b.n	8007fee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007fec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	22ff      	movs	r2, #255	; 0xff
 8007ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ff6:	f001 fcdf 	bl	80099b8 <vPortExitCritical>
}
 8007ffa:	bf00      	nop
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800800a:	f001 fca7 	bl	800995c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008012:	2b00      	cmp	r3, #0
 8008014:	d102      	bne.n	800801c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008016:	2301      	movs	r3, #1
 8008018:	60fb      	str	r3, [r7, #12]
 800801a:	e001      	b.n	8008020 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008020:	f001 fcca 	bl	80099b8 <vPortExitCritical>

	return xReturn;
 8008024:	68fb      	ldr	r3, [r7, #12]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008036:	f001 fc91 	bl	800995c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008042:	429a      	cmp	r2, r3
 8008044:	d102      	bne.n	800804c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008046:	2301      	movs	r3, #1
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	e001      	b.n	8008050 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008050:	f001 fcb2 	bl	80099b8 <vPortExitCritical>

	return xReturn;
 8008054:	68fb      	ldr	r3, [r7, #12]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	e014      	b.n	800809a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008070:	4a0e      	ldr	r2, [pc, #56]	; (80080ac <vQueueAddToRegistry+0x4c>)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10b      	bne.n	8008094 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800807c:	490b      	ldr	r1, [pc, #44]	; (80080ac <vQueueAddToRegistry+0x4c>)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008086:	4a09      	ldr	r2, [pc, #36]	; (80080ac <vQueueAddToRegistry+0x4c>)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	00db      	lsls	r3, r3, #3
 800808c:	4413      	add	r3, r2
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008092:	e005      	b.n	80080a0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	3301      	adds	r3, #1
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b07      	cmp	r3, #7
 800809e:	d9e7      	bls.n	8008070 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80080a0:	bf00      	nop
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20010fd4 	.word	0x20010fd4

080080b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80080c0:	f001 fc4c 	bl	800995c <vPortEnterCritical>
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ca:	b25b      	sxtb	r3, r3
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d0:	d103      	bne.n	80080da <vQueueWaitForMessageRestricted+0x2a>
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080e0:	b25b      	sxtb	r3, r3
 80080e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e6:	d103      	bne.n	80080f0 <vQueueWaitForMessageRestricted+0x40>
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080f0:	f001 fc62 	bl	80099b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d106      	bne.n	800810a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	3324      	adds	r3, #36	; 0x24
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	68b9      	ldr	r1, [r7, #8]
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fc69 	bl	80089dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800810a:	6978      	ldr	r0, [r7, #20]
 800810c:	f7ff ff27 	bl	8007f5e <prvUnlockQueue>
	}
 8008110:	bf00      	nop
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08e      	sub	sp, #56	; 0x38
 800811c:	af04      	add	r7, sp, #16
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008128:	2b00      	cmp	r3, #0
 800812a:	d109      	bne.n	8008140 <xTaskCreateStatic+0x28>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	623b      	str	r3, [r7, #32]
 800813e:	e7fe      	b.n	800813e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008142:	2b00      	cmp	r3, #0
 8008144:	d109      	bne.n	800815a <xTaskCreateStatic+0x42>
 8008146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	61fb      	str	r3, [r7, #28]
 8008158:	e7fe      	b.n	8008158 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800815a:	236c      	movs	r3, #108	; 0x6c
 800815c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	2b6c      	cmp	r3, #108	; 0x6c
 8008162:	d009      	beq.n	8008178 <xTaskCreateStatic+0x60>
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	61bb      	str	r3, [r7, #24]
 8008176:	e7fe      	b.n	8008176 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008178:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800817a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817c:	2b00      	cmp	r3, #0
 800817e:	d01e      	beq.n	80081be <xTaskCreateStatic+0xa6>
 8008180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008182:	2b00      	cmp	r3, #0
 8008184:	d01b      	beq.n	80081be <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800818e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	2202      	movs	r2, #2
 8008194:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008198:	2300      	movs	r3, #0
 800819a:	9303      	str	r3, [sp, #12]
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	9302      	str	r3, [sp, #8]
 80081a0:	f107 0314 	add.w	r3, r7, #20
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	68b9      	ldr	r1, [r7, #8]
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 f850 	bl	8008256 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081b8:	f000 f8dc 	bl	8008374 <prvAddNewTaskToReadyList>
 80081bc:	e001      	b.n	80081c2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80081c2:	697b      	ldr	r3, [r7, #20]
	}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3728      	adds	r7, #40	; 0x28
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08c      	sub	sp, #48	; 0x30
 80081d0:	af04      	add	r7, sp, #16
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	4613      	mov	r3, r2
 80081da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80081dc:	88fb      	ldrh	r3, [r7, #6]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4618      	mov	r0, r3
 80081e2:	f001 fcd5 	bl	8009b90 <pvPortMalloc>
 80081e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00e      	beq.n	800820c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081ee:	206c      	movs	r0, #108	; 0x6c
 80081f0:	f001 fcce 	bl	8009b90 <pvPortMalloc>
 80081f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	631a      	str	r2, [r3, #48]	; 0x30
 8008202:	e005      	b.n	8008210 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008204:	6978      	ldr	r0, [r7, #20]
 8008206:	f001 fd85 	bl	8009d14 <vPortFree>
 800820a:	e001      	b.n	8008210 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800820c:	2300      	movs	r3, #0
 800820e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d017      	beq.n	8008246 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800821e:	88fa      	ldrh	r2, [r7, #6]
 8008220:	2300      	movs	r3, #0
 8008222:	9303      	str	r3, [sp, #12]
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	9302      	str	r3, [sp, #8]
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	68b9      	ldr	r1, [r7, #8]
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f000 f80e 	bl	8008256 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800823a:	69f8      	ldr	r0, [r7, #28]
 800823c:	f000 f89a 	bl	8008374 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008240:	2301      	movs	r3, #1
 8008242:	61bb      	str	r3, [r7, #24]
 8008244:	e002      	b.n	800824c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008246:	f04f 33ff 	mov.w	r3, #4294967295
 800824a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800824c:	69bb      	ldr	r3, [r7, #24]
	}
 800824e:	4618      	mov	r0, r3
 8008250:	3720      	adds	r7, #32
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b088      	sub	sp, #32
 800825a:	af00      	add	r7, sp, #0
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	60b9      	str	r1, [r7, #8]
 8008260:	607a      	str	r2, [r7, #4]
 8008262:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	461a      	mov	r2, r3
 800826e:	21a5      	movs	r1, #165	; 0xa5
 8008270:	f001 fe99 	bl	8009fa6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800827e:	3b01      	subs	r3, #1
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	f023 0307 	bic.w	r3, r3, #7
 800828c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	f003 0307 	and.w	r3, r3, #7
 8008294:	2b00      	cmp	r3, #0
 8008296:	d009      	beq.n	80082ac <prvInitialiseNewTask+0x56>
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	617b      	str	r3, [r7, #20]
 80082aa:	e7fe      	b.n	80082aa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d01f      	beq.n	80082f2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082b2:	2300      	movs	r3, #0
 80082b4:	61fb      	str	r3, [r7, #28]
 80082b6:	e012      	b.n	80082de <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	4413      	add	r3, r2
 80082be:	7819      	ldrb	r1, [r3, #0]
 80082c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	3334      	adds	r3, #52	; 0x34
 80082c8:	460a      	mov	r2, r1
 80082ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	4413      	add	r3, r2
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d006      	beq.n	80082e6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	3301      	adds	r3, #1
 80082dc:	61fb      	str	r3, [r7, #28]
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	2b1f      	cmp	r3, #31
 80082e2:	d9e9      	bls.n	80082b8 <prvInitialiseNewTask+0x62>
 80082e4:	e000      	b.n	80082e8 <prvInitialiseNewTask+0x92>
			{
				break;
 80082e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80082f0:	e003      	b.n	80082fa <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fc:	2b37      	cmp	r3, #55	; 0x37
 80082fe:	d901      	bls.n	8008304 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008300:	2337      	movs	r3, #55	; 0x37
 8008302:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008308:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800830e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	2200      	movs	r2, #0
 8008314:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	3304      	adds	r3, #4
 800831a:	4618      	mov	r0, r3
 800831c:	f7ff f8d6 	bl	80074cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008322:	3318      	adds	r3, #24
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff f8d1 	bl	80074cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800833e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	2200      	movs	r2, #0
 8008344:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	68f9      	ldr	r1, [r7, #12]
 8008352:	69b8      	ldr	r0, [r7, #24]
 8008354:	f001 f9de 	bl	8009714 <pxPortInitialiseStack>
 8008358:	4602      	mov	r2, r0
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800836a:	bf00      	nop
 800836c:	3720      	adds	r7, #32
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800837c:	f001 faee 	bl	800995c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008380:	4b2d      	ldr	r3, [pc, #180]	; (8008438 <prvAddNewTaskToReadyList+0xc4>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3301      	adds	r3, #1
 8008386:	4a2c      	ldr	r2, [pc, #176]	; (8008438 <prvAddNewTaskToReadyList+0xc4>)
 8008388:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800838a:	4b2c      	ldr	r3, [pc, #176]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d109      	bne.n	80083a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008392:	4a2a      	ldr	r2, [pc, #168]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008398:	4b27      	ldr	r3, [pc, #156]	; (8008438 <prvAddNewTaskToReadyList+0xc4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d110      	bne.n	80083c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80083a0:	f000 fca2 	bl	8008ce8 <prvInitialiseTaskLists>
 80083a4:	e00d      	b.n	80083c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80083a6:	4b26      	ldr	r3, [pc, #152]	; (8008440 <prvAddNewTaskToReadyList+0xcc>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d109      	bne.n	80083c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80083ae:	4b23      	ldr	r3, [pc, #140]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d802      	bhi.n	80083c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083bc:	4a1f      	ldr	r2, [pc, #124]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80083c2:	4b20      	ldr	r3, [pc, #128]	; (8008444 <prvAddNewTaskToReadyList+0xd0>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3301      	adds	r3, #1
 80083c8:	4a1e      	ldr	r2, [pc, #120]	; (8008444 <prvAddNewTaskToReadyList+0xd0>)
 80083ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80083cc:	4b1d      	ldr	r3, [pc, #116]	; (8008444 <prvAddNewTaskToReadyList+0xd0>)
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d8:	4b1b      	ldr	r3, [pc, #108]	; (8008448 <prvAddNewTaskToReadyList+0xd4>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d903      	bls.n	80083e8 <prvAddNewTaskToReadyList+0x74>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	4a18      	ldr	r2, [pc, #96]	; (8008448 <prvAddNewTaskToReadyList+0xd4>)
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ec:	4613      	mov	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4a15      	ldr	r2, [pc, #84]	; (800844c <prvAddNewTaskToReadyList+0xd8>)
 80083f6:	441a      	add	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4619      	mov	r1, r3
 80083fe:	4610      	mov	r0, r2
 8008400:	f7ff f871 	bl	80074e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008404:	f001 fad8 	bl	80099b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008408:	4b0d      	ldr	r3, [pc, #52]	; (8008440 <prvAddNewTaskToReadyList+0xcc>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00e      	beq.n	800842e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008410:	4b0a      	ldr	r3, [pc, #40]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	429a      	cmp	r2, r3
 800841c:	d207      	bcs.n	800842e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800841e:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <prvAddNewTaskToReadyList+0xdc>)
 8008420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800842e:	bf00      	nop
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000c44 	.word	0x20000c44
 800843c:	20000770 	.word	0x20000770
 8008440:	20000c50 	.word	0x20000c50
 8008444:	20000c60 	.word	0x20000c60
 8008448:	20000c4c 	.word	0x20000c4c
 800844c:	20000774 	.word	0x20000774
 8008450:	e000ed04 	.word	0xe000ed04

08008454 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800845c:	2300      	movs	r3, #0
 800845e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d016      	beq.n	8008494 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008466:	4b13      	ldr	r3, [pc, #76]	; (80084b4 <vTaskDelay+0x60>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d009      	beq.n	8008482 <vTaskDelay+0x2e>
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	60bb      	str	r3, [r7, #8]
 8008480:	e7fe      	b.n	8008480 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008482:	f000 f87f 	bl	8008584 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008486:	2100      	movs	r1, #0
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fd89 	bl	8008fa0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800848e:	f000 f887 	bl	80085a0 <xTaskResumeAll>
 8008492:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d107      	bne.n	80084aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800849a:	4b07      	ldr	r3, [pc, #28]	; (80084b8 <vTaskDelay+0x64>)
 800849c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	20000c6c 	.word	0x20000c6c
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08a      	sub	sp, #40	; 0x28
 80084c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084ca:	463a      	mov	r2, r7
 80084cc:	1d39      	adds	r1, r7, #4
 80084ce:	f107 0308 	add.w	r3, r7, #8
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe fd46 	bl	8006f64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	9202      	str	r2, [sp, #8]
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	2300      	movs	r3, #0
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	2300      	movs	r3, #0
 80084e8:	460a      	mov	r2, r1
 80084ea:	4920      	ldr	r1, [pc, #128]	; (800856c <vTaskStartScheduler+0xb0>)
 80084ec:	4820      	ldr	r0, [pc, #128]	; (8008570 <vTaskStartScheduler+0xb4>)
 80084ee:	f7ff fe13 	bl	8008118 <xTaskCreateStatic>
 80084f2:	4602      	mov	r2, r0
 80084f4:	4b1f      	ldr	r3, [pc, #124]	; (8008574 <vTaskStartScheduler+0xb8>)
 80084f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084f8:	4b1e      	ldr	r3, [pc, #120]	; (8008574 <vTaskStartScheduler+0xb8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008500:	2301      	movs	r3, #1
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	e001      	b.n	800850a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008506:	2300      	movs	r3, #0
 8008508:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d102      	bne.n	8008516 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008510:	f000 fd9a 	bl	8009048 <xTimerCreateTimerTask>
 8008514:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d115      	bne.n	8008548 <vTaskStartScheduler+0x8c>
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800852e:	4b12      	ldr	r3, [pc, #72]	; (8008578 <vTaskStartScheduler+0xbc>)
 8008530:	f04f 32ff 	mov.w	r2, #4294967295
 8008534:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008536:	4b11      	ldr	r3, [pc, #68]	; (800857c <vTaskStartScheduler+0xc0>)
 8008538:	2201      	movs	r2, #1
 800853a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800853c:	4b10      	ldr	r3, [pc, #64]	; (8008580 <vTaskStartScheduler+0xc4>)
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008542:	f001 f96d 	bl	8009820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008546:	e00d      	b.n	8008564 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854e:	d109      	bne.n	8008564 <vTaskStartScheduler+0xa8>
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	60fb      	str	r3, [r7, #12]
 8008562:	e7fe      	b.n	8008562 <vTaskStartScheduler+0xa6>
}
 8008564:	bf00      	nop
 8008566:	3718      	adds	r7, #24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	0800a97c 	.word	0x0800a97c
 8008570:	08008cb9 	.word	0x08008cb9
 8008574:	20000c68 	.word	0x20000c68
 8008578:	20000c64 	.word	0x20000c64
 800857c:	20000c50 	.word	0x20000c50
 8008580:	20000c48 	.word	0x20000c48

08008584 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008584:	b480      	push	{r7}
 8008586:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008588:	4b04      	ldr	r3, [pc, #16]	; (800859c <vTaskSuspendAll+0x18>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3301      	adds	r3, #1
 800858e:	4a03      	ldr	r2, [pc, #12]	; (800859c <vTaskSuspendAll+0x18>)
 8008590:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008592:	bf00      	nop
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	20000c6c 	.word	0x20000c6c

080085a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085ae:	4b41      	ldr	r3, [pc, #260]	; (80086b4 <xTaskResumeAll+0x114>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d109      	bne.n	80085ca <xTaskResumeAll+0x2a>
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	603b      	str	r3, [r7, #0]
 80085c8:	e7fe      	b.n	80085c8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085ca:	f001 f9c7 	bl	800995c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085ce:	4b39      	ldr	r3, [pc, #228]	; (80086b4 <xTaskResumeAll+0x114>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3b01      	subs	r3, #1
 80085d4:	4a37      	ldr	r2, [pc, #220]	; (80086b4 <xTaskResumeAll+0x114>)
 80085d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085d8:	4b36      	ldr	r3, [pc, #216]	; (80086b4 <xTaskResumeAll+0x114>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d162      	bne.n	80086a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085e0:	4b35      	ldr	r3, [pc, #212]	; (80086b8 <xTaskResumeAll+0x118>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d05e      	beq.n	80086a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085e8:	e02f      	b.n	800864a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ea:	4b34      	ldr	r3, [pc, #208]	; (80086bc <xTaskResumeAll+0x11c>)
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	3318      	adds	r3, #24
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe ffd2 	bl	80075a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3304      	adds	r3, #4
 8008600:	4618      	mov	r0, r3
 8008602:	f7fe ffcd 	bl	80075a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860a:	4b2d      	ldr	r3, [pc, #180]	; (80086c0 <xTaskResumeAll+0x120>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d903      	bls.n	800861a <xTaskResumeAll+0x7a>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008616:	4a2a      	ldr	r2, [pc, #168]	; (80086c0 <xTaskResumeAll+0x120>)
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4a27      	ldr	r2, [pc, #156]	; (80086c4 <xTaskResumeAll+0x124>)
 8008628:	441a      	add	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3304      	adds	r3, #4
 800862e:	4619      	mov	r1, r3
 8008630:	4610      	mov	r0, r2
 8008632:	f7fe ff58 	bl	80074e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863a:	4b23      	ldr	r3, [pc, #140]	; (80086c8 <xTaskResumeAll+0x128>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	429a      	cmp	r2, r3
 8008642:	d302      	bcc.n	800864a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008644:	4b21      	ldr	r3, [pc, #132]	; (80086cc <xTaskResumeAll+0x12c>)
 8008646:	2201      	movs	r2, #1
 8008648:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800864a:	4b1c      	ldr	r3, [pc, #112]	; (80086bc <xTaskResumeAll+0x11c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1cb      	bne.n	80085ea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008658:	f000 fbe0 	bl	8008e1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800865c:	4b1c      	ldr	r3, [pc, #112]	; (80086d0 <xTaskResumeAll+0x130>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d010      	beq.n	800868a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008668:	f000 f846 	bl	80086f8 <xTaskIncrementTick>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008672:	4b16      	ldr	r3, [pc, #88]	; (80086cc <xTaskResumeAll+0x12c>)
 8008674:	2201      	movs	r2, #1
 8008676:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3b01      	subs	r3, #1
 800867c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1f1      	bne.n	8008668 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008684:	4b12      	ldr	r3, [pc, #72]	; (80086d0 <xTaskResumeAll+0x130>)
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800868a:	4b10      	ldr	r3, [pc, #64]	; (80086cc <xTaskResumeAll+0x12c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d009      	beq.n	80086a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008692:	2301      	movs	r3, #1
 8008694:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008696:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <xTaskResumeAll+0x134>)
 8008698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086a6:	f001 f987 	bl	80099b8 <vPortExitCritical>

	return xAlreadyYielded;
 80086aa:	68bb      	ldr	r3, [r7, #8]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20000c6c 	.word	0x20000c6c
 80086b8:	20000c44 	.word	0x20000c44
 80086bc:	20000c04 	.word	0x20000c04
 80086c0:	20000c4c 	.word	0x20000c4c
 80086c4:	20000774 	.word	0x20000774
 80086c8:	20000770 	.word	0x20000770
 80086cc:	20000c58 	.word	0x20000c58
 80086d0:	20000c54 	.word	0x20000c54
 80086d4:	e000ed04 	.word	0xe000ed04

080086d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086de:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <xTaskGetTickCount+0x1c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086e4:	687b      	ldr	r3, [r7, #4]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	20000c48 	.word	0x20000c48

080086f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086fe:	2300      	movs	r3, #0
 8008700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008702:	4b4e      	ldr	r3, [pc, #312]	; (800883c <xTaskIncrementTick+0x144>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 8088 	bne.w	800881c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800870c:	4b4c      	ldr	r3, [pc, #304]	; (8008840 <xTaskIncrementTick+0x148>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3301      	adds	r3, #1
 8008712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008714:	4a4a      	ldr	r2, [pc, #296]	; (8008840 <xTaskIncrementTick+0x148>)
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d11f      	bne.n	8008760 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008720:	4b48      	ldr	r3, [pc, #288]	; (8008844 <xTaskIncrementTick+0x14c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d009      	beq.n	800873e <xTaskIncrementTick+0x46>
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	e7fe      	b.n	800873c <xTaskIncrementTick+0x44>
 800873e:	4b41      	ldr	r3, [pc, #260]	; (8008844 <xTaskIncrementTick+0x14c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	4b40      	ldr	r3, [pc, #256]	; (8008848 <xTaskIncrementTick+0x150>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a3e      	ldr	r2, [pc, #248]	; (8008844 <xTaskIncrementTick+0x14c>)
 800874a:	6013      	str	r3, [r2, #0]
 800874c:	4a3e      	ldr	r2, [pc, #248]	; (8008848 <xTaskIncrementTick+0x150>)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	4b3e      	ldr	r3, [pc, #248]	; (800884c <xTaskIncrementTick+0x154>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3301      	adds	r3, #1
 8008758:	4a3c      	ldr	r2, [pc, #240]	; (800884c <xTaskIncrementTick+0x154>)
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	f000 fb5e 	bl	8008e1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008760:	4b3b      	ldr	r3, [pc, #236]	; (8008850 <xTaskIncrementTick+0x158>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	429a      	cmp	r2, r3
 8008768:	d349      	bcc.n	80087fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800876a:	4b36      	ldr	r3, [pc, #216]	; (8008844 <xTaskIncrementTick+0x14c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d104      	bne.n	800877e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008774:	4b36      	ldr	r3, [pc, #216]	; (8008850 <xTaskIncrementTick+0x158>)
 8008776:	f04f 32ff 	mov.w	r2, #4294967295
 800877a:	601a      	str	r2, [r3, #0]
					break;
 800877c:	e03f      	b.n	80087fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800877e:	4b31      	ldr	r3, [pc, #196]	; (8008844 <xTaskIncrementTick+0x14c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	429a      	cmp	r2, r3
 8008794:	d203      	bcs.n	800879e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008796:	4a2e      	ldr	r2, [pc, #184]	; (8008850 <xTaskIncrementTick+0x158>)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800879c:	e02f      	b.n	80087fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	3304      	adds	r3, #4
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe fefc 	bl	80075a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d004      	beq.n	80087ba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	3318      	adds	r3, #24
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fe fef3 	bl	80075a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087be:	4b25      	ldr	r3, [pc, #148]	; (8008854 <xTaskIncrementTick+0x15c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d903      	bls.n	80087ce <xTaskIncrementTick+0xd6>
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ca:	4a22      	ldr	r2, [pc, #136]	; (8008854 <xTaskIncrementTick+0x15c>)
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d2:	4613      	mov	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4a1f      	ldr	r2, [pc, #124]	; (8008858 <xTaskIncrementTick+0x160>)
 80087dc:	441a      	add	r2, r3
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	3304      	adds	r3, #4
 80087e2:	4619      	mov	r1, r3
 80087e4:	4610      	mov	r0, r2
 80087e6:	f7fe fe7e 	bl	80074e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ee:	4b1b      	ldr	r3, [pc, #108]	; (800885c <xTaskIncrementTick+0x164>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d3b8      	bcc.n	800876a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80087f8:	2301      	movs	r3, #1
 80087fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087fc:	e7b5      	b.n	800876a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087fe:	4b17      	ldr	r3, [pc, #92]	; (800885c <xTaskIncrementTick+0x164>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008804:	4914      	ldr	r1, [pc, #80]	; (8008858 <xTaskIncrementTick+0x160>)
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d907      	bls.n	8008826 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8008816:	2301      	movs	r3, #1
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	e004      	b.n	8008826 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800881c:	4b10      	ldr	r3, [pc, #64]	; (8008860 <xTaskIncrementTick+0x168>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3301      	adds	r3, #1
 8008822:	4a0f      	ldr	r2, [pc, #60]	; (8008860 <xTaskIncrementTick+0x168>)
 8008824:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008826:	4b0f      	ldr	r3, [pc, #60]	; (8008864 <xTaskIncrementTick+0x16c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800882e:	2301      	movs	r3, #1
 8008830:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008832:	697b      	ldr	r3, [r7, #20]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	20000c6c 	.word	0x20000c6c
 8008840:	20000c48 	.word	0x20000c48
 8008844:	20000bfc 	.word	0x20000bfc
 8008848:	20000c00 	.word	0x20000c00
 800884c:	20000c5c 	.word	0x20000c5c
 8008850:	20000c64 	.word	0x20000c64
 8008854:	20000c4c 	.word	0x20000c4c
 8008858:	20000774 	.word	0x20000774
 800885c:	20000770 	.word	0x20000770
 8008860:	20000c54 	.word	0x20000c54
 8008864:	20000c58 	.word	0x20000c58

08008868 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800886e:	4b27      	ldr	r3, [pc, #156]	; (800890c <vTaskSwitchContext+0xa4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008876:	4b26      	ldr	r3, [pc, #152]	; (8008910 <vTaskSwitchContext+0xa8>)
 8008878:	2201      	movs	r2, #1
 800887a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800887c:	e040      	b.n	8008900 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800887e:	4b24      	ldr	r3, [pc, #144]	; (8008910 <vTaskSwitchContext+0xa8>)
 8008880:	2200      	movs	r2, #0
 8008882:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008884:	4b23      	ldr	r3, [pc, #140]	; (8008914 <vTaskSwitchContext+0xac>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60fb      	str	r3, [r7, #12]
 800888a:	e00f      	b.n	80088ac <vTaskSwitchContext+0x44>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d109      	bne.n	80088a6 <vTaskSwitchContext+0x3e>
 8008892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	607b      	str	r3, [r7, #4]
 80088a4:	e7fe      	b.n	80088a4 <vTaskSwitchContext+0x3c>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3b01      	subs	r3, #1
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	491a      	ldr	r1, [pc, #104]	; (8008918 <vTaskSwitchContext+0xb0>)
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	4613      	mov	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	440b      	add	r3, r1
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d0e5      	beq.n	800888c <vTaskSwitchContext+0x24>
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	4613      	mov	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4a13      	ldr	r2, [pc, #76]	; (8008918 <vTaskSwitchContext+0xb0>)
 80088cc:	4413      	add	r3, r2
 80088ce:	60bb      	str	r3, [r7, #8]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	605a      	str	r2, [r3, #4]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	685a      	ldr	r2, [r3, #4]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	3308      	adds	r3, #8
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d104      	bne.n	80088f0 <vTaskSwitchContext+0x88>
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	605a      	str	r2, [r3, #4]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	4a09      	ldr	r2, [pc, #36]	; (800891c <vTaskSwitchContext+0xb4>)
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	4a06      	ldr	r2, [pc, #24]	; (8008914 <vTaskSwitchContext+0xac>)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6013      	str	r3, [r2, #0]
}
 8008900:	bf00      	nop
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	20000c6c 	.word	0x20000c6c
 8008910:	20000c58 	.word	0x20000c58
 8008914:	20000c4c 	.word	0x20000c4c
 8008918:	20000774 	.word	0x20000774
 800891c:	20000770 	.word	0x20000770

08008920 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d109      	bne.n	8008944 <vTaskPlaceOnEventList+0x24>
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	60fb      	str	r3, [r7, #12]
 8008942:	e7fe      	b.n	8008942 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008944:	4b07      	ldr	r3, [pc, #28]	; (8008964 <vTaskPlaceOnEventList+0x44>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	3318      	adds	r3, #24
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7fe fdee 	bl	800752e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008952:	2101      	movs	r1, #1
 8008954:	6838      	ldr	r0, [r7, #0]
 8008956:	f000 fb23 	bl	8008fa0 <prvAddCurrentTaskToDelayedList>
}
 800895a:	bf00      	nop
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20000770 	.word	0x20000770

08008968 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d109      	bne.n	800898e <vTaskPlaceOnUnorderedEventList+0x26>
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	617b      	str	r3, [r7, #20]
 800898c:	e7fe      	b.n	800898c <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800898e:	4b11      	ldr	r3, [pc, #68]	; (80089d4 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d109      	bne.n	80089aa <vTaskPlaceOnUnorderedEventList+0x42>
 8008996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	613b      	str	r3, [r7, #16]
 80089a8:	e7fe      	b.n	80089a8 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80089aa:	4b0b      	ldr	r3, [pc, #44]	; (80089d8 <vTaskPlaceOnUnorderedEventList+0x70>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80089b4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089b6:	4b08      	ldr	r3, [pc, #32]	; (80089d8 <vTaskPlaceOnUnorderedEventList+0x70>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3318      	adds	r3, #24
 80089bc:	4619      	mov	r1, r3
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f7fe fd91 	bl	80074e6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089c4:	2101      	movs	r1, #1
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 faea 	bl	8008fa0 <prvAddCurrentTaskToDelayedList>
}
 80089cc:	bf00      	nop
 80089ce:	3718      	adds	r7, #24
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20000c6c 	.word	0x20000c6c
 80089d8:	20000770 	.word	0x20000770

080089dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d109      	bne.n	8008a02 <vTaskPlaceOnEventListRestricted+0x26>
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	e7fe      	b.n	8008a00 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a02:	4b0a      	ldr	r3, [pc, #40]	; (8008a2c <vTaskPlaceOnEventListRestricted+0x50>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3318      	adds	r3, #24
 8008a08:	4619      	mov	r1, r3
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f7fe fd6b 	bl	80074e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d002      	beq.n	8008a1c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008a16:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a1c:	6879      	ldr	r1, [r7, #4]
 8008a1e:	68b8      	ldr	r0, [r7, #8]
 8008a20:	f000 fabe 	bl	8008fa0 <prvAddCurrentTaskToDelayedList>
	}
 8008a24:	bf00      	nop
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	20000770 	.word	0x20000770

08008a30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d109      	bne.n	8008a5a <xTaskRemoveFromEventList+0x2a>
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	e7fe      	b.n	8008a58 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	3318      	adds	r3, #24
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe fd9e 	bl	80075a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a64:	4b1d      	ldr	r3, [pc, #116]	; (8008adc <xTaskRemoveFromEventList+0xac>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d11d      	bne.n	8008aa8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	3304      	adds	r3, #4
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fe fd95 	bl	80075a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a7a:	4b19      	ldr	r3, [pc, #100]	; (8008ae0 <xTaskRemoveFromEventList+0xb0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d903      	bls.n	8008a8a <xTaskRemoveFromEventList+0x5a>
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a86:	4a16      	ldr	r2, [pc, #88]	; (8008ae0 <xTaskRemoveFromEventList+0xb0>)
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8e:	4613      	mov	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4a13      	ldr	r2, [pc, #76]	; (8008ae4 <xTaskRemoveFromEventList+0xb4>)
 8008a98:	441a      	add	r2, r3
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f7fe fd20 	bl	80074e6 <vListInsertEnd>
 8008aa6:	e005      	b.n	8008ab4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	3318      	adds	r3, #24
 8008aac:	4619      	mov	r1, r3
 8008aae:	480e      	ldr	r0, [pc, #56]	; (8008ae8 <xTaskRemoveFromEventList+0xb8>)
 8008ab0:	f7fe fd19 	bl	80074e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab8:	4b0c      	ldr	r3, [pc, #48]	; (8008aec <xTaskRemoveFromEventList+0xbc>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d905      	bls.n	8008ace <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ac6:	4b0a      	ldr	r3, [pc, #40]	; (8008af0 <xTaskRemoveFromEventList+0xc0>)
 8008ac8:	2201      	movs	r2, #1
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	e001      	b.n	8008ad2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ad2:	697b      	ldr	r3, [r7, #20]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	20000c6c 	.word	0x20000c6c
 8008ae0:	20000c4c 	.word	0x20000c4c
 8008ae4:	20000774 	.word	0x20000774
 8008ae8:	20000c04 	.word	0x20000c04
 8008aec:	20000770 	.word	0x20000770
 8008af0:	20000c58 	.word	0x20000c58

08008af4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8008afe:	4b28      	ldr	r3, [pc, #160]	; (8008ba0 <vTaskRemoveFromUnorderedEventList+0xac>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d109      	bne.n	8008b1a <vTaskRemoveFromUnorderedEventList+0x26>
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	613b      	str	r3, [r7, #16]
 8008b18:	e7fe      	b.n	8008b18 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d109      	bne.n	8008b44 <vTaskRemoveFromUnorderedEventList+0x50>
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	e7fe      	b.n	8008b42 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7fe fd2b 	bl	80075a0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe fd26 	bl	80075a0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b58:	4b12      	ldr	r3, [pc, #72]	; (8008ba4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d903      	bls.n	8008b68 <vTaskRemoveFromUnorderedEventList+0x74>
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	4a0f      	ldr	r2, [pc, #60]	; (8008ba4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008b66:	6013      	str	r3, [r2, #0]
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4a0c      	ldr	r2, [pc, #48]	; (8008ba8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008b76:	441a      	add	r2, r3
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	4610      	mov	r0, r2
 8008b80:	f7fe fcb1 	bl	80074e6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b88:	4b08      	ldr	r3, [pc, #32]	; (8008bac <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d902      	bls.n	8008b98 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008b92:	4b07      	ldr	r3, [pc, #28]	; (8008bb0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008b94:	2201      	movs	r2, #1
 8008b96:	601a      	str	r2, [r3, #0]
	}
}
 8008b98:	bf00      	nop
 8008b9a:	3718      	adds	r7, #24
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	20000c6c 	.word	0x20000c6c
 8008ba4:	20000c4c 	.word	0x20000c4c
 8008ba8:	20000774 	.word	0x20000774
 8008bac:	20000770 	.word	0x20000770
 8008bb0:	20000c58 	.word	0x20000c58

08008bb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bbc:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <vTaskInternalSetTimeOutState+0x24>)
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008bc4:	4b05      	ldr	r3, [pc, #20]	; (8008bdc <vTaskInternalSetTimeOutState+0x28>)
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	605a      	str	r2, [r3, #4]
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	20000c5c 	.word	0x20000c5c
 8008bdc:	20000c48 	.word	0x20000c48

08008be0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d109      	bne.n	8008c04 <xTaskCheckForTimeOut+0x24>
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	613b      	str	r3, [r7, #16]
 8008c02:	e7fe      	b.n	8008c02 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d109      	bne.n	8008c1e <xTaskCheckForTimeOut+0x3e>
 8008c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	60fb      	str	r3, [r7, #12]
 8008c1c:	e7fe      	b.n	8008c1c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008c1e:	f000 fe9d 	bl	800995c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c22:	4b1d      	ldr	r3, [pc, #116]	; (8008c98 <xTaskCheckForTimeOut+0xb8>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3a:	d102      	bne.n	8008c42 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	61fb      	str	r3, [r7, #28]
 8008c40:	e023      	b.n	8008c8a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	4b15      	ldr	r3, [pc, #84]	; (8008c9c <xTaskCheckForTimeOut+0xbc>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d007      	beq.n	8008c5e <xTaskCheckForTimeOut+0x7e>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d302      	bcc.n	8008c5e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	61fb      	str	r3, [r7, #28]
 8008c5c:	e015      	b.n	8008c8a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d20b      	bcs.n	8008c80 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	1ad2      	subs	r2, r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff ff9d 	bl	8008bb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	61fb      	str	r3, [r7, #28]
 8008c7e:	e004      	b.n	8008c8a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	2200      	movs	r2, #0
 8008c84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c86:	2301      	movs	r3, #1
 8008c88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c8a:	f000 fe95 	bl	80099b8 <vPortExitCritical>

	return xReturn;
 8008c8e:	69fb      	ldr	r3, [r7, #28]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3720      	adds	r7, #32
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	20000c48 	.word	0x20000c48
 8008c9c:	20000c5c 	.word	0x20000c5c

08008ca0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ca4:	4b03      	ldr	r3, [pc, #12]	; (8008cb4 <vTaskMissedYield+0x14>)
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	601a      	str	r2, [r3, #0]
}
 8008caa:	bf00      	nop
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	20000c58 	.word	0x20000c58

08008cb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008cc0:	f000 f852 	bl	8008d68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008cc4:	4b06      	ldr	r3, [pc, #24]	; (8008ce0 <prvIdleTask+0x28>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d9f9      	bls.n	8008cc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ccc:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <prvIdleTask+0x2c>)
 8008cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008cdc:	e7f0      	b.n	8008cc0 <prvIdleTask+0x8>
 8008cde:	bf00      	nop
 8008ce0:	20000774 	.word	0x20000774
 8008ce4:	e000ed04 	.word	0xe000ed04

08008ce8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cee:	2300      	movs	r3, #0
 8008cf0:	607b      	str	r3, [r7, #4]
 8008cf2:	e00c      	b.n	8008d0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4a12      	ldr	r2, [pc, #72]	; (8008d48 <prvInitialiseTaskLists+0x60>)
 8008d00:	4413      	add	r3, r2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe fbc2 	bl	800748c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	607b      	str	r3, [r7, #4]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b37      	cmp	r3, #55	; 0x37
 8008d12:	d9ef      	bls.n	8008cf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d14:	480d      	ldr	r0, [pc, #52]	; (8008d4c <prvInitialiseTaskLists+0x64>)
 8008d16:	f7fe fbb9 	bl	800748c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d1a:	480d      	ldr	r0, [pc, #52]	; (8008d50 <prvInitialiseTaskLists+0x68>)
 8008d1c:	f7fe fbb6 	bl	800748c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d20:	480c      	ldr	r0, [pc, #48]	; (8008d54 <prvInitialiseTaskLists+0x6c>)
 8008d22:	f7fe fbb3 	bl	800748c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d26:	480c      	ldr	r0, [pc, #48]	; (8008d58 <prvInitialiseTaskLists+0x70>)
 8008d28:	f7fe fbb0 	bl	800748c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d2c:	480b      	ldr	r0, [pc, #44]	; (8008d5c <prvInitialiseTaskLists+0x74>)
 8008d2e:	f7fe fbad 	bl	800748c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d32:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <prvInitialiseTaskLists+0x78>)
 8008d34:	4a05      	ldr	r2, [pc, #20]	; (8008d4c <prvInitialiseTaskLists+0x64>)
 8008d36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d38:	4b0a      	ldr	r3, [pc, #40]	; (8008d64 <prvInitialiseTaskLists+0x7c>)
 8008d3a:	4a05      	ldr	r2, [pc, #20]	; (8008d50 <prvInitialiseTaskLists+0x68>)
 8008d3c:	601a      	str	r2, [r3, #0]
}
 8008d3e:	bf00      	nop
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000774 	.word	0x20000774
 8008d4c:	20000bd4 	.word	0x20000bd4
 8008d50:	20000be8 	.word	0x20000be8
 8008d54:	20000c04 	.word	0x20000c04
 8008d58:	20000c18 	.word	0x20000c18
 8008d5c:	20000c30 	.word	0x20000c30
 8008d60:	20000bfc 	.word	0x20000bfc
 8008d64:	20000c00 	.word	0x20000c00

08008d68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d6e:	e019      	b.n	8008da4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d70:	f000 fdf4 	bl	800995c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d74:	4b0f      	ldr	r3, [pc, #60]	; (8008db4 <prvCheckTasksWaitingTermination+0x4c>)
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	3304      	adds	r3, #4
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7fe fc0d 	bl	80075a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d86:	4b0c      	ldr	r3, [pc, #48]	; (8008db8 <prvCheckTasksWaitingTermination+0x50>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	4a0a      	ldr	r2, [pc, #40]	; (8008db8 <prvCheckTasksWaitingTermination+0x50>)
 8008d8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d90:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <prvCheckTasksWaitingTermination+0x54>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3b01      	subs	r3, #1
 8008d96:	4a09      	ldr	r2, [pc, #36]	; (8008dbc <prvCheckTasksWaitingTermination+0x54>)
 8008d98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d9a:	f000 fe0d 	bl	80099b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f80e 	bl	8008dc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008da4:	4b05      	ldr	r3, [pc, #20]	; (8008dbc <prvCheckTasksWaitingTermination+0x54>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e1      	bne.n	8008d70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	20000c18 	.word	0x20000c18
 8008db8:	20000c44 	.word	0x20000c44
 8008dbc:	20000c2c 	.word	0x20000c2c

08008dc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d108      	bne.n	8008de4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 ff9c 	bl	8009d14 <vPortFree>
				vPortFree( pxTCB );
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 ff99 	bl	8009d14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008de2:	e017      	b.n	8008e14 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d103      	bne.n	8008df6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 ff90 	bl	8009d14 <vPortFree>
	}
 8008df4:	e00e      	b.n	8008e14 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d009      	beq.n	8008e14 <prvDeleteTCB+0x54>
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	e7fe      	b.n	8008e12 <prvDeleteTCB+0x52>
	}
 8008e14:	bf00      	nop
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e22:	4b0c      	ldr	r3, [pc, #48]	; (8008e54 <prvResetNextTaskUnblockTime+0x38>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <prvResetNextTaskUnblockTime+0x3c>)
 8008e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e34:	e008      	b.n	8008e48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e36:	4b07      	ldr	r3, [pc, #28]	; (8008e54 <prvResetNextTaskUnblockTime+0x38>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	4a04      	ldr	r2, [pc, #16]	; (8008e58 <prvResetNextTaskUnblockTime+0x3c>)
 8008e46:	6013      	str	r3, [r2, #0]
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	20000bfc 	.word	0x20000bfc
 8008e58:	20000c64 	.word	0x20000c64

08008e5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e62:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <xTaskGetSchedulerState+0x34>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d102      	bne.n	8008e70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	607b      	str	r3, [r7, #4]
 8008e6e:	e008      	b.n	8008e82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e70:	4b08      	ldr	r3, [pc, #32]	; (8008e94 <xTaskGetSchedulerState+0x38>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d102      	bne.n	8008e7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e78:	2302      	movs	r3, #2
 8008e7a:	607b      	str	r3, [r7, #4]
 8008e7c:	e001      	b.n	8008e82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e82:	687b      	ldr	r3, [r7, #4]
	}
 8008e84:	4618      	mov	r0, r3
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	20000c50 	.word	0x20000c50
 8008e94:	20000c6c 	.word	0x20000c6c

08008e98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d054      	beq.n	8008f58 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008eae:	4b2d      	ldr	r3, [pc, #180]	; (8008f64 <xTaskPriorityDisinherit+0xcc>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d009      	beq.n	8008ecc <xTaskPriorityDisinherit+0x34>
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	60fb      	str	r3, [r7, #12]
 8008eca:	e7fe      	b.n	8008eca <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d109      	bne.n	8008ee8 <xTaskPriorityDisinherit+0x50>
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	60bb      	str	r3, [r7, #8]
 8008ee6:	e7fe      	b.n	8008ee6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eec:	1e5a      	subs	r2, r3, #1
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d02c      	beq.n	8008f58 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d128      	bne.n	8008f58 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	3304      	adds	r3, #4
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe fb48 	bl	80075a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f28:	4b0f      	ldr	r3, [pc, #60]	; (8008f68 <xTaskPriorityDisinherit+0xd0>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d903      	bls.n	8008f38 <xTaskPriorityDisinherit+0xa0>
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	4a0c      	ldr	r2, [pc, #48]	; (8008f68 <xTaskPriorityDisinherit+0xd0>)
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4a09      	ldr	r2, [pc, #36]	; (8008f6c <xTaskPriorityDisinherit+0xd4>)
 8008f46:	441a      	add	r2, r3
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4610      	mov	r0, r2
 8008f50:	f7fe fac9 	bl	80074e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f54:	2301      	movs	r3, #1
 8008f56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f58:	697b      	ldr	r3, [r7, #20]
	}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3718      	adds	r7, #24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000770 	.word	0x20000770
 8008f68:	20000c4c 	.word	0x20000c4c
 8008f6c:	20000774 	.word	0x20000774

08008f70 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008f76:	4b09      	ldr	r3, [pc, #36]	; (8008f9c <uxTaskResetEventItemValue+0x2c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f7e:	4b07      	ldr	r3, [pc, #28]	; (8008f9c <uxTaskResetEventItemValue+0x2c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <uxTaskResetEventItemValue+0x2c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008f8c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008f8e:	687b      	ldr	r3, [r7, #4]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	20000770 	.word	0x20000770

08008fa0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008faa:	4b21      	ldr	r3, [pc, #132]	; (8009030 <prvAddCurrentTaskToDelayedList+0x90>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fb0:	4b20      	ldr	r3, [pc, #128]	; (8009034 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe faf2 	bl	80075a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc2:	d10a      	bne.n	8008fda <prvAddCurrentTaskToDelayedList+0x3a>
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d007      	beq.n	8008fda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fca:	4b1a      	ldr	r3, [pc, #104]	; (8009034 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3304      	adds	r3, #4
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4819      	ldr	r0, [pc, #100]	; (8009038 <prvAddCurrentTaskToDelayedList+0x98>)
 8008fd4:	f7fe fa87 	bl	80074e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008fd8:	e026      	b.n	8009028 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4413      	add	r3, r2
 8008fe0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008fe2:	4b14      	ldr	r3, [pc, #80]	; (8009034 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d209      	bcs.n	8009006 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ff2:	4b12      	ldr	r3, [pc, #72]	; (800903c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	4b0f      	ldr	r3, [pc, #60]	; (8009034 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4610      	mov	r0, r2
 8009000:	f7fe fa95 	bl	800752e <vListInsert>
}
 8009004:	e010      	b.n	8009028 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009006:	4b0e      	ldr	r3, [pc, #56]	; (8009040 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	4b0a      	ldr	r3, [pc, #40]	; (8009034 <prvAddCurrentTaskToDelayedList+0x94>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3304      	adds	r3, #4
 8009010:	4619      	mov	r1, r3
 8009012:	4610      	mov	r0, r2
 8009014:	f7fe fa8b 	bl	800752e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009018:	4b0a      	ldr	r3, [pc, #40]	; (8009044 <prvAddCurrentTaskToDelayedList+0xa4>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	429a      	cmp	r2, r3
 8009020:	d202      	bcs.n	8009028 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009022:	4a08      	ldr	r2, [pc, #32]	; (8009044 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	6013      	str	r3, [r2, #0]
}
 8009028:	bf00      	nop
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	20000c48 	.word	0x20000c48
 8009034:	20000770 	.word	0x20000770
 8009038:	20000c30 	.word	0x20000c30
 800903c:	20000c00 	.word	0x20000c00
 8009040:	20000bfc 	.word	0x20000bfc
 8009044:	20000c64 	.word	0x20000c64

08009048 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b08a      	sub	sp, #40	; 0x28
 800904c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800904e:	2300      	movs	r3, #0
 8009050:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009052:	f000 faff 	bl	8009654 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009056:	4b1c      	ldr	r3, [pc, #112]	; (80090c8 <xTimerCreateTimerTask+0x80>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d021      	beq.n	80090a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800905e:	2300      	movs	r3, #0
 8009060:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009062:	2300      	movs	r3, #0
 8009064:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009066:	1d3a      	adds	r2, r7, #4
 8009068:	f107 0108 	add.w	r1, r7, #8
 800906c:	f107 030c 	add.w	r3, r7, #12
 8009070:	4618      	mov	r0, r3
 8009072:	f7fd ff91 	bl	8006f98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009076:	6879      	ldr	r1, [r7, #4]
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	9202      	str	r2, [sp, #8]
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	2302      	movs	r3, #2
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	2300      	movs	r3, #0
 8009086:	460a      	mov	r2, r1
 8009088:	4910      	ldr	r1, [pc, #64]	; (80090cc <xTimerCreateTimerTask+0x84>)
 800908a:	4811      	ldr	r0, [pc, #68]	; (80090d0 <xTimerCreateTimerTask+0x88>)
 800908c:	f7ff f844 	bl	8008118 <xTaskCreateStatic>
 8009090:	4602      	mov	r2, r0
 8009092:	4b10      	ldr	r3, [pc, #64]	; (80090d4 <xTimerCreateTimerTask+0x8c>)
 8009094:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009096:	4b0f      	ldr	r3, [pc, #60]	; (80090d4 <xTimerCreateTimerTask+0x8c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800909e:	2301      	movs	r3, #1
 80090a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d109      	bne.n	80090bc <xTimerCreateTimerTask+0x74>
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	613b      	str	r3, [r7, #16]
 80090ba:	e7fe      	b.n	80090ba <xTimerCreateTimerTask+0x72>
	return xReturn;
 80090bc:	697b      	ldr	r3, [r7, #20]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3718      	adds	r7, #24
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20000ca0 	.word	0x20000ca0
 80090cc:	0800a984 	.word	0x0800a984
 80090d0:	08009209 	.word	0x08009209
 80090d4:	20000ca4 	.word	0x20000ca4

080090d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08a      	sub	sp, #40	; 0x28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80090e6:	2300      	movs	r3, #0
 80090e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d109      	bne.n	8009104 <xTimerGenericCommand+0x2c>
 80090f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	623b      	str	r3, [r7, #32]
 8009102:	e7fe      	b.n	8009102 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009104:	4b19      	ldr	r3, [pc, #100]	; (800916c <xTimerGenericCommand+0x94>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d02a      	beq.n	8009162 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2b05      	cmp	r3, #5
 800911c:	dc18      	bgt.n	8009150 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800911e:	f7ff fe9d 	bl	8008e5c <xTaskGetSchedulerState>
 8009122:	4603      	mov	r3, r0
 8009124:	2b02      	cmp	r3, #2
 8009126:	d109      	bne.n	800913c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009128:	4b10      	ldr	r3, [pc, #64]	; (800916c <xTimerGenericCommand+0x94>)
 800912a:	6818      	ldr	r0, [r3, #0]
 800912c:	f107 0110 	add.w	r1, r7, #16
 8009130:	2300      	movs	r3, #0
 8009132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009134:	f7fe fb9c 	bl	8007870 <xQueueGenericSend>
 8009138:	6278      	str	r0, [r7, #36]	; 0x24
 800913a:	e012      	b.n	8009162 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800913c:	4b0b      	ldr	r3, [pc, #44]	; (800916c <xTimerGenericCommand+0x94>)
 800913e:	6818      	ldr	r0, [r3, #0]
 8009140:	f107 0110 	add.w	r1, r7, #16
 8009144:	2300      	movs	r3, #0
 8009146:	2200      	movs	r2, #0
 8009148:	f7fe fb92 	bl	8007870 <xQueueGenericSend>
 800914c:	6278      	str	r0, [r7, #36]	; 0x24
 800914e:	e008      	b.n	8009162 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009150:	4b06      	ldr	r3, [pc, #24]	; (800916c <xTimerGenericCommand+0x94>)
 8009152:	6818      	ldr	r0, [r3, #0]
 8009154:	f107 0110 	add.w	r1, r7, #16
 8009158:	2300      	movs	r3, #0
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	f7fe fc82 	bl	8007a64 <xQueueGenericSendFromISR>
 8009160:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009164:	4618      	mov	r0, r3
 8009166:	3728      	adds	r7, #40	; 0x28
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	20000ca0 	.word	0x20000ca0

08009170 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b088      	sub	sp, #32
 8009174:	af02      	add	r7, sp, #8
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800917a:	4b22      	ldr	r3, [pc, #136]	; (8009204 <prvProcessExpiredTimer+0x94>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	3304      	adds	r3, #4
 8009188:	4618      	mov	r0, r3
 800918a:	f7fe fa09 	bl	80075a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009194:	f003 0304 	and.w	r3, r3, #4
 8009198:	2b00      	cmp	r3, #0
 800919a:	d021      	beq.n	80091e0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	699a      	ldr	r2, [r3, #24]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	18d1      	adds	r1, r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	6978      	ldr	r0, [r7, #20]
 80091aa:	f000 f8d1 	bl	8009350 <prvInsertTimerInActiveList>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d01e      	beq.n	80091f2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091b4:	2300      	movs	r3, #0
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	2300      	movs	r3, #0
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	2100      	movs	r1, #0
 80091be:	6978      	ldr	r0, [r7, #20]
 80091c0:	f7ff ff8a 	bl	80090d8 <xTimerGenericCommand>
 80091c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d112      	bne.n	80091f2 <prvProcessExpiredTimer+0x82>
 80091cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	60fb      	str	r3, [r7, #12]
 80091de:	e7fe      	b.n	80091de <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091e6:	f023 0301 	bic.w	r3, r3, #1
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	6978      	ldr	r0, [r7, #20]
 80091f8:	4798      	blx	r3
}
 80091fa:	bf00      	nop
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	20000c98 	.word	0x20000c98

08009208 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009210:	f107 0308 	add.w	r3, r7, #8
 8009214:	4618      	mov	r0, r3
 8009216:	f000 f857 	bl	80092c8 <prvGetNextExpireTime>
 800921a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	4619      	mov	r1, r3
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 f803 	bl	800922c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009226:	f000 f8d5 	bl	80093d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800922a:	e7f1      	b.n	8009210 <prvTimerTask+0x8>

0800922c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009236:	f7ff f9a5 	bl	8008584 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800923a:	f107 0308 	add.w	r3, r7, #8
 800923e:	4618      	mov	r0, r3
 8009240:	f000 f866 	bl	8009310 <prvSampleTimeNow>
 8009244:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d130      	bne.n	80092ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10a      	bne.n	8009268 <prvProcessTimerOrBlockTask+0x3c>
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	429a      	cmp	r2, r3
 8009258:	d806      	bhi.n	8009268 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800925a:	f7ff f9a1 	bl	80085a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800925e:	68f9      	ldr	r1, [r7, #12]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7ff ff85 	bl	8009170 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009266:	e024      	b.n	80092b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d008      	beq.n	8009280 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800926e:	4b13      	ldr	r3, [pc, #76]	; (80092bc <prvProcessTimerOrBlockTask+0x90>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <prvProcessTimerOrBlockTask+0x50>
 8009278:	2301      	movs	r3, #1
 800927a:	e000      	b.n	800927e <prvProcessTimerOrBlockTask+0x52>
 800927c:	2300      	movs	r3, #0
 800927e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009280:	4b0f      	ldr	r3, [pc, #60]	; (80092c0 <prvProcessTimerOrBlockTask+0x94>)
 8009282:	6818      	ldr	r0, [r3, #0]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	4619      	mov	r1, r3
 800928e:	f7fe ff0f 	bl	80080b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009292:	f7ff f985 	bl	80085a0 <xTaskResumeAll>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10a      	bne.n	80092b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800929c:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <prvProcessTimerOrBlockTask+0x98>)
 800929e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	f3bf 8f6f 	isb	sy
}
 80092ac:	e001      	b.n	80092b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092ae:	f7ff f977 	bl	80085a0 <xTaskResumeAll>
}
 80092b2:	bf00      	nop
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	20000c9c 	.word	0x20000c9c
 80092c0:	20000ca0 	.word	0x20000ca0
 80092c4:	e000ed04 	.word	0xe000ed04

080092c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092d0:	4b0e      	ldr	r3, [pc, #56]	; (800930c <prvGetNextExpireTime+0x44>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <prvGetNextExpireTime+0x16>
 80092da:	2201      	movs	r2, #1
 80092dc:	e000      	b.n	80092e0 <prvGetNextExpireTime+0x18>
 80092de:	2200      	movs	r2, #0
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d105      	bne.n	80092f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092ec:	4b07      	ldr	r3, [pc, #28]	; (800930c <prvGetNextExpireTime+0x44>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	60fb      	str	r3, [r7, #12]
 80092f6:	e001      	b.n	80092fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80092f8:	2300      	movs	r3, #0
 80092fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80092fc:	68fb      	ldr	r3, [r7, #12]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	20000c98 	.word	0x20000c98

08009310 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009318:	f7ff f9de 	bl	80086d8 <xTaskGetTickCount>
 800931c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800931e:	4b0b      	ldr	r3, [pc, #44]	; (800934c <prvSampleTimeNow+0x3c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	429a      	cmp	r2, r3
 8009326:	d205      	bcs.n	8009334 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009328:	f000 f930 	bl	800958c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	e002      	b.n	800933a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800933a:	4a04      	ldr	r2, [pc, #16]	; (800934c <prvSampleTimeNow+0x3c>)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009340:	68fb      	ldr	r3, [r7, #12]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	20000ca8 	.word	0x20000ca8

08009350 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800935e:	2300      	movs	r3, #0
 8009360:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	429a      	cmp	r2, r3
 8009374:	d812      	bhi.n	800939c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	1ad2      	subs	r2, r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	429a      	cmp	r2, r3
 8009382:	d302      	bcc.n	800938a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009384:	2301      	movs	r3, #1
 8009386:	617b      	str	r3, [r7, #20]
 8009388:	e01b      	b.n	80093c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800938a:	4b10      	ldr	r3, [pc, #64]	; (80093cc <prvInsertTimerInActiveList+0x7c>)
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	3304      	adds	r3, #4
 8009392:	4619      	mov	r1, r3
 8009394:	4610      	mov	r0, r2
 8009396:	f7fe f8ca 	bl	800752e <vListInsert>
 800939a:	e012      	b.n	80093c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d206      	bcs.n	80093b2 <prvInsertTimerInActiveList+0x62>
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d302      	bcc.n	80093b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093ac:	2301      	movs	r3, #1
 80093ae:	617b      	str	r3, [r7, #20]
 80093b0:	e007      	b.n	80093c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093b2:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <prvInsertTimerInActiveList+0x80>)
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	3304      	adds	r3, #4
 80093ba:	4619      	mov	r1, r3
 80093bc:	4610      	mov	r0, r2
 80093be:	f7fe f8b6 	bl	800752e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093c2:	697b      	ldr	r3, [r7, #20]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	20000c9c 	.word	0x20000c9c
 80093d0:	20000c98 	.word	0x20000c98

080093d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b08e      	sub	sp, #56	; 0x38
 80093d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093da:	e0c6      	b.n	800956a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	da17      	bge.n	8009412 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80093e2:	1d3b      	adds	r3, r7, #4
 80093e4:	3304      	adds	r3, #4
 80093e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80093e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d109      	bne.n	8009402 <prvProcessReceivedCommands+0x2e>
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	61fb      	str	r3, [r7, #28]
 8009400:	e7fe      	b.n	8009400 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009408:	6850      	ldr	r0, [r2, #4]
 800940a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800940c:	6892      	ldr	r2, [r2, #8]
 800940e:	4611      	mov	r1, r2
 8009410:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	f2c0 80a7 	blt.w	8009568 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d004      	beq.n	8009430 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009428:	3304      	adds	r3, #4
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe f8b8 	bl	80075a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009430:	463b      	mov	r3, r7
 8009432:	4618      	mov	r0, r3
 8009434:	f7ff ff6c 	bl	8009310 <prvSampleTimeNow>
 8009438:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b09      	cmp	r3, #9
 800943e:	f200 8094 	bhi.w	800956a <prvProcessReceivedCommands+0x196>
 8009442:	a201      	add	r2, pc, #4	; (adr r2, 8009448 <prvProcessReceivedCommands+0x74>)
 8009444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009448:	08009471 	.word	0x08009471
 800944c:	08009471 	.word	0x08009471
 8009450:	08009471 	.word	0x08009471
 8009454:	080094e3 	.word	0x080094e3
 8009458:	080094f7 	.word	0x080094f7
 800945c:	0800953f 	.word	0x0800953f
 8009460:	08009471 	.word	0x08009471
 8009464:	08009471 	.word	0x08009471
 8009468:	080094e3 	.word	0x080094e3
 800946c:	080094f7 	.word	0x080094f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009476:	f043 0301 	orr.w	r3, r3, #1
 800947a:	b2da      	uxtb	r2, r3
 800947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	18d1      	adds	r1, r2, r3
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800948e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009490:	f7ff ff5e 	bl	8009350 <prvInsertTimerInActiveList>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d067      	beq.n	800956a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800949a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949c:	6a1b      	ldr	r3, [r3, #32]
 800949e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d05c      	beq.n	800956a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	441a      	add	r2, r3
 80094b8:	2300      	movs	r3, #0
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	2300      	movs	r3, #0
 80094be:	2100      	movs	r1, #0
 80094c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c2:	f7ff fe09 	bl	80090d8 <xTimerGenericCommand>
 80094c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d14d      	bne.n	800956a <prvProcessReceivedCommands+0x196>
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	61bb      	str	r3, [r7, #24]
 80094e0:	e7fe      	b.n	80094e0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094e8:	f023 0301 	bic.w	r3, r3, #1
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80094f4:	e039      	b.n	800956a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094fc:	f043 0301 	orr.w	r3, r3, #1
 8009500:	b2da      	uxtb	r2, r3
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d109      	bne.n	800952a <prvProcessReceivedCommands+0x156>
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	e7fe      	b.n	8009528 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952c:	699a      	ldr	r2, [r3, #24]
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	18d1      	adds	r1, r2, r3
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009538:	f7ff ff0a 	bl	8009350 <prvInsertTimerInActiveList>
					break;
 800953c:	e015      	b.n	800956a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d103      	bne.n	8009554 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800954c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800954e:	f000 fbe1 	bl	8009d14 <vPortFree>
 8009552:	e00a      	b.n	800956a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800955a:	f023 0301 	bic.w	r3, r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009566:	e000      	b.n	800956a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009568:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800956a:	4b07      	ldr	r3, [pc, #28]	; (8009588 <prvProcessReceivedCommands+0x1b4>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	1d39      	adds	r1, r7, #4
 8009570:	2200      	movs	r2, #0
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fb0a 	bl	8007b8c <xQueueReceive>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	f47f af2e 	bne.w	80093dc <prvProcessReceivedCommands+0x8>
	}
}
 8009580:	bf00      	nop
 8009582:	3730      	adds	r7, #48	; 0x30
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20000ca0 	.word	0x20000ca0

0800958c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009592:	e047      	b.n	8009624 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009594:	4b2d      	ldr	r3, [pc, #180]	; (800964c <prvSwitchTimerLists+0xc0>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800959e:	4b2b      	ldr	r3, [pc, #172]	; (800964c <prvSwitchTimerLists+0xc0>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fd fff7 	bl	80075a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095c0:	f003 0304 	and.w	r3, r3, #4
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d02d      	beq.n	8009624 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	4413      	add	r3, r2
 80095d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d90e      	bls.n	80095f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095e6:	4b19      	ldr	r3, [pc, #100]	; (800964c <prvSwitchTimerLists+0xc0>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3304      	adds	r3, #4
 80095ee:	4619      	mov	r1, r3
 80095f0:	4610      	mov	r0, r2
 80095f2:	f7fd ff9c 	bl	800752e <vListInsert>
 80095f6:	e015      	b.n	8009624 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095f8:	2300      	movs	r3, #0
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	2300      	movs	r3, #0
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	2100      	movs	r1, #0
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f7ff fd68 	bl	80090d8 <xTimerGenericCommand>
 8009608:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d109      	bne.n	8009624 <prvSwitchTimerLists+0x98>
 8009610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	603b      	str	r3, [r7, #0]
 8009622:	e7fe      	b.n	8009622 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009624:	4b09      	ldr	r3, [pc, #36]	; (800964c <prvSwitchTimerLists+0xc0>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1b2      	bne.n	8009594 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800962e:	4b07      	ldr	r3, [pc, #28]	; (800964c <prvSwitchTimerLists+0xc0>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009634:	4b06      	ldr	r3, [pc, #24]	; (8009650 <prvSwitchTimerLists+0xc4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a04      	ldr	r2, [pc, #16]	; (800964c <prvSwitchTimerLists+0xc0>)
 800963a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800963c:	4a04      	ldr	r2, [pc, #16]	; (8009650 <prvSwitchTimerLists+0xc4>)
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	6013      	str	r3, [r2, #0]
}
 8009642:	bf00      	nop
 8009644:	3718      	adds	r7, #24
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20000c98 	.word	0x20000c98
 8009650:	20000c9c 	.word	0x20000c9c

08009654 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800965a:	f000 f97f 	bl	800995c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800965e:	4b15      	ldr	r3, [pc, #84]	; (80096b4 <prvCheckForValidListAndQueue+0x60>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d120      	bne.n	80096a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009666:	4814      	ldr	r0, [pc, #80]	; (80096b8 <prvCheckForValidListAndQueue+0x64>)
 8009668:	f7fd ff10 	bl	800748c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800966c:	4813      	ldr	r0, [pc, #76]	; (80096bc <prvCheckForValidListAndQueue+0x68>)
 800966e:	f7fd ff0d 	bl	800748c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009672:	4b13      	ldr	r3, [pc, #76]	; (80096c0 <prvCheckForValidListAndQueue+0x6c>)
 8009674:	4a10      	ldr	r2, [pc, #64]	; (80096b8 <prvCheckForValidListAndQueue+0x64>)
 8009676:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009678:	4b12      	ldr	r3, [pc, #72]	; (80096c4 <prvCheckForValidListAndQueue+0x70>)
 800967a:	4a10      	ldr	r2, [pc, #64]	; (80096bc <prvCheckForValidListAndQueue+0x68>)
 800967c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800967e:	2300      	movs	r3, #0
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	4b11      	ldr	r3, [pc, #68]	; (80096c8 <prvCheckForValidListAndQueue+0x74>)
 8009684:	4a11      	ldr	r2, [pc, #68]	; (80096cc <prvCheckForValidListAndQueue+0x78>)
 8009686:	2110      	movs	r1, #16
 8009688:	200a      	movs	r0, #10
 800968a:	f7fe f81b 	bl	80076c4 <xQueueGenericCreateStatic>
 800968e:	4602      	mov	r2, r0
 8009690:	4b08      	ldr	r3, [pc, #32]	; (80096b4 <prvCheckForValidListAndQueue+0x60>)
 8009692:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009694:	4b07      	ldr	r3, [pc, #28]	; (80096b4 <prvCheckForValidListAndQueue+0x60>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d005      	beq.n	80096a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800969c:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <prvCheckForValidListAndQueue+0x60>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	490b      	ldr	r1, [pc, #44]	; (80096d0 <prvCheckForValidListAndQueue+0x7c>)
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe fcdc 	bl	8008060 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096a8:	f000 f986 	bl	80099b8 <vPortExitCritical>
}
 80096ac:	bf00      	nop
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20000ca0 	.word	0x20000ca0
 80096b8:	20000c70 	.word	0x20000c70
 80096bc:	20000c84 	.word	0x20000c84
 80096c0:	20000c98 	.word	0x20000c98
 80096c4:	20000c9c 	.word	0x20000c9c
 80096c8:	20000d4c 	.word	0x20000d4c
 80096cc:	20000cac 	.word	0x20000cac
 80096d0:	0800a98c 	.word	0x0800a98c

080096d4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08a      	sub	sp, #40	; 0x28
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
 80096e0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80096e2:	f06f 0301 	mvn.w	r3, #1
 80096e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096f4:	4b06      	ldr	r3, [pc, #24]	; (8009710 <xTimerPendFunctionCallFromISR+0x3c>)
 80096f6:	6818      	ldr	r0, [r3, #0]
 80096f8:	f107 0114 	add.w	r1, r7, #20
 80096fc:	2300      	movs	r3, #0
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	f7fe f9b0 	bl	8007a64 <xQueueGenericSendFromISR>
 8009704:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009708:	4618      	mov	r0, r3
 800970a:	3728      	adds	r7, #40	; 0x28
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	20000ca0 	.word	0x20000ca0

08009714 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	3b04      	subs	r3, #4
 8009724:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800972c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3b04      	subs	r3, #4
 8009732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	f023 0201 	bic.w	r2, r3, #1
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	3b04      	subs	r3, #4
 8009742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009744:	4a0c      	ldr	r2, [pc, #48]	; (8009778 <pxPortInitialiseStack+0x64>)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	3b14      	subs	r3, #20
 800974e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3b04      	subs	r3, #4
 800975a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f06f 0202 	mvn.w	r2, #2
 8009762:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	3b20      	subs	r3, #32
 8009768:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800976a:	68fb      	ldr	r3, [r7, #12]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	0800977d 	.word	0x0800977d

0800977c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009786:	4b11      	ldr	r3, [pc, #68]	; (80097cc <prvTaskExitError+0x50>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978e:	d009      	beq.n	80097a4 <prvTaskExitError+0x28>
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	60fb      	str	r3, [r7, #12]
 80097a2:	e7fe      	b.n	80097a2 <prvTaskExitError+0x26>
 80097a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097b6:	bf00      	nop
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d0fc      	beq.n	80097b8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097be:	bf00      	nop
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	2000000c 	.word	0x2000000c

080097d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097d0:	4b07      	ldr	r3, [pc, #28]	; (80097f0 <pxCurrentTCBConst2>)
 80097d2:	6819      	ldr	r1, [r3, #0]
 80097d4:	6808      	ldr	r0, [r1, #0]
 80097d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097da:	f380 8809 	msr	PSP, r0
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f04f 0000 	mov.w	r0, #0
 80097e6:	f380 8811 	msr	BASEPRI, r0
 80097ea:	4770      	bx	lr
 80097ec:	f3af 8000 	nop.w

080097f0 <pxCurrentTCBConst2>:
 80097f0:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop

080097f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097f8:	4808      	ldr	r0, [pc, #32]	; (800981c <prvPortStartFirstTask+0x24>)
 80097fa:	6800      	ldr	r0, [r0, #0]
 80097fc:	6800      	ldr	r0, [r0, #0]
 80097fe:	f380 8808 	msr	MSP, r0
 8009802:	f04f 0000 	mov.w	r0, #0
 8009806:	f380 8814 	msr	CONTROL, r0
 800980a:	b662      	cpsie	i
 800980c:	b661      	cpsie	f
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	df00      	svc	0
 8009818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800981a:	bf00      	nop
 800981c:	e000ed08 	.word	0xe000ed08

08009820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009826:	4b44      	ldr	r3, [pc, #272]	; (8009938 <xPortStartScheduler+0x118>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a44      	ldr	r2, [pc, #272]	; (800993c <xPortStartScheduler+0x11c>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d109      	bne.n	8009844 <xPortStartScheduler+0x24>
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	613b      	str	r3, [r7, #16]
 8009842:	e7fe      	b.n	8009842 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009844:	4b3c      	ldr	r3, [pc, #240]	; (8009938 <xPortStartScheduler+0x118>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a3d      	ldr	r2, [pc, #244]	; (8009940 <xPortStartScheduler+0x120>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d109      	bne.n	8009862 <xPortStartScheduler+0x42>
 800984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	60fb      	str	r3, [r7, #12]
 8009860:	e7fe      	b.n	8009860 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009862:	4b38      	ldr	r3, [pc, #224]	; (8009944 <xPortStartScheduler+0x124>)
 8009864:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	b2db      	uxtb	r3, r3
 800986c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	22ff      	movs	r2, #255	; 0xff
 8009872:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	b2db      	uxtb	r3, r3
 800987a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800987c:	78fb      	ldrb	r3, [r7, #3]
 800987e:	b2db      	uxtb	r3, r3
 8009880:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009884:	b2da      	uxtb	r2, r3
 8009886:	4b30      	ldr	r3, [pc, #192]	; (8009948 <xPortStartScheduler+0x128>)
 8009888:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800988a:	4b30      	ldr	r3, [pc, #192]	; (800994c <xPortStartScheduler+0x12c>)
 800988c:	2207      	movs	r2, #7
 800988e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009890:	e009      	b.n	80098a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009892:	4b2e      	ldr	r3, [pc, #184]	; (800994c <xPortStartScheduler+0x12c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3b01      	subs	r3, #1
 8009898:	4a2c      	ldr	r2, [pc, #176]	; (800994c <xPortStartScheduler+0x12c>)
 800989a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800989c:	78fb      	ldrb	r3, [r7, #3]
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	005b      	lsls	r3, r3, #1
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098a6:	78fb      	ldrb	r3, [r7, #3]
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ae:	2b80      	cmp	r3, #128	; 0x80
 80098b0:	d0ef      	beq.n	8009892 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098b2:	4b26      	ldr	r3, [pc, #152]	; (800994c <xPortStartScheduler+0x12c>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f1c3 0307 	rsb	r3, r3, #7
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d009      	beq.n	80098d2 <xPortStartScheduler+0xb2>
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	60bb      	str	r3, [r7, #8]
 80098d0:	e7fe      	b.n	80098d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098d2:	4b1e      	ldr	r3, [pc, #120]	; (800994c <xPortStartScheduler+0x12c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	021b      	lsls	r3, r3, #8
 80098d8:	4a1c      	ldr	r2, [pc, #112]	; (800994c <xPortStartScheduler+0x12c>)
 80098da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098dc:	4b1b      	ldr	r3, [pc, #108]	; (800994c <xPortStartScheduler+0x12c>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098e4:	4a19      	ldr	r2, [pc, #100]	; (800994c <xPortStartScheduler+0x12c>)
 80098e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098f0:	4b17      	ldr	r3, [pc, #92]	; (8009950 <xPortStartScheduler+0x130>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a16      	ldr	r2, [pc, #88]	; (8009950 <xPortStartScheduler+0x130>)
 80098f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098fc:	4b14      	ldr	r3, [pc, #80]	; (8009950 <xPortStartScheduler+0x130>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a13      	ldr	r2, [pc, #76]	; (8009950 <xPortStartScheduler+0x130>)
 8009902:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009906:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009908:	f000 f8d6 	bl	8009ab8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800990c:	4b11      	ldr	r3, [pc, #68]	; (8009954 <xPortStartScheduler+0x134>)
 800990e:	2200      	movs	r2, #0
 8009910:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009912:	f000 f8f5 	bl	8009b00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009916:	4b10      	ldr	r3, [pc, #64]	; (8009958 <xPortStartScheduler+0x138>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a0f      	ldr	r2, [pc, #60]	; (8009958 <xPortStartScheduler+0x138>)
 800991c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009920:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009922:	f7ff ff69 	bl	80097f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009926:	f7fe ff9f 	bl	8008868 <vTaskSwitchContext>
	prvTaskExitError();
 800992a:	f7ff ff27 	bl	800977c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	e000ed00 	.word	0xe000ed00
 800993c:	410fc271 	.word	0x410fc271
 8009940:	410fc270 	.word	0x410fc270
 8009944:	e000e400 	.word	0xe000e400
 8009948:	20000d9c 	.word	0x20000d9c
 800994c:	20000da0 	.word	0x20000da0
 8009950:	e000ed20 	.word	0xe000ed20
 8009954:	2000000c 	.word	0x2000000c
 8009958:	e000ef34 	.word	0xe000ef34

0800995c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009974:	4b0e      	ldr	r3, [pc, #56]	; (80099b0 <vPortEnterCritical+0x54>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3301      	adds	r3, #1
 800997a:	4a0d      	ldr	r2, [pc, #52]	; (80099b0 <vPortEnterCritical+0x54>)
 800997c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800997e:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <vPortEnterCritical+0x54>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d10e      	bne.n	80099a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009986:	4b0b      	ldr	r3, [pc, #44]	; (80099b4 <vPortEnterCritical+0x58>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	b2db      	uxtb	r3, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	d009      	beq.n	80099a4 <vPortEnterCritical+0x48>
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	603b      	str	r3, [r7, #0]
 80099a2:	e7fe      	b.n	80099a2 <vPortEnterCritical+0x46>
	}
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	2000000c 	.word	0x2000000c
 80099b4:	e000ed04 	.word	0xe000ed04

080099b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099be:	4b11      	ldr	r3, [pc, #68]	; (8009a04 <vPortExitCritical+0x4c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d109      	bne.n	80099da <vPortExitCritical+0x22>
 80099c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	607b      	str	r3, [r7, #4]
 80099d8:	e7fe      	b.n	80099d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80099da:	4b0a      	ldr	r3, [pc, #40]	; (8009a04 <vPortExitCritical+0x4c>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3b01      	subs	r3, #1
 80099e0:	4a08      	ldr	r2, [pc, #32]	; (8009a04 <vPortExitCritical+0x4c>)
 80099e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099e4:	4b07      	ldr	r3, [pc, #28]	; (8009a04 <vPortExitCritical+0x4c>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d104      	bne.n	80099f6 <vPortExitCritical+0x3e>
 80099ec:	2300      	movs	r3, #0
 80099ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80099f6:	bf00      	nop
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	2000000c 	.word	0x2000000c
	...

08009a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a10:	f3ef 8009 	mrs	r0, PSP
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	4b15      	ldr	r3, [pc, #84]	; (8009a70 <pxCurrentTCBConst>)
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	f01e 0f10 	tst.w	lr, #16
 8009a20:	bf08      	it	eq
 8009a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2a:	6010      	str	r0, [r2, #0]
 8009a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a34:	f380 8811 	msr	BASEPRI, r0
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f7fe ff12 	bl	8008868 <vTaskSwitchContext>
 8009a44:	f04f 0000 	mov.w	r0, #0
 8009a48:	f380 8811 	msr	BASEPRI, r0
 8009a4c:	bc09      	pop	{r0, r3}
 8009a4e:	6819      	ldr	r1, [r3, #0]
 8009a50:	6808      	ldr	r0, [r1, #0]
 8009a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a56:	f01e 0f10 	tst.w	lr, #16
 8009a5a:	bf08      	it	eq
 8009a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a60:	f380 8809 	msr	PSP, r0
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	f3af 8000 	nop.w

08009a70 <pxCurrentTCBConst>:
 8009a70:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop

08009a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a90:	f7fe fe32 	bl	80086f8 <xTaskIncrementTick>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a9a:	4b06      	ldr	r3, [pc, #24]	; (8009ab4 <SysTick_Handler+0x3c>)
 8009a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aa0:	601a      	str	r2, [r3, #0]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009aac:	bf00      	nop
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	e000ed04 	.word	0xe000ed04

08009ab8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009abc:	4b0b      	ldr	r3, [pc, #44]	; (8009aec <vPortSetupTimerInterrupt+0x34>)
 8009abe:	2200      	movs	r2, #0
 8009ac0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ac2:	4b0b      	ldr	r3, [pc, #44]	; (8009af0 <vPortSetupTimerInterrupt+0x38>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ac8:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <vPortSetupTimerInterrupt+0x3c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a0a      	ldr	r2, [pc, #40]	; (8009af8 <vPortSetupTimerInterrupt+0x40>)
 8009ace:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad2:	099b      	lsrs	r3, r3, #6
 8009ad4:	4a09      	ldr	r2, [pc, #36]	; (8009afc <vPortSetupTimerInterrupt+0x44>)
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ada:	4b04      	ldr	r3, [pc, #16]	; (8009aec <vPortSetupTimerInterrupt+0x34>)
 8009adc:	2207      	movs	r2, #7
 8009ade:	601a      	str	r2, [r3, #0]
}
 8009ae0:	bf00      	nop
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	e000e010 	.word	0xe000e010
 8009af0:	e000e018 	.word	0xe000e018
 8009af4:	20000000 	.word	0x20000000
 8009af8:	10624dd3 	.word	0x10624dd3
 8009afc:	e000e014 	.word	0xe000e014

08009b00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b10 <vPortEnableVFP+0x10>
 8009b04:	6801      	ldr	r1, [r0, #0]
 8009b06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b0a:	6001      	str	r1, [r0, #0]
 8009b0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b0e:	bf00      	nop
 8009b10:	e000ed88 	.word	0xe000ed88

08009b14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b1a:	f3ef 8305 	mrs	r3, IPSR
 8009b1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b0f      	cmp	r3, #15
 8009b24:	d913      	bls.n	8009b4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b26:	4a16      	ldr	r2, [pc, #88]	; (8009b80 <vPortValidateInterruptPriority+0x6c>)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b30:	4b14      	ldr	r3, [pc, #80]	; (8009b84 <vPortValidateInterruptPriority+0x70>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	7afa      	ldrb	r2, [r7, #11]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d209      	bcs.n	8009b4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	607b      	str	r3, [r7, #4]
 8009b4c:	e7fe      	b.n	8009b4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b4e:	4b0e      	ldr	r3, [pc, #56]	; (8009b88 <vPortValidateInterruptPriority+0x74>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b56:	4b0d      	ldr	r3, [pc, #52]	; (8009b8c <vPortValidateInterruptPriority+0x78>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d909      	bls.n	8009b72 <vPortValidateInterruptPriority+0x5e>
 8009b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	603b      	str	r3, [r7, #0]
 8009b70:	e7fe      	b.n	8009b70 <vPortValidateInterruptPriority+0x5c>
	}
 8009b72:	bf00      	nop
 8009b74:	3714      	adds	r7, #20
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	e000e3f0 	.word	0xe000e3f0
 8009b84:	20000d9c 	.word	0x20000d9c
 8009b88:	e000ed0c 	.word	0xe000ed0c
 8009b8c:	20000da0 	.word	0x20000da0

08009b90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b08a      	sub	sp, #40	; 0x28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b9c:	f7fe fcf2 	bl	8008584 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ba0:	4b57      	ldr	r3, [pc, #348]	; (8009d00 <pvPortMalloc+0x170>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d101      	bne.n	8009bac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ba8:	f000 f90c 	bl	8009dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bac:	4b55      	ldr	r3, [pc, #340]	; (8009d04 <pvPortMalloc+0x174>)
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f040 808c 	bne.w	8009cd2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d01c      	beq.n	8009bfa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009bc0:	2208      	movs	r2, #8
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f003 0307 	and.w	r3, r3, #7
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d013      	beq.n	8009bfa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f023 0307 	bic.w	r3, r3, #7
 8009bd8:	3308      	adds	r3, #8
 8009bda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f003 0307 	and.w	r3, r3, #7
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d009      	beq.n	8009bfa <pvPortMalloc+0x6a>
 8009be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	617b      	str	r3, [r7, #20]
 8009bf8:	e7fe      	b.n	8009bf8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d068      	beq.n	8009cd2 <pvPortMalloc+0x142>
 8009c00:	4b41      	ldr	r3, [pc, #260]	; (8009d08 <pvPortMalloc+0x178>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d863      	bhi.n	8009cd2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c0a:	4b40      	ldr	r3, [pc, #256]	; (8009d0c <pvPortMalloc+0x17c>)
 8009c0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c0e:	4b3f      	ldr	r3, [pc, #252]	; (8009d0c <pvPortMalloc+0x17c>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c14:	e004      	b.n	8009c20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d903      	bls.n	8009c32 <pvPortMalloc+0xa2>
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1f1      	bne.n	8009c16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c32:	4b33      	ldr	r3, [pc, #204]	; (8009d00 <pvPortMalloc+0x170>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d04a      	beq.n	8009cd2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2208      	movs	r2, #8
 8009c42:	4413      	add	r3, r2
 8009c44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	6a3b      	ldr	r3, [r7, #32]
 8009c4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	685a      	ldr	r2, [r3, #4]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	1ad2      	subs	r2, r2, r3
 8009c56:	2308      	movs	r3, #8
 8009c58:	005b      	lsls	r3, r3, #1
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d91e      	bls.n	8009c9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4413      	add	r3, r2
 8009c64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	f003 0307 	and.w	r3, r3, #7
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d009      	beq.n	8009c84 <pvPortMalloc+0xf4>
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	613b      	str	r3, [r7, #16]
 8009c82:	e7fe      	b.n	8009c82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	1ad2      	subs	r2, r2, r3
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c96:	69b8      	ldr	r0, [r7, #24]
 8009c98:	f000 f8f6 	bl	8009e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c9c:	4b1a      	ldr	r3, [pc, #104]	; (8009d08 <pvPortMalloc+0x178>)
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	4a18      	ldr	r2, [pc, #96]	; (8009d08 <pvPortMalloc+0x178>)
 8009ca8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009caa:	4b17      	ldr	r3, [pc, #92]	; (8009d08 <pvPortMalloc+0x178>)
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	4b18      	ldr	r3, [pc, #96]	; (8009d10 <pvPortMalloc+0x180>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d203      	bcs.n	8009cbe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009cb6:	4b14      	ldr	r3, [pc, #80]	; (8009d08 <pvPortMalloc+0x178>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a15      	ldr	r2, [pc, #84]	; (8009d10 <pvPortMalloc+0x180>)
 8009cbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	4b10      	ldr	r3, [pc, #64]	; (8009d04 <pvPortMalloc+0x174>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	431a      	orrs	r2, r3
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cce:	2200      	movs	r2, #0
 8009cd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009cd2:	f7fe fc65 	bl	80085a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	f003 0307 	and.w	r3, r3, #7
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d009      	beq.n	8009cf4 <pvPortMalloc+0x164>
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	60fb      	str	r3, [r7, #12]
 8009cf2:	e7fe      	b.n	8009cf2 <pvPortMalloc+0x162>
	return pvReturn;
 8009cf4:	69fb      	ldr	r3, [r7, #28]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3728      	adds	r7, #40	; 0x28
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20010dac 	.word	0x20010dac
 8009d04:	20010db8 	.word	0x20010db8
 8009d08:	20010db0 	.word	0x20010db0
 8009d0c:	20010da4 	.word	0x20010da4
 8009d10:	20010db4 	.word	0x20010db4

08009d14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d046      	beq.n	8009db4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d26:	2308      	movs	r3, #8
 8009d28:	425b      	negs	r3, r3
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	685a      	ldr	r2, [r3, #4]
 8009d38:	4b20      	ldr	r3, [pc, #128]	; (8009dbc <vPortFree+0xa8>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d109      	bne.n	8009d56 <vPortFree+0x42>
 8009d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	e7fe      	b.n	8009d54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d009      	beq.n	8009d72 <vPortFree+0x5e>
 8009d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	60bb      	str	r3, [r7, #8]
 8009d70:	e7fe      	b.n	8009d70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	4b11      	ldr	r3, [pc, #68]	; (8009dbc <vPortFree+0xa8>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d019      	beq.n	8009db4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d115      	bne.n	8009db4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	4b0b      	ldr	r3, [pc, #44]	; (8009dbc <vPortFree+0xa8>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	43db      	mvns	r3, r3
 8009d92:	401a      	ands	r2, r3
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d98:	f7fe fbf4 	bl	8008584 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	4b07      	ldr	r3, [pc, #28]	; (8009dc0 <vPortFree+0xac>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4413      	add	r3, r2
 8009da6:	4a06      	ldr	r2, [pc, #24]	; (8009dc0 <vPortFree+0xac>)
 8009da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009daa:	6938      	ldr	r0, [r7, #16]
 8009dac:	f000 f86c 	bl	8009e88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009db0:	f7fe fbf6 	bl	80085a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009db4:	bf00      	nop
 8009db6:	3718      	adds	r7, #24
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20010db8 	.word	0x20010db8
 8009dc0:	20010db0 	.word	0x20010db0

08009dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009dca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009dd0:	4b27      	ldr	r3, [pc, #156]	; (8009e70 <prvHeapInit+0xac>)
 8009dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f003 0307 	and.w	r3, r3, #7
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00c      	beq.n	8009df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3307      	adds	r3, #7
 8009de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f023 0307 	bic.w	r3, r3, #7
 8009dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	4a1f      	ldr	r2, [pc, #124]	; (8009e70 <prvHeapInit+0xac>)
 8009df4:	4413      	add	r3, r2
 8009df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009dfc:	4a1d      	ldr	r2, [pc, #116]	; (8009e74 <prvHeapInit+0xb0>)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e02:	4b1c      	ldr	r3, [pc, #112]	; (8009e74 <prvHeapInit+0xb0>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e10:	2208      	movs	r2, #8
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	1a9b      	subs	r3, r3, r2
 8009e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f023 0307 	bic.w	r3, r3, #7
 8009e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	4a15      	ldr	r2, [pc, #84]	; (8009e78 <prvHeapInit+0xb4>)
 8009e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e26:	4b14      	ldr	r3, [pc, #80]	; (8009e78 <prvHeapInit+0xb4>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e2e:	4b12      	ldr	r3, [pc, #72]	; (8009e78 <prvHeapInit+0xb4>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2200      	movs	r2, #0
 8009e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	1ad2      	subs	r2, r2, r3
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e44:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <prvHeapInit+0xb4>)
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	4a0a      	ldr	r2, [pc, #40]	; (8009e7c <prvHeapInit+0xb8>)
 8009e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	4a09      	ldr	r2, [pc, #36]	; (8009e80 <prvHeapInit+0xbc>)
 8009e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e5c:	4b09      	ldr	r3, [pc, #36]	; (8009e84 <prvHeapInit+0xc0>)
 8009e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e62:	601a      	str	r2, [r3, #0]
}
 8009e64:	bf00      	nop
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	20000da4 	.word	0x20000da4
 8009e74:	20010da4 	.word	0x20010da4
 8009e78:	20010dac 	.word	0x20010dac
 8009e7c:	20010db4 	.word	0x20010db4
 8009e80:	20010db0 	.word	0x20010db0
 8009e84:	20010db8 	.word	0x20010db8

08009e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e90:	4b28      	ldr	r3, [pc, #160]	; (8009f34 <prvInsertBlockIntoFreeList+0xac>)
 8009e92:	60fb      	str	r3, [r7, #12]
 8009e94:	e002      	b.n	8009e9c <prvInsertBlockIntoFreeList+0x14>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d8f7      	bhi.n	8009e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d108      	bne.n	8009eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	441a      	add	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	441a      	add	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d118      	bne.n	8009f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	4b15      	ldr	r3, [pc, #84]	; (8009f38 <prvInsertBlockIntoFreeList+0xb0>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d00d      	beq.n	8009f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685a      	ldr	r2, [r3, #4]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	441a      	add	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	e008      	b.n	8009f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f06:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <prvInsertBlockIntoFreeList+0xb0>)
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	e003      	b.n	8009f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d002      	beq.n	8009f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f26:	bf00      	nop
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	20010da4 	.word	0x20010da4
 8009f38:	20010dac 	.word	0x20010dac

08009f3c <__errno>:
 8009f3c:	4b01      	ldr	r3, [pc, #4]	; (8009f44 <__errno+0x8>)
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	20000010 	.word	0x20000010

08009f48 <__libc_init_array>:
 8009f48:	b570      	push	{r4, r5, r6, lr}
 8009f4a:	4e0d      	ldr	r6, [pc, #52]	; (8009f80 <__libc_init_array+0x38>)
 8009f4c:	4c0d      	ldr	r4, [pc, #52]	; (8009f84 <__libc_init_array+0x3c>)
 8009f4e:	1ba4      	subs	r4, r4, r6
 8009f50:	10a4      	asrs	r4, r4, #2
 8009f52:	2500      	movs	r5, #0
 8009f54:	42a5      	cmp	r5, r4
 8009f56:	d109      	bne.n	8009f6c <__libc_init_array+0x24>
 8009f58:	4e0b      	ldr	r6, [pc, #44]	; (8009f88 <__libc_init_array+0x40>)
 8009f5a:	4c0c      	ldr	r4, [pc, #48]	; (8009f8c <__libc_init_array+0x44>)
 8009f5c:	f000 fc28 	bl	800a7b0 <_init>
 8009f60:	1ba4      	subs	r4, r4, r6
 8009f62:	10a4      	asrs	r4, r4, #2
 8009f64:	2500      	movs	r5, #0
 8009f66:	42a5      	cmp	r5, r4
 8009f68:	d105      	bne.n	8009f76 <__libc_init_array+0x2e>
 8009f6a:	bd70      	pop	{r4, r5, r6, pc}
 8009f6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f70:	4798      	blx	r3
 8009f72:	3501      	adds	r5, #1
 8009f74:	e7ee      	b.n	8009f54 <__libc_init_array+0xc>
 8009f76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f7a:	4798      	blx	r3
 8009f7c:	3501      	adds	r5, #1
 8009f7e:	e7f2      	b.n	8009f66 <__libc_init_array+0x1e>
 8009f80:	0800aab4 	.word	0x0800aab4
 8009f84:	0800aab4 	.word	0x0800aab4
 8009f88:	0800aab4 	.word	0x0800aab4
 8009f8c:	0800aab8 	.word	0x0800aab8

08009f90 <memcpy>:
 8009f90:	b510      	push	{r4, lr}
 8009f92:	1e43      	subs	r3, r0, #1
 8009f94:	440a      	add	r2, r1
 8009f96:	4291      	cmp	r1, r2
 8009f98:	d100      	bne.n	8009f9c <memcpy+0xc>
 8009f9a:	bd10      	pop	{r4, pc}
 8009f9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fa4:	e7f7      	b.n	8009f96 <memcpy+0x6>

08009fa6 <memset>:
 8009fa6:	4402      	add	r2, r0
 8009fa8:	4603      	mov	r3, r0
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d100      	bne.n	8009fb0 <memset+0xa>
 8009fae:	4770      	bx	lr
 8009fb0:	f803 1b01 	strb.w	r1, [r3], #1
 8009fb4:	e7f9      	b.n	8009faa <memset+0x4>
	...

08009fb8 <siprintf>:
 8009fb8:	b40e      	push	{r1, r2, r3}
 8009fba:	b500      	push	{lr}
 8009fbc:	b09c      	sub	sp, #112	; 0x70
 8009fbe:	ab1d      	add	r3, sp, #116	; 0x74
 8009fc0:	9002      	str	r0, [sp, #8]
 8009fc2:	9006      	str	r0, [sp, #24]
 8009fc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009fc8:	4809      	ldr	r0, [pc, #36]	; (8009ff0 <siprintf+0x38>)
 8009fca:	9107      	str	r1, [sp, #28]
 8009fcc:	9104      	str	r1, [sp, #16]
 8009fce:	4909      	ldr	r1, [pc, #36]	; (8009ff4 <siprintf+0x3c>)
 8009fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd4:	9105      	str	r1, [sp, #20]
 8009fd6:	6800      	ldr	r0, [r0, #0]
 8009fd8:	9301      	str	r3, [sp, #4]
 8009fda:	a902      	add	r1, sp, #8
 8009fdc:	f000 f866 	bl	800a0ac <_svfiprintf_r>
 8009fe0:	9b02      	ldr	r3, [sp, #8]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	701a      	strb	r2, [r3, #0]
 8009fe6:	b01c      	add	sp, #112	; 0x70
 8009fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fec:	b003      	add	sp, #12
 8009fee:	4770      	bx	lr
 8009ff0:	20000010 	.word	0x20000010
 8009ff4:	ffff0208 	.word	0xffff0208

08009ff8 <__ssputs_r>:
 8009ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ffc:	688e      	ldr	r6, [r1, #8]
 8009ffe:	429e      	cmp	r6, r3
 800a000:	4682      	mov	sl, r0
 800a002:	460c      	mov	r4, r1
 800a004:	4690      	mov	r8, r2
 800a006:	4699      	mov	r9, r3
 800a008:	d837      	bhi.n	800a07a <__ssputs_r+0x82>
 800a00a:	898a      	ldrh	r2, [r1, #12]
 800a00c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a010:	d031      	beq.n	800a076 <__ssputs_r+0x7e>
 800a012:	6825      	ldr	r5, [r4, #0]
 800a014:	6909      	ldr	r1, [r1, #16]
 800a016:	1a6f      	subs	r7, r5, r1
 800a018:	6965      	ldr	r5, [r4, #20]
 800a01a:	2302      	movs	r3, #2
 800a01c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a020:	fb95 f5f3 	sdiv	r5, r5, r3
 800a024:	f109 0301 	add.w	r3, r9, #1
 800a028:	443b      	add	r3, r7
 800a02a:	429d      	cmp	r5, r3
 800a02c:	bf38      	it	cc
 800a02e:	461d      	movcc	r5, r3
 800a030:	0553      	lsls	r3, r2, #21
 800a032:	d530      	bpl.n	800a096 <__ssputs_r+0x9e>
 800a034:	4629      	mov	r1, r5
 800a036:	f000 fb21 	bl	800a67c <_malloc_r>
 800a03a:	4606      	mov	r6, r0
 800a03c:	b950      	cbnz	r0, 800a054 <__ssputs_r+0x5c>
 800a03e:	230c      	movs	r3, #12
 800a040:	f8ca 3000 	str.w	r3, [sl]
 800a044:	89a3      	ldrh	r3, [r4, #12]
 800a046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a04a:	81a3      	strh	r3, [r4, #12]
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295
 800a050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a054:	463a      	mov	r2, r7
 800a056:	6921      	ldr	r1, [r4, #16]
 800a058:	f7ff ff9a 	bl	8009f90 <memcpy>
 800a05c:	89a3      	ldrh	r3, [r4, #12]
 800a05e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a066:	81a3      	strh	r3, [r4, #12]
 800a068:	6126      	str	r6, [r4, #16]
 800a06a:	6165      	str	r5, [r4, #20]
 800a06c:	443e      	add	r6, r7
 800a06e:	1bed      	subs	r5, r5, r7
 800a070:	6026      	str	r6, [r4, #0]
 800a072:	60a5      	str	r5, [r4, #8]
 800a074:	464e      	mov	r6, r9
 800a076:	454e      	cmp	r6, r9
 800a078:	d900      	bls.n	800a07c <__ssputs_r+0x84>
 800a07a:	464e      	mov	r6, r9
 800a07c:	4632      	mov	r2, r6
 800a07e:	4641      	mov	r1, r8
 800a080:	6820      	ldr	r0, [r4, #0]
 800a082:	f000 fa93 	bl	800a5ac <memmove>
 800a086:	68a3      	ldr	r3, [r4, #8]
 800a088:	1b9b      	subs	r3, r3, r6
 800a08a:	60a3      	str	r3, [r4, #8]
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	441e      	add	r6, r3
 800a090:	6026      	str	r6, [r4, #0]
 800a092:	2000      	movs	r0, #0
 800a094:	e7dc      	b.n	800a050 <__ssputs_r+0x58>
 800a096:	462a      	mov	r2, r5
 800a098:	f000 fb4a 	bl	800a730 <_realloc_r>
 800a09c:	4606      	mov	r6, r0
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d1e2      	bne.n	800a068 <__ssputs_r+0x70>
 800a0a2:	6921      	ldr	r1, [r4, #16]
 800a0a4:	4650      	mov	r0, sl
 800a0a6:	f000 fa9b 	bl	800a5e0 <_free_r>
 800a0aa:	e7c8      	b.n	800a03e <__ssputs_r+0x46>

0800a0ac <_svfiprintf_r>:
 800a0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b0:	461d      	mov	r5, r3
 800a0b2:	898b      	ldrh	r3, [r1, #12]
 800a0b4:	061f      	lsls	r7, r3, #24
 800a0b6:	b09d      	sub	sp, #116	; 0x74
 800a0b8:	4680      	mov	r8, r0
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	4616      	mov	r6, r2
 800a0be:	d50f      	bpl.n	800a0e0 <_svfiprintf_r+0x34>
 800a0c0:	690b      	ldr	r3, [r1, #16]
 800a0c2:	b96b      	cbnz	r3, 800a0e0 <_svfiprintf_r+0x34>
 800a0c4:	2140      	movs	r1, #64	; 0x40
 800a0c6:	f000 fad9 	bl	800a67c <_malloc_r>
 800a0ca:	6020      	str	r0, [r4, #0]
 800a0cc:	6120      	str	r0, [r4, #16]
 800a0ce:	b928      	cbnz	r0, 800a0dc <_svfiprintf_r+0x30>
 800a0d0:	230c      	movs	r3, #12
 800a0d2:	f8c8 3000 	str.w	r3, [r8]
 800a0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0da:	e0c8      	b.n	800a26e <_svfiprintf_r+0x1c2>
 800a0dc:	2340      	movs	r3, #64	; 0x40
 800a0de:	6163      	str	r3, [r4, #20]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e4:	2320      	movs	r3, #32
 800a0e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0ea:	2330      	movs	r3, #48	; 0x30
 800a0ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0f0:	9503      	str	r5, [sp, #12]
 800a0f2:	f04f 0b01 	mov.w	fp, #1
 800a0f6:	4637      	mov	r7, r6
 800a0f8:	463d      	mov	r5, r7
 800a0fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a0fe:	b10b      	cbz	r3, 800a104 <_svfiprintf_r+0x58>
 800a100:	2b25      	cmp	r3, #37	; 0x25
 800a102:	d13e      	bne.n	800a182 <_svfiprintf_r+0xd6>
 800a104:	ebb7 0a06 	subs.w	sl, r7, r6
 800a108:	d00b      	beq.n	800a122 <_svfiprintf_r+0x76>
 800a10a:	4653      	mov	r3, sl
 800a10c:	4632      	mov	r2, r6
 800a10e:	4621      	mov	r1, r4
 800a110:	4640      	mov	r0, r8
 800a112:	f7ff ff71 	bl	8009ff8 <__ssputs_r>
 800a116:	3001      	adds	r0, #1
 800a118:	f000 80a4 	beq.w	800a264 <_svfiprintf_r+0x1b8>
 800a11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11e:	4453      	add	r3, sl
 800a120:	9309      	str	r3, [sp, #36]	; 0x24
 800a122:	783b      	ldrb	r3, [r7, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 809d 	beq.w	800a264 <_svfiprintf_r+0x1b8>
 800a12a:	2300      	movs	r3, #0
 800a12c:	f04f 32ff 	mov.w	r2, #4294967295
 800a130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a134:	9304      	str	r3, [sp, #16]
 800a136:	9307      	str	r3, [sp, #28]
 800a138:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a13c:	931a      	str	r3, [sp, #104]	; 0x68
 800a13e:	462f      	mov	r7, r5
 800a140:	2205      	movs	r2, #5
 800a142:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a146:	4850      	ldr	r0, [pc, #320]	; (800a288 <_svfiprintf_r+0x1dc>)
 800a148:	f7f6 f872 	bl	8000230 <memchr>
 800a14c:	9b04      	ldr	r3, [sp, #16]
 800a14e:	b9d0      	cbnz	r0, 800a186 <_svfiprintf_r+0xda>
 800a150:	06d9      	lsls	r1, r3, #27
 800a152:	bf44      	itt	mi
 800a154:	2220      	movmi	r2, #32
 800a156:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a15a:	071a      	lsls	r2, r3, #28
 800a15c:	bf44      	itt	mi
 800a15e:	222b      	movmi	r2, #43	; 0x2b
 800a160:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a164:	782a      	ldrb	r2, [r5, #0]
 800a166:	2a2a      	cmp	r2, #42	; 0x2a
 800a168:	d015      	beq.n	800a196 <_svfiprintf_r+0xea>
 800a16a:	9a07      	ldr	r2, [sp, #28]
 800a16c:	462f      	mov	r7, r5
 800a16e:	2000      	movs	r0, #0
 800a170:	250a      	movs	r5, #10
 800a172:	4639      	mov	r1, r7
 800a174:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a178:	3b30      	subs	r3, #48	; 0x30
 800a17a:	2b09      	cmp	r3, #9
 800a17c:	d94d      	bls.n	800a21a <_svfiprintf_r+0x16e>
 800a17e:	b1b8      	cbz	r0, 800a1b0 <_svfiprintf_r+0x104>
 800a180:	e00f      	b.n	800a1a2 <_svfiprintf_r+0xf6>
 800a182:	462f      	mov	r7, r5
 800a184:	e7b8      	b.n	800a0f8 <_svfiprintf_r+0x4c>
 800a186:	4a40      	ldr	r2, [pc, #256]	; (800a288 <_svfiprintf_r+0x1dc>)
 800a188:	1a80      	subs	r0, r0, r2
 800a18a:	fa0b f000 	lsl.w	r0, fp, r0
 800a18e:	4318      	orrs	r0, r3
 800a190:	9004      	str	r0, [sp, #16]
 800a192:	463d      	mov	r5, r7
 800a194:	e7d3      	b.n	800a13e <_svfiprintf_r+0x92>
 800a196:	9a03      	ldr	r2, [sp, #12]
 800a198:	1d11      	adds	r1, r2, #4
 800a19a:	6812      	ldr	r2, [r2, #0]
 800a19c:	9103      	str	r1, [sp, #12]
 800a19e:	2a00      	cmp	r2, #0
 800a1a0:	db01      	blt.n	800a1a6 <_svfiprintf_r+0xfa>
 800a1a2:	9207      	str	r2, [sp, #28]
 800a1a4:	e004      	b.n	800a1b0 <_svfiprintf_r+0x104>
 800a1a6:	4252      	negs	r2, r2
 800a1a8:	f043 0302 	orr.w	r3, r3, #2
 800a1ac:	9207      	str	r2, [sp, #28]
 800a1ae:	9304      	str	r3, [sp, #16]
 800a1b0:	783b      	ldrb	r3, [r7, #0]
 800a1b2:	2b2e      	cmp	r3, #46	; 0x2e
 800a1b4:	d10c      	bne.n	800a1d0 <_svfiprintf_r+0x124>
 800a1b6:	787b      	ldrb	r3, [r7, #1]
 800a1b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1ba:	d133      	bne.n	800a224 <_svfiprintf_r+0x178>
 800a1bc:	9b03      	ldr	r3, [sp, #12]
 800a1be:	1d1a      	adds	r2, r3, #4
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	9203      	str	r2, [sp, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	bfb8      	it	lt
 800a1c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1cc:	3702      	adds	r7, #2
 800a1ce:	9305      	str	r3, [sp, #20]
 800a1d0:	4d2e      	ldr	r5, [pc, #184]	; (800a28c <_svfiprintf_r+0x1e0>)
 800a1d2:	7839      	ldrb	r1, [r7, #0]
 800a1d4:	2203      	movs	r2, #3
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f7f6 f82a 	bl	8000230 <memchr>
 800a1dc:	b138      	cbz	r0, 800a1ee <_svfiprintf_r+0x142>
 800a1de:	2340      	movs	r3, #64	; 0x40
 800a1e0:	1b40      	subs	r0, r0, r5
 800a1e2:	fa03 f000 	lsl.w	r0, r3, r0
 800a1e6:	9b04      	ldr	r3, [sp, #16]
 800a1e8:	4303      	orrs	r3, r0
 800a1ea:	3701      	adds	r7, #1
 800a1ec:	9304      	str	r3, [sp, #16]
 800a1ee:	7839      	ldrb	r1, [r7, #0]
 800a1f0:	4827      	ldr	r0, [pc, #156]	; (800a290 <_svfiprintf_r+0x1e4>)
 800a1f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1f6:	2206      	movs	r2, #6
 800a1f8:	1c7e      	adds	r6, r7, #1
 800a1fa:	f7f6 f819 	bl	8000230 <memchr>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d038      	beq.n	800a274 <_svfiprintf_r+0x1c8>
 800a202:	4b24      	ldr	r3, [pc, #144]	; (800a294 <_svfiprintf_r+0x1e8>)
 800a204:	bb13      	cbnz	r3, 800a24c <_svfiprintf_r+0x1a0>
 800a206:	9b03      	ldr	r3, [sp, #12]
 800a208:	3307      	adds	r3, #7
 800a20a:	f023 0307 	bic.w	r3, r3, #7
 800a20e:	3308      	adds	r3, #8
 800a210:	9303      	str	r3, [sp, #12]
 800a212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a214:	444b      	add	r3, r9
 800a216:	9309      	str	r3, [sp, #36]	; 0x24
 800a218:	e76d      	b.n	800a0f6 <_svfiprintf_r+0x4a>
 800a21a:	fb05 3202 	mla	r2, r5, r2, r3
 800a21e:	2001      	movs	r0, #1
 800a220:	460f      	mov	r7, r1
 800a222:	e7a6      	b.n	800a172 <_svfiprintf_r+0xc6>
 800a224:	2300      	movs	r3, #0
 800a226:	3701      	adds	r7, #1
 800a228:	9305      	str	r3, [sp, #20]
 800a22a:	4619      	mov	r1, r3
 800a22c:	250a      	movs	r5, #10
 800a22e:	4638      	mov	r0, r7
 800a230:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a234:	3a30      	subs	r2, #48	; 0x30
 800a236:	2a09      	cmp	r2, #9
 800a238:	d903      	bls.n	800a242 <_svfiprintf_r+0x196>
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0c8      	beq.n	800a1d0 <_svfiprintf_r+0x124>
 800a23e:	9105      	str	r1, [sp, #20]
 800a240:	e7c6      	b.n	800a1d0 <_svfiprintf_r+0x124>
 800a242:	fb05 2101 	mla	r1, r5, r1, r2
 800a246:	2301      	movs	r3, #1
 800a248:	4607      	mov	r7, r0
 800a24a:	e7f0      	b.n	800a22e <_svfiprintf_r+0x182>
 800a24c:	ab03      	add	r3, sp, #12
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	4622      	mov	r2, r4
 800a252:	4b11      	ldr	r3, [pc, #68]	; (800a298 <_svfiprintf_r+0x1ec>)
 800a254:	a904      	add	r1, sp, #16
 800a256:	4640      	mov	r0, r8
 800a258:	f3af 8000 	nop.w
 800a25c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a260:	4681      	mov	r9, r0
 800a262:	d1d6      	bne.n	800a212 <_svfiprintf_r+0x166>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	065b      	lsls	r3, r3, #25
 800a268:	f53f af35 	bmi.w	800a0d6 <_svfiprintf_r+0x2a>
 800a26c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a26e:	b01d      	add	sp, #116	; 0x74
 800a270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a274:	ab03      	add	r3, sp, #12
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	4622      	mov	r2, r4
 800a27a:	4b07      	ldr	r3, [pc, #28]	; (800a298 <_svfiprintf_r+0x1ec>)
 800a27c:	a904      	add	r1, sp, #16
 800a27e:	4640      	mov	r0, r8
 800a280:	f000 f882 	bl	800a388 <_printf_i>
 800a284:	e7ea      	b.n	800a25c <_svfiprintf_r+0x1b0>
 800a286:	bf00      	nop
 800a288:	0800aa78 	.word	0x0800aa78
 800a28c:	0800aa7e 	.word	0x0800aa7e
 800a290:	0800aa82 	.word	0x0800aa82
 800a294:	00000000 	.word	0x00000000
 800a298:	08009ff9 	.word	0x08009ff9

0800a29c <_printf_common>:
 800a29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a0:	4691      	mov	r9, r2
 800a2a2:	461f      	mov	r7, r3
 800a2a4:	688a      	ldr	r2, [r1, #8]
 800a2a6:	690b      	ldr	r3, [r1, #16]
 800a2a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	bfb8      	it	lt
 800a2b0:	4613      	movlt	r3, r2
 800a2b2:	f8c9 3000 	str.w	r3, [r9]
 800a2b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	460c      	mov	r4, r1
 800a2be:	b112      	cbz	r2, 800a2c6 <_printf_common+0x2a>
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	f8c9 3000 	str.w	r3, [r9]
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	0699      	lsls	r1, r3, #26
 800a2ca:	bf42      	ittt	mi
 800a2cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a2d0:	3302      	addmi	r3, #2
 800a2d2:	f8c9 3000 	strmi.w	r3, [r9]
 800a2d6:	6825      	ldr	r5, [r4, #0]
 800a2d8:	f015 0506 	ands.w	r5, r5, #6
 800a2dc:	d107      	bne.n	800a2ee <_printf_common+0x52>
 800a2de:	f104 0a19 	add.w	sl, r4, #25
 800a2e2:	68e3      	ldr	r3, [r4, #12]
 800a2e4:	f8d9 2000 	ldr.w	r2, [r9]
 800a2e8:	1a9b      	subs	r3, r3, r2
 800a2ea:	42ab      	cmp	r3, r5
 800a2ec:	dc28      	bgt.n	800a340 <_printf_common+0xa4>
 800a2ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a2f2:	6822      	ldr	r2, [r4, #0]
 800a2f4:	3300      	adds	r3, #0
 800a2f6:	bf18      	it	ne
 800a2f8:	2301      	movne	r3, #1
 800a2fa:	0692      	lsls	r2, r2, #26
 800a2fc:	d42d      	bmi.n	800a35a <_printf_common+0xbe>
 800a2fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a302:	4639      	mov	r1, r7
 800a304:	4630      	mov	r0, r6
 800a306:	47c0      	blx	r8
 800a308:	3001      	adds	r0, #1
 800a30a:	d020      	beq.n	800a34e <_printf_common+0xb2>
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	68e5      	ldr	r5, [r4, #12]
 800a310:	f8d9 2000 	ldr.w	r2, [r9]
 800a314:	f003 0306 	and.w	r3, r3, #6
 800a318:	2b04      	cmp	r3, #4
 800a31a:	bf08      	it	eq
 800a31c:	1aad      	subeq	r5, r5, r2
 800a31e:	68a3      	ldr	r3, [r4, #8]
 800a320:	6922      	ldr	r2, [r4, #16]
 800a322:	bf0c      	ite	eq
 800a324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a328:	2500      	movne	r5, #0
 800a32a:	4293      	cmp	r3, r2
 800a32c:	bfc4      	itt	gt
 800a32e:	1a9b      	subgt	r3, r3, r2
 800a330:	18ed      	addgt	r5, r5, r3
 800a332:	f04f 0900 	mov.w	r9, #0
 800a336:	341a      	adds	r4, #26
 800a338:	454d      	cmp	r5, r9
 800a33a:	d11a      	bne.n	800a372 <_printf_common+0xd6>
 800a33c:	2000      	movs	r0, #0
 800a33e:	e008      	b.n	800a352 <_printf_common+0xb6>
 800a340:	2301      	movs	r3, #1
 800a342:	4652      	mov	r2, sl
 800a344:	4639      	mov	r1, r7
 800a346:	4630      	mov	r0, r6
 800a348:	47c0      	blx	r8
 800a34a:	3001      	adds	r0, #1
 800a34c:	d103      	bne.n	800a356 <_printf_common+0xba>
 800a34e:	f04f 30ff 	mov.w	r0, #4294967295
 800a352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a356:	3501      	adds	r5, #1
 800a358:	e7c3      	b.n	800a2e2 <_printf_common+0x46>
 800a35a:	18e1      	adds	r1, r4, r3
 800a35c:	1c5a      	adds	r2, r3, #1
 800a35e:	2030      	movs	r0, #48	; 0x30
 800a360:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a364:	4422      	add	r2, r4
 800a366:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a36a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a36e:	3302      	adds	r3, #2
 800a370:	e7c5      	b.n	800a2fe <_printf_common+0x62>
 800a372:	2301      	movs	r3, #1
 800a374:	4622      	mov	r2, r4
 800a376:	4639      	mov	r1, r7
 800a378:	4630      	mov	r0, r6
 800a37a:	47c0      	blx	r8
 800a37c:	3001      	adds	r0, #1
 800a37e:	d0e6      	beq.n	800a34e <_printf_common+0xb2>
 800a380:	f109 0901 	add.w	r9, r9, #1
 800a384:	e7d8      	b.n	800a338 <_printf_common+0x9c>
	...

0800a388 <_printf_i>:
 800a388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a38c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a390:	460c      	mov	r4, r1
 800a392:	7e09      	ldrb	r1, [r1, #24]
 800a394:	b085      	sub	sp, #20
 800a396:	296e      	cmp	r1, #110	; 0x6e
 800a398:	4617      	mov	r7, r2
 800a39a:	4606      	mov	r6, r0
 800a39c:	4698      	mov	r8, r3
 800a39e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3a0:	f000 80b3 	beq.w	800a50a <_printf_i+0x182>
 800a3a4:	d822      	bhi.n	800a3ec <_printf_i+0x64>
 800a3a6:	2963      	cmp	r1, #99	; 0x63
 800a3a8:	d036      	beq.n	800a418 <_printf_i+0x90>
 800a3aa:	d80a      	bhi.n	800a3c2 <_printf_i+0x3a>
 800a3ac:	2900      	cmp	r1, #0
 800a3ae:	f000 80b9 	beq.w	800a524 <_printf_i+0x19c>
 800a3b2:	2958      	cmp	r1, #88	; 0x58
 800a3b4:	f000 8083 	beq.w	800a4be <_printf_i+0x136>
 800a3b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a3c0:	e032      	b.n	800a428 <_printf_i+0xa0>
 800a3c2:	2964      	cmp	r1, #100	; 0x64
 800a3c4:	d001      	beq.n	800a3ca <_printf_i+0x42>
 800a3c6:	2969      	cmp	r1, #105	; 0x69
 800a3c8:	d1f6      	bne.n	800a3b8 <_printf_i+0x30>
 800a3ca:	6820      	ldr	r0, [r4, #0]
 800a3cc:	6813      	ldr	r3, [r2, #0]
 800a3ce:	0605      	lsls	r5, r0, #24
 800a3d0:	f103 0104 	add.w	r1, r3, #4
 800a3d4:	d52a      	bpl.n	800a42c <_printf_i+0xa4>
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6011      	str	r1, [r2, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	da03      	bge.n	800a3e6 <_printf_i+0x5e>
 800a3de:	222d      	movs	r2, #45	; 0x2d
 800a3e0:	425b      	negs	r3, r3
 800a3e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a3e6:	486f      	ldr	r0, [pc, #444]	; (800a5a4 <_printf_i+0x21c>)
 800a3e8:	220a      	movs	r2, #10
 800a3ea:	e039      	b.n	800a460 <_printf_i+0xd8>
 800a3ec:	2973      	cmp	r1, #115	; 0x73
 800a3ee:	f000 809d 	beq.w	800a52c <_printf_i+0x1a4>
 800a3f2:	d808      	bhi.n	800a406 <_printf_i+0x7e>
 800a3f4:	296f      	cmp	r1, #111	; 0x6f
 800a3f6:	d020      	beq.n	800a43a <_printf_i+0xb2>
 800a3f8:	2970      	cmp	r1, #112	; 0x70
 800a3fa:	d1dd      	bne.n	800a3b8 <_printf_i+0x30>
 800a3fc:	6823      	ldr	r3, [r4, #0]
 800a3fe:	f043 0320 	orr.w	r3, r3, #32
 800a402:	6023      	str	r3, [r4, #0]
 800a404:	e003      	b.n	800a40e <_printf_i+0x86>
 800a406:	2975      	cmp	r1, #117	; 0x75
 800a408:	d017      	beq.n	800a43a <_printf_i+0xb2>
 800a40a:	2978      	cmp	r1, #120	; 0x78
 800a40c:	d1d4      	bne.n	800a3b8 <_printf_i+0x30>
 800a40e:	2378      	movs	r3, #120	; 0x78
 800a410:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a414:	4864      	ldr	r0, [pc, #400]	; (800a5a8 <_printf_i+0x220>)
 800a416:	e055      	b.n	800a4c4 <_printf_i+0x13c>
 800a418:	6813      	ldr	r3, [r2, #0]
 800a41a:	1d19      	adds	r1, r3, #4
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	6011      	str	r1, [r2, #0]
 800a420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a428:	2301      	movs	r3, #1
 800a42a:	e08c      	b.n	800a546 <_printf_i+0x1be>
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	6011      	str	r1, [r2, #0]
 800a430:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a434:	bf18      	it	ne
 800a436:	b21b      	sxthne	r3, r3
 800a438:	e7cf      	b.n	800a3da <_printf_i+0x52>
 800a43a:	6813      	ldr	r3, [r2, #0]
 800a43c:	6825      	ldr	r5, [r4, #0]
 800a43e:	1d18      	adds	r0, r3, #4
 800a440:	6010      	str	r0, [r2, #0]
 800a442:	0628      	lsls	r0, r5, #24
 800a444:	d501      	bpl.n	800a44a <_printf_i+0xc2>
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	e002      	b.n	800a450 <_printf_i+0xc8>
 800a44a:	0668      	lsls	r0, r5, #25
 800a44c:	d5fb      	bpl.n	800a446 <_printf_i+0xbe>
 800a44e:	881b      	ldrh	r3, [r3, #0]
 800a450:	4854      	ldr	r0, [pc, #336]	; (800a5a4 <_printf_i+0x21c>)
 800a452:	296f      	cmp	r1, #111	; 0x6f
 800a454:	bf14      	ite	ne
 800a456:	220a      	movne	r2, #10
 800a458:	2208      	moveq	r2, #8
 800a45a:	2100      	movs	r1, #0
 800a45c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a460:	6865      	ldr	r5, [r4, #4]
 800a462:	60a5      	str	r5, [r4, #8]
 800a464:	2d00      	cmp	r5, #0
 800a466:	f2c0 8095 	blt.w	800a594 <_printf_i+0x20c>
 800a46a:	6821      	ldr	r1, [r4, #0]
 800a46c:	f021 0104 	bic.w	r1, r1, #4
 800a470:	6021      	str	r1, [r4, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d13d      	bne.n	800a4f2 <_printf_i+0x16a>
 800a476:	2d00      	cmp	r5, #0
 800a478:	f040 808e 	bne.w	800a598 <_printf_i+0x210>
 800a47c:	4665      	mov	r5, ip
 800a47e:	2a08      	cmp	r2, #8
 800a480:	d10b      	bne.n	800a49a <_printf_i+0x112>
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	07db      	lsls	r3, r3, #31
 800a486:	d508      	bpl.n	800a49a <_printf_i+0x112>
 800a488:	6923      	ldr	r3, [r4, #16]
 800a48a:	6862      	ldr	r2, [r4, #4]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	bfde      	ittt	le
 800a490:	2330      	movle	r3, #48	; 0x30
 800a492:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a496:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a49a:	ebac 0305 	sub.w	r3, ip, r5
 800a49e:	6123      	str	r3, [r4, #16]
 800a4a0:	f8cd 8000 	str.w	r8, [sp]
 800a4a4:	463b      	mov	r3, r7
 800a4a6:	aa03      	add	r2, sp, #12
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f7ff fef6 	bl	800a29c <_printf_common>
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	d14d      	bne.n	800a550 <_printf_i+0x1c8>
 800a4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b8:	b005      	add	sp, #20
 800a4ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4be:	4839      	ldr	r0, [pc, #228]	; (800a5a4 <_printf_i+0x21c>)
 800a4c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a4c4:	6813      	ldr	r3, [r2, #0]
 800a4c6:	6821      	ldr	r1, [r4, #0]
 800a4c8:	1d1d      	adds	r5, r3, #4
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6015      	str	r5, [r2, #0]
 800a4ce:	060a      	lsls	r2, r1, #24
 800a4d0:	d50b      	bpl.n	800a4ea <_printf_i+0x162>
 800a4d2:	07ca      	lsls	r2, r1, #31
 800a4d4:	bf44      	itt	mi
 800a4d6:	f041 0120 	orrmi.w	r1, r1, #32
 800a4da:	6021      	strmi	r1, [r4, #0]
 800a4dc:	b91b      	cbnz	r3, 800a4e6 <_printf_i+0x15e>
 800a4de:	6822      	ldr	r2, [r4, #0]
 800a4e0:	f022 0220 	bic.w	r2, r2, #32
 800a4e4:	6022      	str	r2, [r4, #0]
 800a4e6:	2210      	movs	r2, #16
 800a4e8:	e7b7      	b.n	800a45a <_printf_i+0xd2>
 800a4ea:	064d      	lsls	r5, r1, #25
 800a4ec:	bf48      	it	mi
 800a4ee:	b29b      	uxthmi	r3, r3
 800a4f0:	e7ef      	b.n	800a4d2 <_printf_i+0x14a>
 800a4f2:	4665      	mov	r5, ip
 800a4f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4f8:	fb02 3311 	mls	r3, r2, r1, r3
 800a4fc:	5cc3      	ldrb	r3, [r0, r3]
 800a4fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a502:	460b      	mov	r3, r1
 800a504:	2900      	cmp	r1, #0
 800a506:	d1f5      	bne.n	800a4f4 <_printf_i+0x16c>
 800a508:	e7b9      	b.n	800a47e <_printf_i+0xf6>
 800a50a:	6813      	ldr	r3, [r2, #0]
 800a50c:	6825      	ldr	r5, [r4, #0]
 800a50e:	6961      	ldr	r1, [r4, #20]
 800a510:	1d18      	adds	r0, r3, #4
 800a512:	6010      	str	r0, [r2, #0]
 800a514:	0628      	lsls	r0, r5, #24
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	d501      	bpl.n	800a51e <_printf_i+0x196>
 800a51a:	6019      	str	r1, [r3, #0]
 800a51c:	e002      	b.n	800a524 <_printf_i+0x19c>
 800a51e:	066a      	lsls	r2, r5, #25
 800a520:	d5fb      	bpl.n	800a51a <_printf_i+0x192>
 800a522:	8019      	strh	r1, [r3, #0]
 800a524:	2300      	movs	r3, #0
 800a526:	6123      	str	r3, [r4, #16]
 800a528:	4665      	mov	r5, ip
 800a52a:	e7b9      	b.n	800a4a0 <_printf_i+0x118>
 800a52c:	6813      	ldr	r3, [r2, #0]
 800a52e:	1d19      	adds	r1, r3, #4
 800a530:	6011      	str	r1, [r2, #0]
 800a532:	681d      	ldr	r5, [r3, #0]
 800a534:	6862      	ldr	r2, [r4, #4]
 800a536:	2100      	movs	r1, #0
 800a538:	4628      	mov	r0, r5
 800a53a:	f7f5 fe79 	bl	8000230 <memchr>
 800a53e:	b108      	cbz	r0, 800a544 <_printf_i+0x1bc>
 800a540:	1b40      	subs	r0, r0, r5
 800a542:	6060      	str	r0, [r4, #4]
 800a544:	6863      	ldr	r3, [r4, #4]
 800a546:	6123      	str	r3, [r4, #16]
 800a548:	2300      	movs	r3, #0
 800a54a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a54e:	e7a7      	b.n	800a4a0 <_printf_i+0x118>
 800a550:	6923      	ldr	r3, [r4, #16]
 800a552:	462a      	mov	r2, r5
 800a554:	4639      	mov	r1, r7
 800a556:	4630      	mov	r0, r6
 800a558:	47c0      	blx	r8
 800a55a:	3001      	adds	r0, #1
 800a55c:	d0aa      	beq.n	800a4b4 <_printf_i+0x12c>
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	079b      	lsls	r3, r3, #30
 800a562:	d413      	bmi.n	800a58c <_printf_i+0x204>
 800a564:	68e0      	ldr	r0, [r4, #12]
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	4298      	cmp	r0, r3
 800a56a:	bfb8      	it	lt
 800a56c:	4618      	movlt	r0, r3
 800a56e:	e7a3      	b.n	800a4b8 <_printf_i+0x130>
 800a570:	2301      	movs	r3, #1
 800a572:	464a      	mov	r2, r9
 800a574:	4639      	mov	r1, r7
 800a576:	4630      	mov	r0, r6
 800a578:	47c0      	blx	r8
 800a57a:	3001      	adds	r0, #1
 800a57c:	d09a      	beq.n	800a4b4 <_printf_i+0x12c>
 800a57e:	3501      	adds	r5, #1
 800a580:	68e3      	ldr	r3, [r4, #12]
 800a582:	9a03      	ldr	r2, [sp, #12]
 800a584:	1a9b      	subs	r3, r3, r2
 800a586:	42ab      	cmp	r3, r5
 800a588:	dcf2      	bgt.n	800a570 <_printf_i+0x1e8>
 800a58a:	e7eb      	b.n	800a564 <_printf_i+0x1dc>
 800a58c:	2500      	movs	r5, #0
 800a58e:	f104 0919 	add.w	r9, r4, #25
 800a592:	e7f5      	b.n	800a580 <_printf_i+0x1f8>
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1ac      	bne.n	800a4f2 <_printf_i+0x16a>
 800a598:	7803      	ldrb	r3, [r0, #0]
 800a59a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a59e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5a2:	e76c      	b.n	800a47e <_printf_i+0xf6>
 800a5a4:	0800aa89 	.word	0x0800aa89
 800a5a8:	0800aa9a 	.word	0x0800aa9a

0800a5ac <memmove>:
 800a5ac:	4288      	cmp	r0, r1
 800a5ae:	b510      	push	{r4, lr}
 800a5b0:	eb01 0302 	add.w	r3, r1, r2
 800a5b4:	d807      	bhi.n	800a5c6 <memmove+0x1a>
 800a5b6:	1e42      	subs	r2, r0, #1
 800a5b8:	4299      	cmp	r1, r3
 800a5ba:	d00a      	beq.n	800a5d2 <memmove+0x26>
 800a5bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a5c4:	e7f8      	b.n	800a5b8 <memmove+0xc>
 800a5c6:	4283      	cmp	r3, r0
 800a5c8:	d9f5      	bls.n	800a5b6 <memmove+0xa>
 800a5ca:	1881      	adds	r1, r0, r2
 800a5cc:	1ad2      	subs	r2, r2, r3
 800a5ce:	42d3      	cmn	r3, r2
 800a5d0:	d100      	bne.n	800a5d4 <memmove+0x28>
 800a5d2:	bd10      	pop	{r4, pc}
 800a5d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a5dc:	e7f7      	b.n	800a5ce <memmove+0x22>
	...

0800a5e0 <_free_r>:
 800a5e0:	b538      	push	{r3, r4, r5, lr}
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	2900      	cmp	r1, #0
 800a5e6:	d045      	beq.n	800a674 <_free_r+0x94>
 800a5e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ec:	1f0c      	subs	r4, r1, #4
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	bfb8      	it	lt
 800a5f2:	18e4      	addlt	r4, r4, r3
 800a5f4:	f000 f8d2 	bl	800a79c <__malloc_lock>
 800a5f8:	4a1f      	ldr	r2, [pc, #124]	; (800a678 <_free_r+0x98>)
 800a5fa:	6813      	ldr	r3, [r2, #0]
 800a5fc:	4610      	mov	r0, r2
 800a5fe:	b933      	cbnz	r3, 800a60e <_free_r+0x2e>
 800a600:	6063      	str	r3, [r4, #4]
 800a602:	6014      	str	r4, [r2, #0]
 800a604:	4628      	mov	r0, r5
 800a606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a60a:	f000 b8c8 	b.w	800a79e <__malloc_unlock>
 800a60e:	42a3      	cmp	r3, r4
 800a610:	d90c      	bls.n	800a62c <_free_r+0x4c>
 800a612:	6821      	ldr	r1, [r4, #0]
 800a614:	1862      	adds	r2, r4, r1
 800a616:	4293      	cmp	r3, r2
 800a618:	bf04      	itt	eq
 800a61a:	681a      	ldreq	r2, [r3, #0]
 800a61c:	685b      	ldreq	r3, [r3, #4]
 800a61e:	6063      	str	r3, [r4, #4]
 800a620:	bf04      	itt	eq
 800a622:	1852      	addeq	r2, r2, r1
 800a624:	6022      	streq	r2, [r4, #0]
 800a626:	6004      	str	r4, [r0, #0]
 800a628:	e7ec      	b.n	800a604 <_free_r+0x24>
 800a62a:	4613      	mov	r3, r2
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	b10a      	cbz	r2, 800a634 <_free_r+0x54>
 800a630:	42a2      	cmp	r2, r4
 800a632:	d9fa      	bls.n	800a62a <_free_r+0x4a>
 800a634:	6819      	ldr	r1, [r3, #0]
 800a636:	1858      	adds	r0, r3, r1
 800a638:	42a0      	cmp	r0, r4
 800a63a:	d10b      	bne.n	800a654 <_free_r+0x74>
 800a63c:	6820      	ldr	r0, [r4, #0]
 800a63e:	4401      	add	r1, r0
 800a640:	1858      	adds	r0, r3, r1
 800a642:	4282      	cmp	r2, r0
 800a644:	6019      	str	r1, [r3, #0]
 800a646:	d1dd      	bne.n	800a604 <_free_r+0x24>
 800a648:	6810      	ldr	r0, [r2, #0]
 800a64a:	6852      	ldr	r2, [r2, #4]
 800a64c:	605a      	str	r2, [r3, #4]
 800a64e:	4401      	add	r1, r0
 800a650:	6019      	str	r1, [r3, #0]
 800a652:	e7d7      	b.n	800a604 <_free_r+0x24>
 800a654:	d902      	bls.n	800a65c <_free_r+0x7c>
 800a656:	230c      	movs	r3, #12
 800a658:	602b      	str	r3, [r5, #0]
 800a65a:	e7d3      	b.n	800a604 <_free_r+0x24>
 800a65c:	6820      	ldr	r0, [r4, #0]
 800a65e:	1821      	adds	r1, r4, r0
 800a660:	428a      	cmp	r2, r1
 800a662:	bf04      	itt	eq
 800a664:	6811      	ldreq	r1, [r2, #0]
 800a666:	6852      	ldreq	r2, [r2, #4]
 800a668:	6062      	str	r2, [r4, #4]
 800a66a:	bf04      	itt	eq
 800a66c:	1809      	addeq	r1, r1, r0
 800a66e:	6021      	streq	r1, [r4, #0]
 800a670:	605c      	str	r4, [r3, #4]
 800a672:	e7c7      	b.n	800a604 <_free_r+0x24>
 800a674:	bd38      	pop	{r3, r4, r5, pc}
 800a676:	bf00      	nop
 800a678:	20010dbc 	.word	0x20010dbc

0800a67c <_malloc_r>:
 800a67c:	b570      	push	{r4, r5, r6, lr}
 800a67e:	1ccd      	adds	r5, r1, #3
 800a680:	f025 0503 	bic.w	r5, r5, #3
 800a684:	3508      	adds	r5, #8
 800a686:	2d0c      	cmp	r5, #12
 800a688:	bf38      	it	cc
 800a68a:	250c      	movcc	r5, #12
 800a68c:	2d00      	cmp	r5, #0
 800a68e:	4606      	mov	r6, r0
 800a690:	db01      	blt.n	800a696 <_malloc_r+0x1a>
 800a692:	42a9      	cmp	r1, r5
 800a694:	d903      	bls.n	800a69e <_malloc_r+0x22>
 800a696:	230c      	movs	r3, #12
 800a698:	6033      	str	r3, [r6, #0]
 800a69a:	2000      	movs	r0, #0
 800a69c:	bd70      	pop	{r4, r5, r6, pc}
 800a69e:	f000 f87d 	bl	800a79c <__malloc_lock>
 800a6a2:	4a21      	ldr	r2, [pc, #132]	; (800a728 <_malloc_r+0xac>)
 800a6a4:	6814      	ldr	r4, [r2, #0]
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	b991      	cbnz	r1, 800a6d0 <_malloc_r+0x54>
 800a6aa:	4c20      	ldr	r4, [pc, #128]	; (800a72c <_malloc_r+0xb0>)
 800a6ac:	6823      	ldr	r3, [r4, #0]
 800a6ae:	b91b      	cbnz	r3, 800a6b8 <_malloc_r+0x3c>
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f000 f863 	bl	800a77c <_sbrk_r>
 800a6b6:	6020      	str	r0, [r4, #0]
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	f000 f85e 	bl	800a77c <_sbrk_r>
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	d124      	bne.n	800a70e <_malloc_r+0x92>
 800a6c4:	230c      	movs	r3, #12
 800a6c6:	6033      	str	r3, [r6, #0]
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f000 f868 	bl	800a79e <__malloc_unlock>
 800a6ce:	e7e4      	b.n	800a69a <_malloc_r+0x1e>
 800a6d0:	680b      	ldr	r3, [r1, #0]
 800a6d2:	1b5b      	subs	r3, r3, r5
 800a6d4:	d418      	bmi.n	800a708 <_malloc_r+0x8c>
 800a6d6:	2b0b      	cmp	r3, #11
 800a6d8:	d90f      	bls.n	800a6fa <_malloc_r+0x7e>
 800a6da:	600b      	str	r3, [r1, #0]
 800a6dc:	50cd      	str	r5, [r1, r3]
 800a6de:	18cc      	adds	r4, r1, r3
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	f000 f85c 	bl	800a79e <__malloc_unlock>
 800a6e6:	f104 000b 	add.w	r0, r4, #11
 800a6ea:	1d23      	adds	r3, r4, #4
 800a6ec:	f020 0007 	bic.w	r0, r0, #7
 800a6f0:	1ac3      	subs	r3, r0, r3
 800a6f2:	d0d3      	beq.n	800a69c <_malloc_r+0x20>
 800a6f4:	425a      	negs	r2, r3
 800a6f6:	50e2      	str	r2, [r4, r3]
 800a6f8:	e7d0      	b.n	800a69c <_malloc_r+0x20>
 800a6fa:	428c      	cmp	r4, r1
 800a6fc:	684b      	ldr	r3, [r1, #4]
 800a6fe:	bf16      	itet	ne
 800a700:	6063      	strne	r3, [r4, #4]
 800a702:	6013      	streq	r3, [r2, #0]
 800a704:	460c      	movne	r4, r1
 800a706:	e7eb      	b.n	800a6e0 <_malloc_r+0x64>
 800a708:	460c      	mov	r4, r1
 800a70a:	6849      	ldr	r1, [r1, #4]
 800a70c:	e7cc      	b.n	800a6a8 <_malloc_r+0x2c>
 800a70e:	1cc4      	adds	r4, r0, #3
 800a710:	f024 0403 	bic.w	r4, r4, #3
 800a714:	42a0      	cmp	r0, r4
 800a716:	d005      	beq.n	800a724 <_malloc_r+0xa8>
 800a718:	1a21      	subs	r1, r4, r0
 800a71a:	4630      	mov	r0, r6
 800a71c:	f000 f82e 	bl	800a77c <_sbrk_r>
 800a720:	3001      	adds	r0, #1
 800a722:	d0cf      	beq.n	800a6c4 <_malloc_r+0x48>
 800a724:	6025      	str	r5, [r4, #0]
 800a726:	e7db      	b.n	800a6e0 <_malloc_r+0x64>
 800a728:	20010dbc 	.word	0x20010dbc
 800a72c:	20010dc0 	.word	0x20010dc0

0800a730 <_realloc_r>:
 800a730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a732:	4607      	mov	r7, r0
 800a734:	4614      	mov	r4, r2
 800a736:	460e      	mov	r6, r1
 800a738:	b921      	cbnz	r1, 800a744 <_realloc_r+0x14>
 800a73a:	4611      	mov	r1, r2
 800a73c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a740:	f7ff bf9c 	b.w	800a67c <_malloc_r>
 800a744:	b922      	cbnz	r2, 800a750 <_realloc_r+0x20>
 800a746:	f7ff ff4b 	bl	800a5e0 <_free_r>
 800a74a:	4625      	mov	r5, r4
 800a74c:	4628      	mov	r0, r5
 800a74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a750:	f000 f826 	bl	800a7a0 <_malloc_usable_size_r>
 800a754:	42a0      	cmp	r0, r4
 800a756:	d20f      	bcs.n	800a778 <_realloc_r+0x48>
 800a758:	4621      	mov	r1, r4
 800a75a:	4638      	mov	r0, r7
 800a75c:	f7ff ff8e 	bl	800a67c <_malloc_r>
 800a760:	4605      	mov	r5, r0
 800a762:	2800      	cmp	r0, #0
 800a764:	d0f2      	beq.n	800a74c <_realloc_r+0x1c>
 800a766:	4631      	mov	r1, r6
 800a768:	4622      	mov	r2, r4
 800a76a:	f7ff fc11 	bl	8009f90 <memcpy>
 800a76e:	4631      	mov	r1, r6
 800a770:	4638      	mov	r0, r7
 800a772:	f7ff ff35 	bl	800a5e0 <_free_r>
 800a776:	e7e9      	b.n	800a74c <_realloc_r+0x1c>
 800a778:	4635      	mov	r5, r6
 800a77a:	e7e7      	b.n	800a74c <_realloc_r+0x1c>

0800a77c <_sbrk_r>:
 800a77c:	b538      	push	{r3, r4, r5, lr}
 800a77e:	4c06      	ldr	r4, [pc, #24]	; (800a798 <_sbrk_r+0x1c>)
 800a780:	2300      	movs	r3, #0
 800a782:	4605      	mov	r5, r0
 800a784:	4608      	mov	r0, r1
 800a786:	6023      	str	r3, [r4, #0]
 800a788:	f7f7 fbc4 	bl	8001f14 <_sbrk>
 800a78c:	1c43      	adds	r3, r0, #1
 800a78e:	d102      	bne.n	800a796 <_sbrk_r+0x1a>
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	b103      	cbz	r3, 800a796 <_sbrk_r+0x1a>
 800a794:	602b      	str	r3, [r5, #0]
 800a796:	bd38      	pop	{r3, r4, r5, pc}
 800a798:	20011014 	.word	0x20011014

0800a79c <__malloc_lock>:
 800a79c:	4770      	bx	lr

0800a79e <__malloc_unlock>:
 800a79e:	4770      	bx	lr

0800a7a0 <_malloc_usable_size_r>:
 800a7a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a4:	1f18      	subs	r0, r3, #4
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	bfbc      	itt	lt
 800a7aa:	580b      	ldrlt	r3, [r1, r0]
 800a7ac:	18c0      	addlt	r0, r0, r3
 800a7ae:	4770      	bx	lr

0800a7b0 <_init>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	bf00      	nop
 800a7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b6:	bc08      	pop	{r3}
 800a7b8:	469e      	mov	lr, r3
 800a7ba:	4770      	bx	lr

0800a7bc <_fini>:
 800a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7be:	bf00      	nop
 800a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c2:	bc08      	pop	{r3}
 800a7c4:	469e      	mov	lr, r3
 800a7c6:	4770      	bx	lr
